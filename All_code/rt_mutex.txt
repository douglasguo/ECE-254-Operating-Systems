; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -ort_mutex.o --asm_dir=.\ --list_dir=.\ --depend=rt_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=rt_mutex.crf rtx_src\rt_Mutex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rt_mut_init PROC
;;;25     
;;;26     void rt_mut_init (OS_ID mutex) {
000000  4601              MOV      r1,r0
;;;27       /* Initialize a mutex object */
;;;28       P_MUCB p_MCB = mutex;
;;;29     
;;;30       p_MCB->cb_type = MUCB;
000002  f04f0203          MOV      r2,#3
000006  700a              STRB     r2,[r1,#0]
;;;31       p_MCB->prio    = 0;
000008  f04f0200          MOV      r2,#0
00000c  704a              STRB     r2,[r1,#1]
;;;32       p_MCB->level   = 0;
00000e  804a              STRH     r2,[r1,#2]
;;;33       p_MCB->p_lnk   = NULL;
000010  604a              STR      r2,[r1,#4]
;;;34       p_MCB->owner   = NULL;
000012  608a              STR      r2,[r1,#8]
;;;35     }
000014  4770              BX       lr
;;;36     
                          ENDP

                  rt_mut_release PROC
;;;39     
;;;40     OS_RESULT rt_mut_release (OS_ID mutex) {
000016  b570              PUSH     {r4-r6,lr}
000018  4606              MOV      r6,r0
;;;41       /* Release a mutex object */
;;;42       P_MUCB p_MCB = mutex;
00001a  4634              MOV      r4,r6
;;;43       P_TCB p_TCB;
;;;44     
;;;45       if (p_MCB->level == 0 || p_MCB->owner != os_tsk.run) {
00001c  8860              LDRH     r0,[r4,#2]
00001e  b120              CBZ      r0,|L1.42|
000020  495a              LDR      r1,|L1.396|
000022  68a0              LDR      r0,[r4,#8]
000024  6809              LDR      r1,[r1,#0]  ; os_tsk
000026  4288              CMP      r0,r1
000028  d001              BEQ      |L1.46|
                  |L1.42|
;;;46         /* Unbalanced mutex release or task is not the owner */
;;;47         return (OS_R_NOK);
00002a  20ff              MOVS     r0,#0xff
                  |L1.44|
;;;48       }
;;;49       if (--p_MCB->level != 0) {
;;;50         return (OS_R_OK);
;;;51       }
;;;52       /* Restore owner task's priority. */
;;;53       os_tsk.run->prio = p_MCB->prio;
;;;54       if (p_MCB->p_lnk != NULL) {
;;;55         /* A task is waiting for mutex. */
;;;56         p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;57         p_TCB->ret_val = OS_R_MUT;
;;;58         rt_rmv_dly (p_TCB);
;;;59         /* A waiting task becomes the owner of this mutex. */
;;;60         p_MCB->level     = 1;
;;;61         p_MCB->owner     = p_TCB;
;;;62         p_MCB->prio      = p_TCB->prio;
;;;63         /* Priority inversion, check which task continues. */
;;;64         if (os_tsk.run->prio >= rt_rdy_prio()) {
;;;65           rt_dispatch (p_TCB);
;;;66         }
;;;67         else {
;;;68           /* Ready task has higher priority than running task. */
;;;69           rt_put_prio (&os_rdy, os_tsk.run);
;;;70           rt_put_prio (&os_rdy, p_TCB);
;;;71           os_tsk.run->state = READY;
;;;72           p_TCB->state      = READY;
;;;73           rt_dispatch (NULL);
;;;74         }
;;;75         os_tsk.run->ret_val = OS_R_OK;
;;;76       }
;;;77       else {
;;;78         /* Check if own priority raised by priority inversion. */
;;;79         if (rt_rdy_prio() > os_tsk.run->prio) {
;;;80           rt_put_prio (&os_rdy, os_tsk.run);
;;;81           os_tsk.run->state = READY;
;;;82           rt_dispatch (NULL);
;;;83           os_tsk.run->ret_val = OS_R_OK;
;;;84         }
;;;85       }
;;;86       return (OS_R_OK);
;;;87     }
00002c  bd70              POP      {r4-r6,pc}
                  |L1.46|
00002e  8860              LDRH     r0,[r4,#2]            ;49
000030  f1a00001          SUB      r0,r0,#1              ;49
000034  0400              LSLS     r0,r0,#16             ;49
000036  0c00              LSRS     r0,r0,#16             ;49
000038  8060              STRH     r0,[r4,#2]            ;49
00003a  d001              BEQ      |L1.64|
00003c  2000              MOVS     r0,#0                 ;50
00003e  e7f5              B        |L1.44|
                  |L1.64|
000040  7860              LDRB     r0,[r4,#1]            ;53
000042  4952              LDR      r1,|L1.396|
000044  6809              LDR      r1,[r1,#0]            ;53  ; os_tsk
000046  7088              STRB     r0,[r1,#2]            ;53
000048  6860              LDR      r0,[r4,#4]            ;54
00004a  b3b8              CBZ      r0,|L1.188|
00004c  4620              MOV      r0,r4                 ;56
00004e  f7fffffe          BL       rt_get_first
000052  4605              MOV      r5,r0                 ;56
000054  f04f0005          MOV      r0,#5                 ;57
000058  f8850020          STRB     r0,[r5,#0x20]         ;57
00005c  4628              MOV      r0,r5                 ;58
00005e  f7fffffe          BL       rt_rmv_dly
000062  f04f0001          MOV      r0,#1                 ;60
000066  8060              STRH     r0,[r4,#2]            ;60
000068  60a5              STR      r5,[r4,#8]            ;61
00006a  78a8              LDRB     r0,[r5,#2]            ;62
00006c  7060              STRB     r0,[r4,#1]            ;62
00006e  4847              LDR      r0,|L1.396|
000070  6800              LDR      r0,[r0,#0]            ;64  ; os_tsk
000072  7880              LDRB     r0,[r0,#2]            ;64
000074  4946              LDR      r1,|L1.400|
000076  6849              LDR      r1,[r1,#4]            ;64  ; os_rdy
000078  7889              LDRB     r1,[r1,#2]            ;64
00007a  4288              CMP      r0,r1                 ;64
00007c  db03              BLT      |L1.134|
00007e  4628              MOV      r0,r5                 ;65
000080  f7fffffe          BL       rt_dispatch
000084  e013              B        |L1.174|
                  |L1.134|
000086  4841              LDR      r0,|L1.396|
000088  6800              LDR      r0,[r0,#0]            ;69  ; os_tsk
00008a  4601              MOV      r1,r0                 ;69
00008c  4840              LDR      r0,|L1.400|
00008e  f7fffffe          BL       rt_put_prio
000092  4629              MOV      r1,r5                 ;70
000094  483e              LDR      r0,|L1.400|
000096  f7fffffe          BL       rt_put_prio
00009a  f04f0001          MOV      r0,#1                 ;71
00009e  493b              LDR      r1,|L1.396|
0000a0  6809              LDR      r1,[r1,#0]            ;71  ; os_tsk
0000a2  7048              STRB     r0,[r1,#1]            ;71
0000a4  7068              STRB     r0,[r5,#1]            ;72
0000a6  f04f0000          MOV      r0,#0                 ;73
0000aa  f7fffffe          BL       rt_dispatch
                  |L1.174|
0000ae  f04f0000          MOV      r0,#0                 ;75
0000b2  4936              LDR      r1,|L1.396|
0000b4  6809              LDR      r1,[r1,#0]            ;75  ; os_tsk
0000b6  f8810020          STRB     r0,[r1,#0x20]         ;75
0000ba  e01d              B        |L1.248|
                  |L1.188|
0000bc  e7ff              B        |L1.190|
                  |L1.190|
0000be  4834              LDR      r0,|L1.400|
0000c0  6840              LDR      r0,[r0,#4]            ;79  ; os_rdy
0000c2  7880              LDRB     r0,[r0,#2]            ;79
0000c4  4931              LDR      r1,|L1.396|
0000c6  6809              LDR      r1,[r1,#0]            ;79  ; os_tsk
0000c8  7889              LDRB     r1,[r1,#2]            ;79
0000ca  4288              CMP      r0,r1                 ;79
0000cc  dd14              BLE      |L1.248|
0000ce  482f              LDR      r0,|L1.396|
0000d0  6800              LDR      r0,[r0,#0]            ;80  ; os_tsk
0000d2  4601              MOV      r1,r0                 ;80
0000d4  482e              LDR      r0,|L1.400|
0000d6  f7fffffe          BL       rt_put_prio
0000da  f04f0001          MOV      r0,#1                 ;81
0000de  492b              LDR      r1,|L1.396|
0000e0  6809              LDR      r1,[r1,#0]            ;81  ; os_tsk
0000e2  7048              STRB     r0,[r1,#1]            ;81
0000e4  f04f0000          MOV      r0,#0                 ;82
0000e8  f7fffffe          BL       rt_dispatch
0000ec  f04f0000          MOV      r0,#0                 ;83
0000f0  4926              LDR      r1,|L1.396|
0000f2  6809              LDR      r1,[r1,#0]            ;83  ; os_tsk
0000f4  f8810020          STRB     r0,[r1,#0x20]         ;83
                  |L1.248|
0000f8  2000              MOVS     r0,#0                 ;86
0000fa  e797              B        |L1.44|
;;;88     
                          ENDP

                  rt_mut_wait PROC
;;;91     
;;;92     OS_RESULT rt_mut_wait (OS_ID mutex, U16 timeout) {
0000fc  b570              PUSH     {r4-r6,lr}
0000fe  4605              MOV      r5,r0
000100  460e              MOV      r6,r1
;;;93       /* Wait for a mutex, continue when mutex is free. */
;;;94       P_MUCB p_MCB = mutex;
000102  462c              MOV      r4,r5
;;;95     
;;;96       if (p_MCB->level == 0) {
000104  8860              LDRH     r0,[r4,#2]
000106  b938              CBNZ     r0,|L1.280|
;;;97         p_MCB->owner = os_tsk.run;
000108  4820              LDR      r0,|L1.396|
00010a  6800              LDR      r0,[r0,#0]  ; os_tsk
00010c  60a0              STR      r0,[r4,#8]
;;;98         p_MCB->prio  = os_tsk.run->prio;
00010e  481f              LDR      r0,|L1.396|
000110  6800              LDR      r0,[r0,#0]  ; os_tsk
000112  7880              LDRB     r0,[r0,#2]
000114  7060              STRB     r0,[r4,#1]
;;;99         goto inc;
000116  e005              B        |L1.292|
                  |L1.280|
;;;100      }
;;;101      if (p_MCB->owner == os_tsk.run) {
000118  491c              LDR      r1,|L1.396|
00011a  68a0              LDR      r0,[r4,#8]
00011c  6809              LDR      r1,[r1,#0]  ; os_tsk
00011e  4288              CMP      r0,r1
000120  d107              BNE      |L1.306|
;;;102        /* OK, running task is the owner of this mutex. */
;;;103    inc:p_MCB->level++;
000122  bf00              NOP      
                  |L1.292|
000124  8860              LDRH     r0,[r4,#2]
000126  f1000001          ADD      r0,r0,#1
00012a  8060              STRH     r0,[r4,#2]
;;;104        return (OS_R_OK);
00012c  f04f0000          MOV      r0,#0
                  |L1.304|
;;;105      }
;;;106      /* Mutex owned by another task, wait until released. */
;;;107      if (timeout == 0) {
;;;108        return (OS_R_TMO);
;;;109      }
;;;110      /* Raise the owner task priority if lower than current priority. */
;;;111      /* This priority inversion is called priority inheritance.       */
;;;112      if (p_MCB->prio < os_tsk.run->prio) {
;;;113        p_MCB->owner->prio = os_tsk.run->prio;
;;;114        rt_resort_prio (p_MCB->owner);
;;;115      }
;;;116      if (p_MCB->p_lnk != NULL) {
;;;117        rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;118      }
;;;119      else {
;;;120        p_MCB->p_lnk = os_tsk.run;
;;;121        os_tsk.run->p_lnk  = NULL;
;;;122        os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;123      }
;;;124      rt_block(timeout, WAIT_MUT);
;;;125      return (OS_R_TMO);
;;;126    }
000130  bd70              POP      {r4-r6,pc}
                  |L1.306|
000132  b90e              CBNZ     r6,|L1.312|
000134  2001              MOVS     r0,#1                 ;108
000136  e7fb              B        |L1.304|
                  |L1.312|
000138  7860              LDRB     r0,[r4,#1]            ;112
00013a  4914              LDR      r1,|L1.396|
00013c  6809              LDR      r1,[r1,#0]            ;112  ; os_tsk
00013e  7889              LDRB     r1,[r1,#2]            ;112
000140  4288              CMP      r0,r1                 ;112
000142  da08              BGE      |L1.342|
000144  4811              LDR      r0,|L1.396|
000146  6800              LDR      r0,[r0,#0]            ;113  ; os_tsk
000148  7880              LDRB     r0,[r0,#2]            ;113
00014a  68a1              LDR      r1,[r4,#8]            ;113
00014c  7088              STRB     r0,[r1,#2]            ;113
00014e  68a1              LDR      r1,[r4,#8]            ;114
000150  4608              MOV      r0,r1                 ;114
000152  f7fffffe          BL       rt_resort_prio
                  |L1.342|
000156  6860              LDR      r0,[r4,#4]            ;116
000158  b130              CBZ      r0,|L1.360|
00015a  480c              LDR      r0,|L1.396|
00015c  6800              LDR      r0,[r0,#0]            ;117  ; os_tsk
00015e  4601              MOV      r1,r0                 ;117
000160  4620              MOV      r0,r4                 ;117
000162  f7fffffe          BL       rt_put_prio
000166  e00a              B        |L1.382|
                  |L1.360|
000168  4808              LDR      r0,|L1.396|
00016a  6800              LDR      r0,[r0,#0]            ;120  ; os_tsk
00016c  6060              STR      r0,[r4,#4]            ;120
00016e  f04f0000          MOV      r0,#0                 ;121
000172  4906              LDR      r1,|L1.396|
000174  6809              LDR      r1,[r1,#0]            ;121  ; os_tsk
000176  6048              STR      r0,[r1,#4]            ;121
000178  4804              LDR      r0,|L1.396|
00017a  6800              LDR      r0,[r0,#0]            ;122  ; os_tsk
00017c  6084              STR      r4,[r0,#8]            ;122
                  |L1.382|
00017e  2109              MOVS     r1,#9                 ;124
000180  4630              MOV      r0,r6                 ;124
000182  f7fffffe          BL       rt_block
000186  2001              MOVS     r0,#1                 ;125
000188  e7d2              B        |L1.304|
;;;127    
                          ENDP

00018a  0000              DCW      0x0000
                  |L1.396|
                          DCD      os_tsk
                  |L1.400|
                          DCD      os_rdy
