; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -ort_mailbox.o --asm_dir=.\ --list_dir=.\ --depend=rt_mailbox.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=rt_mailbox.crf rtx_src\rt_Mailbox.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rt_mbx_init PROC
;;;27     
;;;28     void rt_mbx_init (OS_ID mailbox, U16 mbx_size) {
000000  460a              MOV      r2,r1
;;;29       /* Initialize a mailbox */
;;;30       P_MCB p_MCB = mailbox;
000002  4601              MOV      r1,r0
;;;31     
;;;32       p_MCB->cb_type = MCB;
000004  f04f0301          MOV      r3,#1
000008  700b              STRB     r3,[r1,#0]
;;;33       p_MCB->isr_st  = 0;
00000a  f04f0300          MOV      r3,#0
00000e  704b              STRB     r3,[r1,#1]
;;;34       p_MCB->p_lnk   = NULL;
000010  604b              STR      r3,[r1,#4]
;;;35       p_MCB->first   = 0;
000012  810b              STRH     r3,[r1,#8]
;;;36       p_MCB->last    = 0;
000014  814b              STRH     r3,[r1,#0xa]
;;;37       p_MCB->count   = 0;
000016  818b              STRH     r3,[r1,#0xc]
;;;38       p_MCB->size    = (mbx_size + sizeof(void *) - sizeof(struct OS_MCB)) /
000018  f1a20310          SUB      r3,r2,#0x10
00001c  f3c3038f          UBFX     r3,r3,#2,#16
000020  81cb              STRH     r3,[r1,#0xe]
;;;39                                                          (U32)sizeof (void *);
;;;40     }
000022  4770              BX       lr
;;;41     
                          ENDP

                  rt_mbx_send PROC
;;;44     
;;;45     OS_RESULT rt_mbx_send (OS_ID mailbox, void *p_msg, U16 timeout) {
000024  e92d41f0          PUSH     {r4-r8,lr}
000028  4607              MOV      r7,r0
00002a  460d              MOV      r5,r1
00002c  4690              MOV      r8,r2
;;;46       /* Send message to a mailbox */
;;;47       P_MCB p_MCB = mailbox;
00002e  463c              MOV      r4,r7
;;;48       P_TCB p_TCB;
;;;49     
;;;50       if (p_MCB->p_lnk != NULL && p_MCB->count == 0) {
000030  6860              LDR      r0,[r4,#4]
000032  b1c0              CBZ      r0,|L1.102|
000034  89a0              LDRH     r0,[r4,#0xc]
000036  b9b0              CBNZ     r0,|L1.102|
;;;51         /* A task is waiting for message */
;;;52         p_TCB = rt_get_first ((P_XCB)p_MCB);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       rt_get_first
00003e  4606              MOV      r6,r0
;;;53         *p_TCB->msg    = p_msg;
000040  69f0              LDR      r0,[r6,#0x1c]
000042  6005              STR      r5,[r0,#0]
;;;54         p_TCB->ret_val = OS_R_MBX;
000044  f04f0004          MOV      r0,#4
000048  f8860020          STRB     r0,[r6,#0x20]
;;;55         rt_rmv_dly (p_TCB);
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       rt_rmv_dly
;;;56         rt_dispatch (p_TCB);
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       rt_dispatch
;;;57         os_tsk.run->ret_val = OS_R_OK;
000058  f04f0000          MOV      r0,#0
00005c  49b6              LDR      r1,|L1.824|
00005e  6809              LDR      r1,[r1,#0]  ; os_tsk
000060  f8810020          STRB     r0,[r1,#0x20]
000064  e043              B        |L1.238|
                  |L1.102|
;;;58       }
;;;59       else {
;;;60         /* Store message in mailbox queue */
;;;61         if (p_MCB->count == p_MCB->size) {
000066  89a0              LDRH     r0,[r4,#0xc]
000068  89e1              LDRH     r1,[r4,#0xe]
00006a  4288              CMP      r0,r1
00006c  d125              BNE      |L1.186|
;;;62           /* No free message entry, wait for one. If message queue is full, */
;;;63           /* then no task is waiting for message. The 'p_MCB->p_lnk' list   */
;;;64           /* pointer can now be reused for send message waits task list.    */
;;;65           if (timeout == 0) {
00006e  f1b80f00          CMP      r8,#0
000072  d102              BNE      |L1.122|
;;;66             return (OS_R_TMO);
000074  2001              MOVS     r0,#1
                  |L1.118|
;;;67           }
;;;68           if (p_MCB->p_lnk != NULL) {
;;;69             rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;70           }
;;;71           else {
;;;72             p_MCB->p_lnk = os_tsk.run;
;;;73             os_tsk.run->p_lnk  = NULL;
;;;74             os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;75             /* Signal the 'isr_mbx_receive ()' that the task is waiting */
;;;76             /* to send a message */
;;;77             p_MCB->isr_st = 1;
;;;78           }
;;;79           os_tsk.run->msg = p_msg;
;;;80           rt_block (timeout, WAIT_MBX);
;;;81           return (OS_R_TMO);
;;;82         }
;;;83         /* Yes, there is a free entry in a mailbox. */
;;;84         p_MCB->msg[p_MCB->first] = p_msg;
;;;85         rt_inc (&p_MCB->count);
;;;86         if (++p_MCB->first == p_MCB->size) {
;;;87           p_MCB->first = 0;
;;;88         }
;;;89       }
;;;90       return (OS_R_OK);
;;;91     }
000076  e8bd81f0          POP      {r4-r8,pc}
                  |L1.122|
00007a  6860              LDR      r0,[r4,#4]            ;68
00007c  b130              CBZ      r0,|L1.140|
00007e  48ae              LDR      r0,|L1.824|
000080  6800              LDR      r0,[r0,#0]            ;69  ; os_tsk
000082  4601              MOV      r1,r0                 ;69
000084  4620              MOV      r0,r4                 ;69
000086  f7fffffe          BL       rt_put_prio
00008a  e00d              B        |L1.168|
                  |L1.140|
00008c  48aa              LDR      r0,|L1.824|
00008e  6800              LDR      r0,[r0,#0]            ;72  ; os_tsk
000090  6060              STR      r0,[r4,#4]            ;72
000092  f04f0000          MOV      r0,#0                 ;73
000096  49a8              LDR      r1,|L1.824|
000098  6809              LDR      r1,[r1,#0]            ;73  ; os_tsk
00009a  6048              STR      r0,[r1,#4]            ;73
00009c  48a6              LDR      r0,|L1.824|
00009e  6800              LDR      r0,[r0,#0]            ;74  ; os_tsk
0000a0  6084              STR      r4,[r0,#8]            ;74
0000a2  f04f0001          MOV      r0,#1                 ;77
0000a6  7060              STRB     r0,[r4,#1]            ;77
                  |L1.168|
0000a8  48a3              LDR      r0,|L1.824|
0000aa  6800              LDR      r0,[r0,#0]            ;79  ; os_tsk
0000ac  61c5              STR      r5,[r0,#0x1c]         ;79
0000ae  2108              MOVS     r1,#8                 ;80
0000b0  4640              MOV      r0,r8                 ;80
0000b2  f7fffffe          BL       rt_block
0000b6  2001              MOVS     r0,#1                 ;81
0000b8  e7dd              B        |L1.118|
                  |L1.186|
0000ba  8921              LDRH     r1,[r4,#8]            ;84
0000bc  f1040010          ADD      r0,r4,#0x10           ;84
0000c0  f8405021          STR      r5,[r0,r1,LSL #2]     ;84
0000c4  bf00              NOP                            ;85
                  |L1.198|
0000c6  f104000c          ADD      r0,r4,#0xc            ;85
0000ca  e8d00f5f          LDREXH   r0,[r0]               ;85
0000ce  1c40              ADDS     r0,r0,#1              ;85
0000d0  f104010c          ADD      r1,r4,#0xc            ;85
0000d4  e8c10f52          STREXH   r2,r0,[r1]            ;85
0000d8  2a00              CMP      r2,#0                 ;85
0000da  d1f4              BNE      |L1.198|
0000dc  8920              LDRH     r0,[r4,#8]            ;86
0000de  1c40              ADDS     r0,r0,#1              ;86
0000e0  b280              UXTH     r0,r0                 ;86
0000e2  8120              STRH     r0,[r4,#8]            ;86
0000e4  89e1              LDRH     r1,[r4,#0xe]          ;86
0000e6  4288              CMP      r0,r1                 ;86
0000e8  d101              BNE      |L1.238|
0000ea  4610              MOV      r0,r2                 ;87
0000ec  8120              STRH     r0,[r4,#8]            ;87
                  |L1.238|
0000ee  2000              MOVS     r0,#0                 ;90
0000f0  e7c1              B        |L1.118|
;;;92     
                          ENDP

                  rt_mbx_wait PROC
;;;95     
;;;96     OS_RESULT rt_mbx_wait (OS_ID mailbox, void **message, U16 timeout) {
0000f2  e92d41f0          PUSH     {r4-r8,lr}
0000f6  4606              MOV      r6,r0
0000f8  460f              MOV      r7,r1
0000fa  4690              MOV      r8,r2
;;;97       /* Receive a message; possibly wait for it */
;;;98       P_MCB p_MCB = mailbox;
0000fc  4634              MOV      r4,r6
;;;99       P_TCB p_TCB;
;;;100    
;;;101      /* If a message is available in the fifo buffer */
;;;102      /* remove it from the fifo buffer and return. */
;;;103      if (p_MCB->count) {
0000fe  89a0              LDRH     r0,[r4,#0xc]
000100  2800              CMP      r0,#0
000102  d047              BEQ      |L1.404|
;;;104        *message = p_MCB->msg[p_MCB->last];
000104  8961              LDRH     r1,[r4,#0xa]
000106  f1040010          ADD      r0,r4,#0x10
00010a  f8500021          LDR      r0,[r0,r1,LSL #2]
00010e  6038              STR      r0,[r7,#0]
;;;105        if (++p_MCB->last == p_MCB->size) {
000110  8960              LDRH     r0,[r4,#0xa]
000112  f1000001          ADD      r0,r0,#1
000116  b280              UXTH     r0,r0
000118  8160              STRH     r0,[r4,#0xa]
00011a  89e1              LDRH     r1,[r4,#0xe]
00011c  4288              CMP      r0,r1
00011e  d102              BNE      |L1.294|
;;;106          p_MCB->last = 0;
000120  f04f0000          MOV      r0,#0
000124  8160              STRH     r0,[r4,#0xa]
                  |L1.294|
;;;107        }
;;;108        if (p_MCB->p_lnk != NULL) {
000126  6860              LDR      r0,[r4,#4]
000128  b328              CBZ      r0,|L1.374|
;;;109          /* A task is waiting to send message */
;;;110          p_TCB = rt_get_first ((P_XCB)p_MCB);
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       rt_get_first
000130  4605              MOV      r5,r0
;;;111          p_TCB->ret_val = OS_R_OK;
000132  f04f0000          MOV      r0,#0
000136  f8850020          STRB     r0,[r5,#0x20]
;;;112          p_MCB->msg[p_MCB->first] = p_TCB->msg;
00013a  8922              LDRH     r2,[r4,#8]
00013c  f1040010          ADD      r0,r4,#0x10
000140  69e9              LDR      r1,[r5,#0x1c]
000142  f8401022          STR      r1,[r0,r2,LSL #2]
;;;113          if (++p_MCB->first == p_MCB->size) {
000146  8920              LDRH     r0,[r4,#8]
000148  f1000001          ADD      r0,r0,#1
00014c  b280              UXTH     r0,r0
00014e  8120              STRH     r0,[r4,#8]
000150  89e1              LDRH     r1,[r4,#0xe]
000152  4288              CMP      r0,r1
000154  d102              BNE      |L1.348|
;;;114            p_MCB->first = 0;
000156  f04f0000          MOV      r0,#0
00015a  8120              STRH     r0,[r4,#8]
                  |L1.348|
;;;115          }
;;;116          rt_rmv_dly (p_TCB);
00015c  4628              MOV      r0,r5
00015e  f7fffffe          BL       rt_rmv_dly
;;;117          rt_dispatch (p_TCB);
000162  4628              MOV      r0,r5
000164  f7fffffe          BL       rt_dispatch
;;;118          os_tsk.run->ret_val = OS_R_OK;
000168  f04f0000          MOV      r0,#0
00016c  4972              LDR      r1,|L1.824|
00016e  6809              LDR      r1,[r1,#0]  ; os_tsk
000170  f8810020          STRB     r0,[r1,#0x20]
000174  e00b              B        |L1.398|
                  |L1.374|
;;;119        }
;;;120        else {
;;;121          rt_dec (&p_MCB->count);
000176  bf00              NOP      
                  |L1.376|
000178  f104000c          ADD      r0,r4,#0xc
00017c  e8d00f5f          LDREXH   r0,[r0]
000180  1e40              SUBS     r0,r0,#1
000182  f104010c          ADD      r1,r4,#0xc
000186  e8c10f52          STREXH   r2,r0,[r1]
00018a  2a00              CMP      r2,#0
00018c  d1f4              BNE      |L1.376|
                  |L1.398|
;;;122        }
;;;123        return (OS_R_OK);
00018e  2000              MOVS     r0,#0
                  |L1.400|
;;;124      }
;;;125      /* No message available: wait for one */
;;;126      if (timeout == 0) {
;;;127        return (OS_R_TMO);
;;;128      }
;;;129      if (p_MCB->p_lnk != NULL) {
;;;130        rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;131      }
;;;132      else {
;;;133        p_MCB->p_lnk = os_tsk.run;
;;;134        os_tsk.run->p_lnk = NULL;
;;;135        os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;136      }
;;;137      rt_block(timeout, WAIT_MBX);
;;;138      os_tsk.run->msg = message;
;;;139      return (OS_R_TMO);
;;;140    }
000190  e8bd81f0          POP      {r4-r8,pc}
                  |L1.404|
000194  f1b80f00          CMP      r8,#0                 ;126
000198  d101              BNE      |L1.414|
00019a  2001              MOVS     r0,#1                 ;127
00019c  e7f8              B        |L1.400|
                  |L1.414|
00019e  6860              LDR      r0,[r4,#4]            ;129
0001a0  b130              CBZ      r0,|L1.432|
0001a2  4865              LDR      r0,|L1.824|
0001a4  6800              LDR      r0,[r0,#0]            ;130  ; os_tsk
0001a6  4601              MOV      r1,r0                 ;130
0001a8  4620              MOV      r0,r4                 ;130
0001aa  f7fffffe          BL       rt_put_prio
0001ae  e00a              B        |L1.454|
                  |L1.432|
0001b0  4861              LDR      r0,|L1.824|
0001b2  6800              LDR      r0,[r0,#0]            ;133  ; os_tsk
0001b4  6060              STR      r0,[r4,#4]            ;133
0001b6  f04f0000          MOV      r0,#0                 ;134
0001ba  495f              LDR      r1,|L1.824|
0001bc  6809              LDR      r1,[r1,#0]            ;134  ; os_tsk
0001be  6048              STR      r0,[r1,#4]            ;134
0001c0  485d              LDR      r0,|L1.824|
0001c2  6800              LDR      r0,[r0,#0]            ;135  ; os_tsk
0001c4  6084              STR      r4,[r0,#8]            ;135
                  |L1.454|
0001c6  2108              MOVS     r1,#8                 ;137
0001c8  4640              MOV      r0,r8                 ;137
0001ca  f7fffffe          BL       rt_block
0001ce  485a              LDR      r0,|L1.824|
0001d0  6800              LDR      r0,[r0,#0]            ;138  ; os_tsk
0001d2  61c7              STR      r7,[r0,#0x1c]         ;138
0001d4  2001              MOVS     r0,#1                 ;139
0001d6  e7db              B        |L1.400|
;;;141    
                          ENDP

                  rt_mbx_check PROC
;;;144    
;;;145    OS_RESULT rt_mbx_check (OS_ID mailbox) {
0001d8  4601              MOV      r1,r0
;;;146      /* Check for free space in a mailbox. Returns the number of messages     */
;;;147      /* that can be stored to a mailbox. It returns 0 when mailbox is full.   */
;;;148      P_MCB p_MCB = mailbox;
0001da  460a              MOV      r2,r1
;;;149    
;;;150      return (p_MCB->size - p_MCB->count);
0001dc  89d0              LDRH     r0,[r2,#0xe]
0001de  8993              LDRH     r3,[r2,#0xc]
0001e0  eba00003          SUB      r0,r0,r3
;;;151    }
0001e4  4770              BX       lr
;;;152    
                          ENDP

                  isr_mbx_send PROC
;;;155    
;;;156    void isr_mbx_send (OS_ID mailbox, void *p_msg) {
0001e6  b570              PUSH     {r4-r6,lr}
0001e8  4604              MOV      r4,r0
0001ea  460d              MOV      r5,r1
;;;157      /* Same function as "os_mbx_send", but to be called by ISRs. */
;;;158      P_MCB p_MCB = mailbox;
0001ec  4626              MOV      r6,r4
;;;159    
;;;160      rt_psq_enq (p_MCB, (U32)p_msg);
0001ee  4629              MOV      r1,r5
0001f0  4630              MOV      r0,r6
0001f2  f7fffffe          BL       rt_psq_enq
;;;161      rt_psh_req ();
0001f6  f7fffffe          BL       rt_psh_req
;;;162    }
0001fa  bd70              POP      {r4-r6,pc}
;;;163    
                          ENDP

                  isr_mbx_receive PROC
;;;166    
;;;167    OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message) {
0001fc  b570              PUSH     {r4-r6,lr}
0001fe  4605              MOV      r5,r0
000200  460e              MOV      r6,r1
;;;168      /* Receive a message in the interrupt function. The interrupt function   */
;;;169      /* should not wait for a message since this would block the rtx os.      */
;;;170      P_MCB p_MCB = mailbox;
000202  462c              MOV      r4,r5
;;;171    
;;;172      if (p_MCB->count) {
000204  89a0              LDRH     r0,[r4,#0xc]
000206  b348              CBZ      r0,|L1.604|
;;;173        /* A message is available in the fifo buffer. */
;;;174        *message = p_MCB->msg[p_MCB->last];
000208  8961              LDRH     r1,[r4,#0xa]
00020a  f1040010          ADD      r0,r4,#0x10
00020e  f8500021          LDR      r0,[r0,r1,LSL #2]
000212  6030              STR      r0,[r6,#0]
;;;175        if (p_MCB->isr_st == 1) {
000214  7860              LDRB     r0,[r4,#1]
000216  2801              CMP      r0,#1
000218  d109              BNE      |L1.558|
;;;176          /* A task is locked waiting to send message */
;;;177          p_MCB->isr_st = 2;
00021a  f04f0002          MOV      r0,#2
00021e  7060              STRB     r0,[r4,#1]
;;;178          rt_psq_enq (p_MCB, 0);
000220  f04f0100          MOV      r1,#0
000224  4620              MOV      r0,r4
000226  f7fffffe          BL       rt_psq_enq
;;;179          rt_psh_req ();
00022a  f7fffffe          BL       rt_psh_req
                  |L1.558|
;;;180        }
;;;181        rt_dec (&p_MCB->count);
00022e  bf00              NOP      
                  |L1.560|
000230  f104000c          ADD      r0,r4,#0xc
000234  e8d00f5f          LDREXH   r0,[r0]
000238  1e40              SUBS     r0,r0,#1
00023a  f104010c          ADD      r1,r4,#0xc
00023e  e8c10f52          STREXH   r2,r0,[r1]
000242  2a00              CMP      r2,#0
000244  d1f4              BNE      |L1.560|
;;;182        if (++p_MCB->last == p_MCB->size) {
000246  8960              LDRH     r0,[r4,#0xa]
000248  1c40              ADDS     r0,r0,#1
00024a  b280              UXTH     r0,r0
00024c  8160              STRH     r0,[r4,#0xa]
00024e  89e1              LDRH     r1,[r4,#0xe]
000250  4288              CMP      r0,r1
000252  d101              BNE      |L1.600|
;;;183          p_MCB->last = 0;
000254  4610              MOV      r0,r2
000256  8160              STRH     r0,[r4,#0xa]
                  |L1.600|
;;;184        }
;;;185        return (OS_R_MBX);
000258  2004              MOVS     r0,#4
                  |L1.602|
;;;186      }
;;;187      return (OS_R_OK);
;;;188    }
00025a  bd70              POP      {r4-r6,pc}
                  |L1.604|
00025c  2000              MOVS     r0,#0                 ;187
00025e  e7fc              B        |L1.602|
;;;189    
                          ENDP

                  rt_mbx_psh PROC
;;;192    
;;;193    void rt_mbx_psh (P_MCB p_CB, void *p_msg) {
000260  b570              PUSH     {r4-r6,lr}
000262  4604              MOV      r4,r0
000264  460e              MOV      r6,r1
;;;194      /* Store the message to the mailbox queue or pass it to task directly. */
;;;195      P_TCB p_TCB;
;;;196    
;;;197      /* Check if this was an 'isr_mbx_receive ()' post service request.   */
;;;198      if (p_CB->p_lnk != NULL && p_CB->isr_st == 2) {
000266  6860              LDR      r0,[r4,#4]
000268  b348              CBZ      r0,|L1.702|
00026a  7860              LDRB     r0,[r4,#1]
00026c  2802              CMP      r0,#2
00026e  d126              BNE      |L1.702|
;;;199        /* A task is waiting to send message, remove it from the waiting list. */
;;;200        p_CB->isr_st = 0;
000270  f04f0000          MOV      r0,#0
000274  7060              STRB     r0,[r4,#1]
;;;201        p_TCB = rt_get_first ((P_XCB)p_CB);
000276  4620              MOV      r0,r4
000278  f7fffffe          BL       rt_get_first
00027c  4605              MOV      r5,r0
;;;202        p_TCB->ret_val = OS_R_OK;
00027e  f04f0000          MOV      r0,#0
000282  f8850020          STRB     r0,[r5,#0x20]
;;;203        /* Store the message to the mailbox queue. */
;;;204        p_CB->msg[p_CB->first] = p_TCB->msg;
000286  8922              LDRH     r2,[r4,#8]
000288  f1040010          ADD      r0,r4,#0x10
00028c  69e9              LDR      r1,[r5,#0x1c]
00028e  f8401022          STR      r1,[r0,r2,LSL #2]
;;;205        rt_inc (&p_CB->count);
000292  bf00              NOP      
                  |L1.660|
000294  f104000c          ADD      r0,r4,#0xc
000298  e8d00f5f          LDREXH   r0,[r0]
00029c  1c40              ADDS     r0,r0,#1
00029e  f104010c          ADD      r1,r4,#0xc
0002a2  e8c10f52          STREXH   r2,r0,[r1]
0002a6  2a00              CMP      r2,#0
0002a8  d1f4              BNE      |L1.660|
;;;206        if (++p_CB->first == p_CB->size) {
0002aa  8920              LDRH     r0,[r4,#8]
0002ac  1c40              ADDS     r0,r0,#1
0002ae  b280              UXTH     r0,r0
0002b0  8120              STRH     r0,[r4,#8]
0002b2  89e1              LDRH     r1,[r4,#0xe]
0002b4  4288              CMP      r0,r1
0002b6  d101              BNE      |L1.700|
;;;207          p_CB->first = 0;
0002b8  4610              MOV      r0,r2
0002ba  8120              STRH     r0,[r4,#8]
                  |L1.700|
;;;208        }
;;;209        goto rdy;
0002bc  e00e              B        |L1.732|
                  |L1.702|
;;;210      }
;;;211      /* A task is waiting for message, pass the message to task directly. */
;;;212      if (p_CB->p_lnk != NULL && p_CB->count == 0) {
0002be  6860              LDR      r0,[r4,#4]
0002c0  b1b8              CBZ      r0,|L1.754|
0002c2  89a0              LDRH     r0,[r4,#0xc]
0002c4  b9a8              CBNZ     r0,|L1.754|
;;;213        p_TCB = rt_get_first ((P_XCB)p_CB);
0002c6  4620              MOV      r0,r4
0002c8  f7fffffe          BL       rt_get_first
0002cc  4605              MOV      r5,r0
;;;214        *p_TCB->msg = p_msg;
0002ce  69e8              LDR      r0,[r5,#0x1c]
0002d0  6006              STR      r6,[r0,#0]
;;;215        p_TCB->ret_val = OS_R_MBX;
0002d2  f04f0004          MOV      r0,#4
0002d6  f8850020          STRB     r0,[r5,#0x20]
;;;216    rdy:p_TCB->state = READY;
0002da  bf00              NOP      
                  |L1.732|
0002dc  f04f0001          MOV      r0,#1
0002e0  7068              STRB     r0,[r5,#1]
;;;217        rt_rmv_dly (p_TCB);
0002e2  4628              MOV      r0,r5
0002e4  f7fffffe          BL       rt_rmv_dly
;;;218        rt_put_prio (&os_rdy, p_TCB);
0002e8  4629              MOV      r1,r5
0002ea  4814              LDR      r0,|L1.828|
0002ec  f7fffffe          BL       rt_put_prio
0002f0  e021              B        |L1.822|
                  |L1.754|
;;;219      }
;;;220      else {
;;;221        /* No task is waiting for message, store the message to the mailbox queue.*/
;;;222        if (p_CB->count < p_CB->size) {
0002f2  89a0              LDRH     r0,[r4,#0xc]
0002f4  89e1              LDRH     r1,[r4,#0xe]
0002f6  4288              CMP      r0,r1
0002f8  da1a              BGE      |L1.816|
;;;223          p_CB->msg[p_CB->first] = p_msg;
0002fa  8921              LDRH     r1,[r4,#8]
0002fc  f1040010          ADD      r0,r4,#0x10
000300  f8406021          STR      r6,[r0,r1,LSL #2]
;;;224          rt_inc (&p_CB->count);
000304  bf00              NOP      
                  |L1.774|
000306  f104000c          ADD      r0,r4,#0xc
00030a  e8d00f5f          LDREXH   r0,[r0]
00030e  1c40              ADDS     r0,r0,#1
000310  f104010c          ADD      r1,r4,#0xc
000314  e8c10f52          STREXH   r2,r0,[r1]
000318  2a00              CMP      r2,#0
00031a  d1f4              BNE      |L1.774|
;;;225          if (++p_CB->first == p_CB->size) {
00031c  8920              LDRH     r0,[r4,#8]
00031e  1c40              ADDS     r0,r0,#1
000320  b280              UXTH     r0,r0
000322  8120              STRH     r0,[r4,#8]
000324  89e1              LDRH     r1,[r4,#0xe]
000326  4288              CMP      r0,r1
000328  d105              BNE      |L1.822|
;;;226            p_CB->first = 0;
00032a  4610              MOV      r0,r2
00032c  8120              STRH     r0,[r4,#8]
00032e  e002              B        |L1.822|
                  |L1.816|
;;;227          }
;;;228        }
;;;229        else {
;;;230          os_error (OS_ERR_MBX_OVF);
000330  2003              MOVS     r0,#3
000332  f7fffffe          BL       os_error
                  |L1.822|
;;;231        }
;;;232      }
;;;233    }
000336  bd70              POP      {r4-r6,pc}
;;;234    
                          ENDP

                  |L1.824|
                          DCD      os_tsk
                  |L1.828|
                          DCD      os_rdy
