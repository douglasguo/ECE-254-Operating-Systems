; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -oretarget.o --asm_dir=.\ --list_dir=.\ --depend=retarget.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=retarget.crf src\Retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  sendchar PROC
;;;25      *----------------------------------------------------------------------------*/
;;;26     int sendchar (int c) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;27     
;;;28       if (c == '\n')  {
000004  2c0a              CMP      r4,#0xa
000006  d103              BNE      |L1.16|
;;;29         SER_putChar (1, 0x0D);
000008  210d              MOVS     r1,#0xd
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       SER_putChar
                  |L1.16|
;;;30       }
;;;31       SER_putChar (1, c);
000010  4621              MOV      r1,r4
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       SER_putChar
;;;32     
;;;33       return (c);
000018  4620              MOV      r0,r4
;;;34     }
00001a  bd10              POP      {r4,pc}
;;;35     
                          ENDP

                  getkey PROC
;;;39      *----------------------------------------------------------------------------*/
;;;40     int getkey (void) {
00001c  b510              PUSH     {r4,lr}
;;;41     
;;;42       return (SER_getChar(1));
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       SER_getChar
;;;43     }
000024  bd10              POP      {r4,pc}
;;;44     
                          ENDP

                  fputc PROC
;;;50     
;;;51     int fputc(int ch, FILE *f) {
000026  b570              PUSH     {r4-r6,lr}
000028  4604              MOV      r4,r0
00002a  460d              MOV      r5,r1
;;;52       return (sendchar(ch));
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       sendchar
;;;53     }
000032  bd70              POP      {r4-r6,pc}
;;;54     
                          ENDP

                  fgetc PROC
;;;55     
;;;56     int fgetc(FILE *f) {
000034  b510              PUSH     {r4,lr}
000036  4604              MOV      r4,r0
;;;57       return (getkey());
000038  f7fffffe          BL       getkey
;;;58     }
00003c  bd10              POP      {r4,pc}
;;;59     
                          ENDP

                  ferror PROC
;;;60     
;;;61     int ferror(FILE *f) {
00003e  4601              MOV      r1,r0
;;;62       /* Your implementation of ferror */
;;;63       return EOF;
000040  f04f30ff          MOV      r0,#0xffffffff
;;;64     }
000044  4770              BX       lr
;;;65     
                          ENDP

                  _ttywrch PROC
;;;66     
;;;67     void _ttywrch(int ch) {
000046  b510              PUSH     {r4,lr}
000048  4604              MOV      r4,r0
;;;68       sendchar(ch);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       sendchar
;;;69     }
000050  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  _sys_exit PROC
;;;71     
;;;72     void _sys_exit(int return_code) {
000052  bf00              NOP      
                  |L1.84|
;;;73     label:  goto label;  /* endless loop */
000054  e7fe              B        |L1.84|
;;;74     }
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  __stdin
                          DCD      0x00000000
