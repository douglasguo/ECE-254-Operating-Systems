; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -ort_semaphore.o --asm_dir=.\ --list_dir=.\ --depend=rt_semaphore.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=rt_semaphore.crf rtx_src\rt_Semaphore.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rt_sem_init PROC
;;;26     
;;;27     void rt_sem_init (OS_ID semaphore, U16 token_count) {
000000  460a              MOV      r2,r1
;;;28       /* Initialize a semaphore */
;;;29       P_SCB p_SCB = semaphore;
000002  4601              MOV      r1,r0
;;;30     
;;;31       p_SCB->cb_type = SCB;
000004  f04f0302          MOV      r3,#2
000008  700b              STRB     r3,[r1,#0]
;;;32       p_SCB->p_lnk  = NULL;
00000a  f04f0300          MOV      r3,#0
00000e  604b              STR      r3,[r1,#4]
;;;33       p_SCB->tokens = token_count;
000010  804a              STRH     r2,[r1,#2]
;;;34     }
000012  4770              BX       lr
;;;35     
                          ENDP

                  rt_sem_send PROC
;;;38     
;;;39     OS_RESULT rt_sem_send (OS_ID semaphore) {
000014  b570              PUSH     {r4-r6,lr}
000016  4605              MOV      r5,r0
;;;40       /* Return a token to semaphore */
;;;41       P_SCB p_SCB = semaphore;
000018  462c              MOV      r4,r5
;;;42       P_TCB p_TCB;
;;;43     
;;;44       if (p_SCB->p_lnk != NULL) {
00001a  6860              LDR      r0,[r4,#4]
00001c  b1a0              CBZ      r0,|L1.72|
;;;45         /* A task is waiting for token */
;;;46         p_TCB = rt_get_first ((P_XCB)p_SCB);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       rt_get_first
000024  4606              MOV      r6,r0
;;;47         p_TCB->ret_val = OS_R_SEM;
000026  f04f0003          MOV      r0,#3
00002a  f8860020          STRB     r0,[r6,#0x20]
;;;48         rt_rmv_dly (p_TCB);
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       rt_rmv_dly
;;;49         rt_dispatch (p_TCB);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       rt_dispatch
;;;50         os_tsk.run->ret_val = OS_R_OK;
00003a  f04f0000          MOV      r0,#0
00003e  492e              LDR      r1,|L1.248|
000040  6809              LDR      r1,[r1,#0]  ; os_tsk
000042  f8810020          STRB     r0,[r1,#0x20]
000046  e003              B        |L1.80|
                  |L1.72|
;;;51       }
;;;52       else {
;;;53         /* Store token. */
;;;54         p_SCB->tokens++;
000048  8860              LDRH     r0,[r4,#2]
00004a  f1000001          ADD      r0,r0,#1
00004e  8060              STRH     r0,[r4,#2]
                  |L1.80|
;;;55       }
;;;56       return (OS_R_OK);
000050  2000              MOVS     r0,#0
;;;57     }
000052  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP

                  rt_sem_wait PROC
;;;61     
;;;62     OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout) {
000054  b570              PUSH     {r4-r6,lr}
000056  4605              MOV      r5,r0
000058  460e              MOV      r6,r1
;;;63       /* Obtain a token; possibly wait for it */
;;;64       P_SCB p_SCB = semaphore;
00005a  462c              MOV      r4,r5
;;;65     
;;;66       if (p_SCB->tokens) {
00005c  8860              LDRH     r0,[r4,#2]
00005e  b130              CBZ      r0,|L1.110|
;;;67         p_SCB->tokens--;
000060  8860              LDRH     r0,[r4,#2]
000062  f1a00001          SUB      r0,r0,#1
000066  8060              STRH     r0,[r4,#2]
;;;68         return (OS_R_OK);
000068  f04f0000          MOV      r0,#0
                  |L1.108|
;;;69       }
;;;70       /* No token available: wait for one */
;;;71       if (timeout == 0) {
;;;72         return (OS_R_TMO);
;;;73       }
;;;74       if (p_SCB->p_lnk != NULL) {
;;;75         rt_put_prio ((P_XCB)p_SCB, os_tsk.run);
;;;76       }
;;;77       else {
;;;78         p_SCB->p_lnk = os_tsk.run;
;;;79         os_tsk.run->p_lnk = NULL;
;;;80         os_tsk.run->p_rlnk = (P_TCB)p_SCB;
;;;81       }
;;;82       rt_block(timeout, WAIT_SEM);
;;;83       return (OS_R_TMO);
;;;84     }
00006c  bd70              POP      {r4-r6,pc}
                  |L1.110|
00006e  b90e              CBNZ     r6,|L1.116|
000070  2001              MOVS     r0,#1                 ;72
000072  e7fb              B        |L1.108|
                  |L1.116|
000074  6860              LDR      r0,[r4,#4]            ;74
000076  b130              CBZ      r0,|L1.134|
000078  481f              LDR      r0,|L1.248|
00007a  6800              LDR      r0,[r0,#0]            ;75  ; os_tsk
00007c  4601              MOV      r1,r0                 ;75
00007e  4620              MOV      r0,r4                 ;75
000080  f7fffffe          BL       rt_put_prio
000084  e00a              B        |L1.156|
                  |L1.134|
000086  481c              LDR      r0,|L1.248|
000088  6800              LDR      r0,[r0,#0]            ;78  ; os_tsk
00008a  6060              STR      r0,[r4,#4]            ;78
00008c  f04f0000          MOV      r0,#0                 ;79
000090  4919              LDR      r1,|L1.248|
000092  6809              LDR      r1,[r1,#0]            ;79  ; os_tsk
000094  6048              STR      r0,[r1,#4]            ;79
000096  4818              LDR      r0,|L1.248|
000098  6800              LDR      r0,[r0,#0]            ;80  ; os_tsk
00009a  6084              STR      r4,[r0,#8]            ;80
                  |L1.156|
00009c  2107              MOVS     r1,#7                 ;82
00009e  4630              MOV      r0,r6                 ;82
0000a0  f7fffffe          BL       rt_block
0000a4  2001              MOVS     r0,#1                 ;83
0000a6  e7e1              B        |L1.108|
;;;85     
                          ENDP

                  isr_sem_send PROC
;;;88     
;;;89     void isr_sem_send (OS_ID semaphore) {
0000a8  b570              PUSH     {r4-r6,lr}
0000aa  4604              MOV      r4,r0
;;;90       /* Same function as "os_sem"send", but to be called by ISRs */
;;;91       P_SCB p_SCB = semaphore;
0000ac  4625              MOV      r5,r4
;;;92     
;;;93       rt_psq_enq (p_SCB, 0);
0000ae  f04f0100          MOV      r1,#0
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       rt_psq_enq
;;;94       rt_psh_req ();
0000b8  f7fffffe          BL       rt_psh_req
;;;95     }
0000bc  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP

                  rt_sem_psh PROC
;;;99     
;;;100    void rt_sem_psh (P_SCB p_CB) {
0000be  b570              PUSH     {r4-r6,lr}
0000c0  4605              MOV      r5,r0
;;;101      /* Check if task has to be waken up */
;;;102      P_TCB p_TCB;
;;;103    
;;;104      if (p_CB->p_lnk != NULL) {
0000c2  6868              LDR      r0,[r5,#4]
0000c4  b190              CBZ      r0,|L1.236|
;;;105        /* A task is waiting for token */
;;;106        p_TCB = rt_get_first ((P_XCB)p_CB);
0000c6  4628              MOV      r0,r5
0000c8  f7fffffe          BL       rt_get_first
0000cc  4604              MOV      r4,r0
;;;107        rt_rmv_dly (p_TCB);
0000ce  4620              MOV      r0,r4
0000d0  f7fffffe          BL       rt_rmv_dly
;;;108        p_TCB->state   = READY;
0000d4  f04f0001          MOV      r0,#1
0000d8  7060              STRB     r0,[r4,#1]
;;;109        p_TCB->ret_val = OS_R_SEM;
0000da  f04f0003          MOV      r0,#3
0000de  f8840020          STRB     r0,[r4,#0x20]
;;;110        rt_put_prio (&os_rdy, p_TCB);
0000e2  4621              MOV      r1,r4
0000e4  4805              LDR      r0,|L1.252|
0000e6  f7fffffe          BL       rt_put_prio
0000ea  e003              B        |L1.244|
                  |L1.236|
;;;111      }
;;;112      else {
;;;113        /* Store token */
;;;114        p_CB->tokens++;
0000ec  8868              LDRH     r0,[r5,#2]
0000ee  f1000001          ADD      r0,r0,#1
0000f2  8068              STRH     r0,[r5,#2]
                  |L1.244|
;;;115      }
;;;116    }
0000f4  bd70              POP      {r4-r6,pc}
;;;117    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L1.248|
                          DCD      os_tsk
                  |L1.252|
                          DCD      os_rdy
