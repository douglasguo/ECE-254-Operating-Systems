; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -ort_posixqueue.o --asm_dir=.\ --list_dir=.\ --depend=rt_posixqueue.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=rt_posixqueue.crf rtx_src\rt_PosixQueue.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  printheap PROC
;;;218    //functions for printing heap for debugging purposes
;;;219    void printheap(mqueue msgqueue, int rootpos)
000000  b40f              PUSH     {r0-r3}
;;;220    {
000002  b530              PUSH     {r4,r5,lr}
000004  b0d3              SUB      sp,sp,#0x14c
000006  9cab              LDR      r4,[sp,#0x2ac]
;;;221    	if(rootpos> msgqueue.nummessages)
000008  98a8              LDR      r0,[sp,#0x2a0]
00000a  42a0              CMP      r0,r4
00000c  da03              BGE      |L1.22|
                  |L1.14|
;;;222    	{
;;;223    		return;
;;;224    	}
;;;225    	printheap(msgqueue,rootpos * 2);
;;;226    	printf("   message: '%s' | message size: %d | priority: %d | arraypos: %d\n",msgqueue.messages[rootpos].msg_ptr, msgqueue.messages[rootpos].msg_size, msgqueue.messages[rootpos].priority,rootpos);
;;;227    	printheap(msgqueue,rootpos * 2 + 1);
;;;228    
;;;229    }
00000e  b053              ADD      sp,sp,#0x14c
000010  bc30              POP      {r4,r5}
000012  f85dfb14          LDR      pc,[sp],#0x14
                  |L1.22|
000016  0060              LSLS     r0,r4,#1              ;225
000018  f44f72a2          MOV      r2,#0x144             ;225
00001c  a95a              ADD      r1,sp,#0x168          ;225
00001e  9051              STR      r0,[sp,#0x144]        ;225
000020  4668              MOV      r0,sp                 ;225
000022  f7fffffe          BL       __aeabi_memcpy4
000026  a856              ADD      r0,sp,#0x158          ;225
000028  c80f              LDM      r0,{r0-r3}            ;225
00002a  f7fffffe          BL       printheap
00002e  eb040044          ADD      r0,r4,r4,LSL #1       ;226
000032  ad56              ADD      r5,sp,#0x158          ;226
000034  9400              STR      r4,[sp,#0]            ;226
000036  f8550020          LDR      r0,[r5,r0,LSL #2]     ;226
00003a  4603              MOV      r3,r0                 ;226
00003c  eb040044          ADD      r0,r4,r4,LSL #1       ;226
000040  eb050080          ADD      r0,r5,r0,LSL #2       ;226
000044  6880              LDR      r0,[r0,#8]            ;226
000046  4602              MOV      r2,r0                 ;226
000048  eb040044          ADD      r0,r4,r4,LSL #1       ;226
00004c  eb050080          ADD      r0,r5,r0,LSL #2       ;226
000050  6840              LDR      r0,[r0,#4]            ;226
000052  4601              MOV      r1,r0                 ;226
000054  48ff              LDR      r0,|L1.1108|
000056  f7fffffe          BL       __2printf
00005a  0060              LSLS     r0,r4,#1              ;227
00005c  1c40              ADDS     r0,r0,#1              ;227
00005e  f44f72a2          MOV      r2,#0x144             ;227
000062  a95a              ADD      r1,sp,#0x168          ;227
000064  9051              STR      r0,[sp,#0x144]        ;227
000066  4668              MOV      r0,sp                 ;227
000068  f7fffffe          BL       __aeabi_memcpy4
00006c  a856              ADD      r0,sp,#0x158          ;227
00006e  c80f              LDM      r0,{r0-r3}            ;227
000070  f7fffffe          BL       printheap
000074  bf00              NOP      
000076  e7ca              B        |L1.14|
;;;230    
                          ENDP

                  print PROC
;;;231    void print(mqueue msgqueue)
000078  b40f              PUSH     {r0-r3}
;;;232    {
00007a  b500              PUSH     {lr}
00007c  b0d3              SUB      sp,sp,#0x14c
;;;233    
;;;234    	printf("   Queue information -> queuename: '%s' | nummessages: %d\n",msgqueue.name,msgqueue.nummessages); 
00007e  98a6              LDR      r0,[sp,#0x298]
000080  4602              MOV      r2,r0
000082  98a7              LDR      r0,[sp,#0x29c]
000084  4601              MOV      r1,r0
000086  a0f4              ADR      r0,|L1.1112|
000088  f7fffffe          BL       __2printf
;;;235    	printheap(msgqueue,1);
00008c  2001              MOVS     r0,#1
00008e  f44f72a2          MOV      r2,#0x144
000092  a958              ADD      r1,sp,#0x160
000094  9051              STR      r0,[sp,#0x144]
000096  4668              MOV      r0,sp
000098  f7fffffe          BL       __aeabi_memcpy4
00009c  a854              ADD      r0,sp,#0x150
00009e  c80f              LDM      r0,{r0-r3}
0000a0  f7fffffe          BL       printheap
;;;236    	printf("\n\n");
0000a4  a0fb              ADR      r0,|L1.1172|
0000a6  f7fffffe          BL       __2printf
;;;237    }
0000aa  b053              ADD      sp,sp,#0x14c
0000ac  f85dfb14          LDR      pc,[sp],#0x14
;;;238    
                          ENDP

                  removemax PROC
;;;100    //removes maximum element in heap used as priority queue
;;;101    message removemax(mqueue *msgqueue)
0000b0  e92d41f0          PUSH     {r4-r8,lr}
;;;102    {
0000b4  b0d8              SUB      sp,sp,#0x160
0000b6  4607              MOV      r7,r0
0000b8  460c              MOV      r4,r1
;;;103    	int done = 0;
0000ba  f04f0000          MOV      r0,#0
0000be  4680              MOV      r8,r0
;;;104    	int parentlocation;
;;;105    	int childlocation;
;;;106    	message swap;
;;;107    	message highestprio;
;;;108    
;;;109    		print(*msgqueue);
0000c0  f44f72a2          MOV      r2,#0x144
0000c4  f1040110          ADD      r1,r4,#0x10
0000c8  4668              MOV      r0,sp
0000ca  f7fffffe          BL       __aeabi_memcpy4
0000ce  e894000f          LDM      r4,{r0-r3}
0000d2  f7fffffe          BL       print
;;;110    
;;;111    	//replace value in root with value at end of array which corresponds to last element in heap
;;;112    
;;;113    	parentlocation = 1;
0000d6  f04f0001          MOV      r0,#1
0000da  4605              MOV      r5,r0
;;;114    	highestprio = msgqueue->messages[parentlocation];	   //save the message with highest priority that is going to be returned
0000dc  eb050045          ADD      r0,r5,r5,LSL #1
0000e0  eb040280          ADD      r2,r4,r0,LSL #2
0000e4  ca07              LDM      r2,{r0-r2}
0000e6  ab52              ADD      r3,sp,#0x148
0000e8  c307              STM      r3!,{r0-r2}
;;;115    	msgqueue->messages[parentlocation] = msgqueue->messages[msgqueue->nummessages];
0000ea  eb050045          ADD      r0,r5,r5,LSL #1
0000ee  eb040080          ADD      r0,r4,r0,LSL #2
0000f2  f8d41148          LDR      r1,[r4,#0x148]
0000f6  eb010141          ADD      r1,r1,r1,LSL #1
0000fa  eb040381          ADD      r3,r4,r1,LSL #2
0000fe  cb0e              LDM      r3,{r1-r3}
000100  c00e              STM      r0!,{r1-r3}
;;;116    
;;;117    	while(!done)
000102  e053              B        |L1.428|
                  |L1.260|
;;;118    	{
;;;119    		//first determine which child to compare to
;;;120    
;;;121    		//check if the left child exists
;;;122    		if (parentlocation * 2 < msgqueue->nummessages )
000104  f8d40148          LDR      r0,[r4,#0x148]
000108  ebb00f45          CMP      r0,r5,LSL #1
00010c  dd4b              BLE      |L1.422|
;;;123    		{
;;;124    			//left child exists check if right exists
;;;125    			if(parentlocation * 2 + 1 < msgqueue->nummessages )
00010e  2001              MOVS     r0,#1
000110  eb000045          ADD      r0,r0,r5,LSL #1
000114  f8d41148          LDR      r1,[r4,#0x148]
000118  4288              CMP      r0,r1
00011a  da17              BGE      |L1.332|
;;;126    			{
;;;127    				//both exist find largest priority
;;;128    				if(msgqueue->messages[parentlocation * 2].priority >= msgqueue->messages[parentlocation * 2 + 1].priority)
00011c  0068              LSLS     r0,r5,#1
00011e  eb000040          ADD      r0,r0,r0,LSL #1
000122  f8540020          LDR      r0,[r4,r0,LSL #2]
000126  2101              MOVS     r1,#1
000128  eb010145          ADD      r1,r1,r5,LSL #1
00012c  eb010141          ADD      r1,r1,r1,LSL #1
000130  f8541021          LDR      r1,[r4,r1,LSL #2]
000134  4288              CMP      r0,r1
000136  d303              BCC      |L1.320|
;;;129    				{
;;;130    					childlocation = parentlocation * 2;
000138  ea4f0045          LSL      r0,r5,#1
00013c  4606              MOV      r6,r0
00013e  e00a              B        |L1.342|
                  |L1.320|
;;;131    				}
;;;132    				else //right is bigger use it
;;;133    				{
;;;134    					childlocation = parentlocation * 2 + 1;
000140  f04f0001          MOV      r0,#1
000144  eb000045          ADD      r0,r0,r5,LSL #1
000148  4606              MOV      r6,r0
00014a  e004              B        |L1.342|
                  |L1.332|
;;;135    				}
;;;136    			}
;;;137    			else //right doesn't exist use left
;;;138    			{
;;;139    				childlocation = parentlocation * 2 + 1;
00014c  f04f0001          MOV      r0,#1
000150  eb000045          ADD      r0,r0,r5,LSL #1
000154  4606              MOV      r6,r0
                  |L1.342|
;;;140    			}
;;;141    
;;;142    			//see if we need to swap
;;;143    			if(msgqueue->messages[childlocation].priority > msgqueue->messages[parentlocation].priority)
000156  eb060046          ADD      r0,r6,r6,LSL #1
00015a  f8540020          LDR      r0,[r4,r0,LSL #2]
00015e  eb050145          ADD      r1,r5,r5,LSL #1
000162  f8541021          LDR      r1,[r4,r1,LSL #2]
000166  4288              CMP      r0,r1
000168  d919              BLS      |L1.414|
;;;144    			{
;;;145    				swap = msgqueue->messages[parentlocation];
00016a  eb050045          ADD      r0,r5,r5,LSL #1
00016e  eb040280          ADD      r2,r4,r0,LSL #2
000172  ca07              LDM      r2,{r0-r2}
000174  ab55              ADD      r3,sp,#0x154
000176  c307              STM      r3!,{r0-r2}
;;;146    				msgqueue->messages[parentlocation] = msgqueue->messages[childlocation];
000178  eb050045          ADD      r0,r5,r5,LSL #1
00017c  eb040080          ADD      r0,r4,r0,LSL #2
000180  eb060146          ADD      r1,r6,r6,LSL #1
000184  eb040381          ADD      r3,r4,r1,LSL #2
000188  cb0e              LDM      r3,{r1-r3}
00018a  c00e              STM      r0!,{r1-r3}
;;;147    				msgqueue->messages[childlocation] = swap;
00018c  eb060046          ADD      r0,r6,r6,LSL #1
000190  eb040080          ADD      r0,r4,r0,LSL #2
000194  a955              ADD      r1,sp,#0x154
000196  c90e              LDM      r1,{r1-r3}
000198  c00e              STM      r0!,{r1-r3}
;;;148    
;;;149    				parentlocation = childlocation;
00019a  4635              MOV      r5,r6
00019c  e006              B        |L1.428|
                  |L1.414|
;;;150    
;;;151    			}
;;;152    			else //don't need to swap were done
;;;153    			{
;;;154    				done = 1;
00019e  f04f0001          MOV      r0,#1
0001a2  4680              MOV      r8,r0
0001a4  e002              B        |L1.428|
                  |L1.422|
;;;155    			}
;;;156    		}
;;;157    		else //no child exists we are done
;;;158    		{
;;;159    			done = 1;
0001a6  f04f0001          MOV      r0,#1
0001aa  4680              MOV      r8,r0
                  |L1.428|
0001ac  f1b80f00          CMP      r8,#0                 ;117
0001b0  d0a8              BEQ      |L1.260|
;;;160    		}
;;;161    	}
;;;162    		
;;;163    
;;;164    	--msgqueue->nummessages;
0001b2  f8d40148          LDR      r0,[r4,#0x148]
0001b6  f1a00001          SUB      r0,r0,#1
0001ba  f8c40148          STR      r0,[r4,#0x148]
;;;165    
;;;166    	print(*msgqueue);
0001be  f44f72a2          MOV      r2,#0x144
0001c2  f1040110          ADD      r1,r4,#0x10
0001c6  4668              MOV      r0,sp
0001c8  f7fffffe          BL       __aeabi_memcpy4
0001cc  e894000f          LDM      r4,{r0-r3}
0001d0  f7fffffe          BL       print
;;;167    	return highestprio;
0001d4  a852              ADD      r0,sp,#0x148
0001d6  c807              LDM      r0,{r0-r2}
0001d8  e8870007          STM      r7,{r0-r2}
;;;168    	
;;;169    }
0001dc  b058              ADD      sp,sp,#0x160
0001de  e8bd81f0          POP      {r4-r8,pc}
;;;170    
                          ENDP

                  insert PROC
;;;174    //inserts value into priority queue
;;;175    void insert(mqueue *msgqueue,message toInsert)
0001e2  b5ff              PUSH     {r0-r7,lr}
;;;176    {
0001e4  b083              SUB      sp,sp,#0xc
;;;177    	int parentlocation;
;;;178    	int childlocation;
;;;179    	message swap;
;;;180    	int done = 0;
0001e6  f04f0400          MOV      r4,#0
0001ea  4623              MOV      r3,r4
;;;181    
;;;182    	//want to insert child at whatever space is available on the current level
;;;183    	//this is done by adding it as the last element in the array
;;;184    
;;;185    	msgqueue->messages[msgqueue->nummessages+1] = toInsert;
0001ec  f8d04148          LDR      r4,[r0,#0x148]
0001f0  f1040401          ADD      r4,r4,#1
0001f4  eb040444          ADD      r4,r4,r4,LSL #1
0001f8  eb000484          ADD      r4,r0,r4,LSL #2
0001fc  ad04              ADD      r5,sp,#0x10
0001fe  cde0              LDM      r5,{r5-r7}
000200  c4e0              STM      r4!,{r5-r7}
;;;186    
;;;187    	//now need to make sure this value is less then parent if not swap
;;;188    	//first check if parent exists
;;;189    
;;;190    	childlocation = msgqueue->nummessages + 1;
000202  f8d04148          LDR      r4,[r0,#0x148]
000206  f1040401          ADD      r4,r4,#1
00020a  4622              MOV      r2,r4
;;;191    	parentlocation = childlocation / 2 ;
00020c  4614              MOV      r4,r2
00020e  eb0275d4          ADD      r5,r2,r4,LSR #31
000212  ea4f0565          ASR      r5,r5,#1
000216  4629              MOV      r1,r5
;;;192    
;;;193    	while(parentlocation > 0 && !done)
000218  e02f              B        |L1.634|
                  |L1.538|
;;;194    	{
;;;195    		//check if child is bigger then parent
;;;196    		if(msgqueue->messages[childlocation].priority >  msgqueue->messages[parentlocation].priority)
00021a  eb020442          ADD      r4,r2,r2,LSL #1
00021e  f8504024          LDR      r4,[r0,r4,LSL #2]
000222  eb010541          ADD      r5,r1,r1,LSL #1
000226  f8505025          LDR      r5,[r0,r5,LSL #2]
00022a  42ac              CMP      r4,r5
00022c  d91b              BLS      |L1.614|
;;;197    		{
;;;198    			//if so swap them
;;;199    			swap = msgqueue->messages[parentlocation];
00022e  eb010441          ADD      r4,r1,r1,LSL #1
000232  eb000684          ADD      r6,r0,r4,LSL #2
000236  e9d65400          LDRD     r5,r4,[r6,#0]
00023a  68b6              LDR      r6,[r6,#8]
00023c  e9cd4601          STRD     r4,r6,[sp,#4]
000240  9500              STR      r5,[sp,#0]
;;;200    			msgqueue->messages[parentlocation] = msgqueue->messages[childlocation];
000242  eb010441          ADD      r4,r1,r1,LSL #1
000246  eb000484          ADD      r4,r0,r4,LSL #2
00024a  eb020542          ADD      r5,r2,r2,LSL #1
00024e  eb000785          ADD      r7,r0,r5,LSL #2
000252  cfe0              LDM      r7,{r5-r7}
000254  c4e0              STM      r4!,{r5-r7}
;;;201    			msgqueue->messages[childlocation] = swap;
000256  eb020442          ADD      r4,r2,r2,LSL #1
00025a  eb000484          ADD      r4,r0,r4,LSL #2
00025e  e89d00e0          LDM      sp,{r5-r7}
000262  c4e0              STM      r4!,{r5-r7}
000264  e002              B        |L1.620|
                  |L1.614|
;;;202    		}
;;;203    		else //child not bigger then parent we are done
;;;204    		{
;;;205    			done = 1;
000266  f04f0401          MOV      r4,#1
00026a  4623              MOV      r3,r4
                  |L1.620|
;;;206    		}
;;;207    
;;;208    		childlocation = parentlocation;
00026c  460a              MOV      r2,r1
;;;209    		parentlocation = childlocation / 2;
00026e  4614              MOV      r4,r2
000270  eb0275d4          ADD      r5,r2,r4,LSR #31
000274  ea4f0565          ASR      r5,r5,#1
000278  4629              MOV      r1,r5
                  |L1.634|
00027a  2900              CMP      r1,#0                 ;193
00027c  dd01              BLE      |L1.642|
00027e  2b00              CMP      r3,#0                 ;193
000280  d0cb              BEQ      |L1.538|
                  |L1.642|
;;;210    	}
;;;211    
;;;212    
;;;213    
;;;214    
;;;215    }
000282  b007              ADD      sp,sp,#0x1c
000284  bdf0              POP      {r4-r7,pc}
;;;216    
                          ENDP

                  rt_mq_open PROC
;;;241    //open a queue do various things based on value of oflag as defined in POSIX definitions
;;;242    mqd_t rt_mq_open(const char *name, int oflag)
000286  e92d47f0          PUSH     {r4-r10,lr}
;;;243    {
00028a  4680              MOV      r8,r0
00028c  460d              MOV      r5,r1
;;;244    
;;;245    	U8 queueon;
;;;246    	U8 action= 0;
00028e  f04f0000          MOV      r0,#0
000292  4681              MOV      r9,r0
;;;247    	U8 queuelocation;
;;;248    	U8 processon;
;;;249    	U8 found = 0;
000294  4682              MOV      r10,r0
;;;250    
;;;251    	//check for permissions if none specified default to R/W
;;;252    	if ( ((oflag &  O_RDONLY) == 0) && ((oflag & O_WRONLY) ==0) && ((oflag & O_RDWR) ==0))
000296  f0150f01          TST      r5,#1
00029a  d108              BNE      |L1.686|
00029c  f0150f02          TST      r5,#2
0002a0  d105              BNE      |L1.686|
0002a2  f0150f04          TST      r5,#4
0002a6  d102              BNE      |L1.686|
;;;253    	{
;;;254    		oflag = oflag | O_RDWR;
0002a8  f0450004          ORR      r0,r5,#4
0002ac  4605              MOV      r5,r0
                  |L1.686|
;;;255    	}
;;;256    
;;;257    
;;;258    	//check for reasons of failure
;;;259    
;;;260    	if ( (oflag & O_EXCL) != 0  &&  (oflag & O_CREAT) != 0 ) //we only wish to create a message queue if it does not already exist
0002ae  f0150f10          TST      r5,#0x10
0002b2  d025              BEQ      |L1.768|
0002b4  f0150f08          TST      r5,#8
0002b8  d022              BEQ      |L1.768|
;;;261    	{
;;;262    		//check if message queue exists
;;;263    		for (queueon = 0; queueon < MAXQUEUES; queueon ++)
0002ba  f04f0400          MOV      r4,#0
0002be  e01a              B        |L1.758|
                  |L1.704|
;;;264    		{
;;;265    			if(mqueues[queueon].name == name && mqueues[queueon].inuse )
0002c0  eb041004          ADD      r0,r4,r4,LSL #4
0002c4  eb000080          ADD      r0,r0,r0,LSL #2
0002c8  4973              LDR      r1,|L1.1176|
0002ca  eb010080          ADD      r0,r1,r0,LSL #2
0002ce  f8d0014c          LDR      r0,[r0,#0x14c]
0002d2  4540              CMP      r0,r8
0002d4  d10b              BNE      |L1.750|
0002d6  eb041004          ADD      r0,r4,r4,LSL #4
0002da  eb000080          ADD      r0,r0,r0,LSL #2
0002de  eb010080          ADD      r0,r1,r0,LSL #2
0002e2  f8900152          LDRB     r0,[r0,#0x152]
0002e6  b110              CBZ      r0,|L1.750|
;;;266    			{
;;;267    				//message queue already exists set appropriate error and return
;;;268    				return EEXIST;
0002e8  20f9              MOVS     r0,#0xf9
                  |L1.746|
;;;269    			}
;;;270    		}
;;;271    
;;;272    		action = 1; //if we got here wish to create a message queue
;;;273    
;;;274    
;;;275    	}
;;;276    	if ((oflag & O_CREAT != 0) && (oflag & O_EXCL == 0))
;;;277    	{
;;;278    		//if we just wish to create a queue not caring if it already exists
;;;279    
;;;280    		//check if message queue exists
;;;281    		for (queueon = 0; queueon < MAXQUEUES; queueon ++)
;;;282    		{
;;;283    			if(mqueues[queueon].name == name && mqueues[queueon].inuse)
;;;284    			{
;;;285    				//message queue already exists do nothinig
;;;286    				queuelocation = queueon;
;;;287    				found = 1;
;;;288    				break;
;;;289    			}
;;;290    		}
;;;291    		if (!found)
;;;292    		{
;;;293    			//message queue didn't already exist therefore we wish to create it
;;;294    			action = 1;
;;;295    		}
;;;296    	}
;;;297    
;;;298    
;;;299    	//if not creating new queue make sure selected queue exists
;;;300    	if( (oflag & O_CREAT) == 0)
;;;301    	{
;;;302    		for (queueon = 0; queueon < MAXQUEUES; queueon ++)
;;;303    		{
;;;304    			if(mqueues[queueon].name == name && mqueues[queueon].inuse)
;;;305    			{
;;;306    				queuelocation = queueon;
;;;307    				found = 1;
;;;308    				break; //queue exists were good
;;;309    				
;;;310    			}
;;;311    		}
;;;312    		
;;;313    		if (!found)
;;;314    		{
;;;315    			//queue didnt exist set error and return
;;;316    			return ENOENT;
;;;317    		}
;;;318    
;;;319    		//if we got here wish to open existing queue
;;;320    		action = 2;
;;;321    
;;;322    
;;;323    	}
;;;324    
;;;325    
;;;326    	//try and create messagequeue
;;;327    	if(action == 1 && numqueues == MAXQUEUES)
;;;328    	{
;;;329    		return ENFILE;
;;;330    	}
;;;331    	if (action == 1)
;;;332    	{
;;;333    		//check for space			  --current queues precreated and have 10 of them so there is automatically space because they already exist
;;;334    		//create queue here		  	  --dont actually create because already exists return descriptor
;;;335    		for ( queueon =0; queueon < MAXQUEUES; queueon++)
;;;336    		{
;;;337    			if (mqueues[queueon].inuse == 0)
;;;338    			{
;;;339    				mqueues[queueon].name = (char *)name;
;;;340    				mqueues[queueon].descriptor = queueon;
;;;341    				mqueues[queueon].inuse = 1;
;;;342    
;;;343    				//we created this queue so we are first process to use it
;;;344    				mqueues[queueon].processInfos[0].oflag = oflag;
;;;345    				mqueues[queueon].processInfos[0].taskId = rt_tsk_self();
;;;346    				mqueues[queueon].processInfos[0].inuse = 1;
;;;347    
;;;348    				break;
;;;349    			}
;;;350    		}
;;;351    
;;;352    		++numqueues;
;;;353    
;;;354    		return mqueues[queueon].descriptor;
;;;355    	}
;;;356    
;;;357    	//try and open messagequeue
;;;358    	if(action == 2)
;;;359    	{
;;;360    
;;;361    		//attach our task to the message queue
;;;362    
;;;363    		for(processon = 0; processon < MAXPROCESSESPERQUEUE; processon++)
;;;364    		{
;;;365    			if(mqueues[queuelocation].processInfos[processon].inuse == 0)
;;;366    			{
;;;367    				mqueues[queuelocation].processInfos[processon].inuse = 1;
;;;368    				mqueues[queuelocation].processInfos[processon].oflag = oflag;
;;;369    				mqueues[queuelocation].processInfos[processon].taskId = rt_tsk_self();
;;;370    				break;
;;;371    			}
;;;372    		}
;;;373    		 
;;;374    		//return descriptor of messagequeue
;;;375    		return mqueues[queuelocation].descriptor ;
;;;376    	}
;;;377    
;;;378    
;;;379    	return (mqd_t)-1;
;;;380    }
0002ea  e8bd87f0          POP      {r4-r10,pc}
                  |L1.750|
0002ee  f1040001          ADD      r0,r4,#1              ;263
0002f2  b2c0              UXTB     r0,r0                 ;263
0002f4  4604              MOV      r4,r0                 ;263
                  |L1.758|
0002f6  2c0a              CMP      r4,#0xa               ;263
0002f8  dbe2              BLT      |L1.704|
0002fa  f04f0001          MOV      r0,#1                 ;272
0002fe  4681              MOV      r9,r0                 ;272
                  |L1.768|
000300  f0150f01          TST      r5,#1                 ;276
000304  d029              BEQ      |L1.858|
000306  2000              MOVS     r0,#0                 ;276
000308  b338              CBZ      r0,|L1.858|
00030a  4604              MOV      r4,r0                 ;281
00030c  e01c              B        |L1.840|
                  |L1.782|
00030e  eb041004          ADD      r0,r4,r4,LSL #4       ;283
000312  eb000080          ADD      r0,r0,r0,LSL #2       ;283
000316  4960              LDR      r1,|L1.1176|
000318  eb010080          ADD      r0,r1,r0,LSL #2       ;283
00031c  f8d0014c          LDR      r0,[r0,#0x14c]        ;283
000320  4540              CMP      r0,r8                 ;283
000322  d10d              BNE      |L1.832|
000324  eb041004          ADD      r0,r4,r4,LSL #4       ;283
000328  eb000080          ADD      r0,r0,r0,LSL #2       ;283
00032c  eb010080          ADD      r0,r1,r0,LSL #2       ;283
000330  f8900152          LDRB     r0,[r0,#0x152]        ;283
000334  b120              CBZ      r0,|L1.832|
000336  4627              MOV      r7,r4                 ;286
000338  f04f0001          MOV      r0,#1                 ;287
00033c  4682              MOV      r10,r0                ;287
00033e  e005              B        |L1.844|
                  |L1.832|
000340  f1040001          ADD      r0,r4,#1              ;281
000344  b2c0              UXTB     r0,r0                 ;281
000346  4604              MOV      r4,r0                 ;281
                  |L1.840|
000348  2c0a              CMP      r4,#0xa               ;281
00034a  dbe0              BLT      |L1.782|
                  |L1.844|
00034c  bf00              NOP                            ;288
00034e  f1ba0f00          CMP      r10,#0                ;291
000352  d102              BNE      |L1.858|
000354  f04f0001          MOV      r0,#1                 ;294
000358  4681              MOV      r9,r0                 ;294
                  |L1.858|
00035a  f0150f08          TST      r5,#8                 ;300
00035e  d12b              BNE      |L1.952|
000360  f04f0000          MOV      r0,#0                 ;302
000364  4604              MOV      r4,r0                 ;302
000366  e01c              B        |L1.930|
                  |L1.872|
000368  eb041004          ADD      r0,r4,r4,LSL #4       ;304
00036c  eb000080          ADD      r0,r0,r0,LSL #2       ;304
000370  4949              LDR      r1,|L1.1176|
000372  eb010080          ADD      r0,r1,r0,LSL #2       ;304
000376  f8d0014c          LDR      r0,[r0,#0x14c]        ;304
00037a  4540              CMP      r0,r8                 ;304
00037c  d10d              BNE      |L1.922|
00037e  eb041004          ADD      r0,r4,r4,LSL #4       ;304
000382  eb000080          ADD      r0,r0,r0,LSL #2       ;304
000386  eb010080          ADD      r0,r1,r0,LSL #2       ;304
00038a  f8900152          LDRB     r0,[r0,#0x152]        ;304
00038e  b120              CBZ      r0,|L1.922|
000390  4627              MOV      r7,r4                 ;306
000392  f04f0001          MOV      r0,#1                 ;307
000396  4682              MOV      r10,r0                ;307
000398  e005              B        |L1.934|
                  |L1.922|
00039a  f1040001          ADD      r0,r4,#1              ;302
00039e  b2c0              UXTB     r0,r0                 ;302
0003a0  4604              MOV      r4,r0                 ;302
                  |L1.930|
0003a2  2c0a              CMP      r4,#0xa               ;302
0003a4  dbe0              BLT      |L1.872|
                  |L1.934|
0003a6  bf00              NOP                            ;308
0003a8  f1ba0f00          CMP      r10,#0                ;313
0003ac  d101              BNE      |L1.946|
0003ae  20fa              MOVS     r0,#0xfa              ;316
0003b0  e79b              B        |L1.746|
                  |L1.946|
0003b2  f04f0002          MOV      r0,#2                 ;320
0003b6  4681              MOV      r9,r0                 ;320
                  |L1.952|
0003b8  f1b90f01          CMP      r9,#1                 ;327
0003bc  d105              BNE      |L1.970|
0003be  4837              LDR      r0,|L1.1180|
0003c0  6800              LDR      r0,[r0,#0]            ;327  ; numqueues
0003c2  280a              CMP      r0,#0xa               ;327
0003c4  d101              BNE      |L1.970|
0003c6  20fb              MOVS     r0,#0xfb              ;329
0003c8  e78f              B        |L1.746|
                  |L1.970|
0003ca  f1b90f01          CMP      r9,#1                 ;331
0003ce  d140              BNE      |L1.1106|
0003d0  f04f0000          MOV      r0,#0                 ;335
0003d4  4604              MOV      r4,r0                 ;335
0003d6  e06e              B        |L1.1206|
                  |L1.984|
0003d8  eb041004          ADD      r0,r4,r4,LSL #4       ;337
0003dc  eb000080          ADD      r0,r0,r0,LSL #2       ;337
0003e0  492d              LDR      r1,|L1.1176|
0003e2  eb010080          ADD      r0,r1,r0,LSL #2       ;337
0003e6  f8900152          LDRB     r0,[r0,#0x152]        ;337
0003ea  bb88              CBNZ     r0,|L1.1104|
0003ec  eb041004          ADD      r0,r4,r4,LSL #4       ;339
0003f0  eb000080          ADD      r0,r0,r0,LSL #2       ;339
0003f4  eb010080          ADD      r0,r1,r0,LSL #2       ;339
0003f8  f8c0814c          STR      r8,[r0,#0x14c]        ;339
0003fc  eb041004          ADD      r0,r4,r4,LSL #4       ;340
000400  eb000080          ADD      r0,r0,r0,LSL #2       ;340
000404  eb010080          ADD      r0,r1,r0,LSL #2       ;340
000408  f8a04150          STRH     r4,[r0,#0x150]        ;340
00040c  f04f0001          MOV      r0,#1                 ;341
000410  eb041104          ADD      r1,r4,r4,LSL #4       ;341
000414  eb010181          ADD      r1,r1,r1,LSL #2       ;341
000418  4a1f              LDR      r2,|L1.1176|
00041a  eb020181          ADD      r1,r2,r1,LSL #2       ;341
00041e  f8810152          STRB     r0,[r1,#0x152]        ;341
000422  eb041004          ADD      r0,r4,r4,LSL #4       ;344
000426  eb000080          ADD      r0,r0,r0,LSL #2       ;344
00042a  4611              MOV      r1,r2                 ;344
00042c  eb010080          ADD      r0,r1,r0,LSL #2       ;344
000430  67c5              STR      r5,[r0,#0x7c]         ;344
000432  f7fffffe          BL       rt_tsk_self
000436  eb041104          ADD      r1,r4,r4,LSL #4       ;345
00043a  eb010181          ADD      r1,r1,r1,LSL #2       ;345
00043e  4a16              LDR      r2,|L1.1176|
000440  eb020181          ADD      r1,r2,r1,LSL #2       ;345
000444  6788              STR      r0,[r1,#0x78]         ;345
000446  f04f0101          MOV      r1,#1                 ;346
00044a  eb041004          ADD      r0,r4,r4,LSL #4       ;346
00044e  e027              B        |L1.1184|
                  |L1.1104|
000450  e02d              B        |L1.1198|
                  |L1.1106|
000452  e043              B        |L1.1244|
                  |L1.1108|
                          DCD      ||.constdata||
                  |L1.1112|
000458  20202051          DCB      "   Queue information -> queuename: '%s' | nummessages: "
00045c  75657565
000460  20696e66
000464  6f726d61
000468  74696f6e
00046c  202d3e20
000470  71756575
000474  656e616d
000478  653a2027
00047c  25732720
000480  7c206e75
000484  6d6d6573
000488  73616765
00048c  733a20  
00048f  25640a00          DCB      "%d\n",0
000493  00                DCB      0
                  |L1.1172|
000494  0a0a00            DCB      "\n\n",0
000497  00                DCB      0
                  |L1.1176|
                          DCD      mqueues
                  |L1.1180|
                          DCD      numqueues
                  |L1.1184|
0004a0  eb000080          ADD      r0,r0,r0,LSL #2       ;346
0004a4  eb020080          ADD      r0,r2,r0,LSL #2       ;346
0004a8  f8801080          STRB     r1,[r0,#0x80]         ;346
0004ac  e005              B        |L1.1210|
                  |L1.1198|
0004ae  f1040001          ADD      r0,r4,#1              ;335
0004b2  b2c0              UXTB     r0,r0                 ;335
0004b4  4604              MOV      r4,r0                 ;335
                  |L1.1206|
0004b6  2c0a              CMP      r4,#0xa               ;335
0004b8  db8e              BLT      |L1.984|
                  |L1.1210|
0004ba  bf00              NOP                            ;348
0004bc  48ff              LDR      r0,|L1.2236|
0004be  6800              LDR      r0,[r0,#0]            ;352  ; numqueues
0004c0  f1000001          ADD      r0,r0,#1              ;352
0004c4  49fd              LDR      r1,|L1.2236|
0004c6  6008              STR      r0,[r1,#0]            ;352  ; numqueues
0004c8  eb041004          ADD      r0,r4,r4,LSL #4       ;354
0004cc  eb000080          ADD      r0,r0,r0,LSL #2       ;354
0004d0  49fb              LDR      r1,|L1.2240|
0004d2  eb010080          ADD      r0,r1,r0,LSL #2       ;354
0004d6  f9b00150          LDRSH    r0,[r0,#0x150]        ;354
0004da  e706              B        |L1.746|
                  |L1.1244|
0004dc  f1b90f02          CMP      r9,#2                 ;358
0004e0  d14f              BNE      |L1.1410|
0004e2  f04f0600          MOV      r6,#0                 ;363
0004e6  e03f              B        |L1.1384|
                  |L1.1256|
0004e8  eb071007          ADD      r0,r7,r7,LSL #4       ;365
0004ec  eb000080          ADD      r0,r0,r0,LSL #2       ;365
0004f0  49f3              LDR      r1,|L1.2240|
0004f2  eb010080          ADD      r0,r1,r0,LSL #2       ;365
0004f6  3078              ADDS     r0,r0,#0x78           ;365
0004f8  eb060146          ADD      r1,r6,r6,LSL #1       ;365
0004fc  eb000081          ADD      r0,r0,r1,LSL #2       ;365
000500  7a00              LDRB     r0,[r0,#8]            ;365
000502  bb68              CBNZ     r0,|L1.1376|
000504  f04f0101          MOV      r1,#1                 ;367
000508  eb071007          ADD      r0,r7,r7,LSL #4       ;367
00050c  eb000080          ADD      r0,r0,r0,LSL #2       ;367
000510  4aeb              LDR      r2,|L1.2240|
000512  eb020080          ADD      r0,r2,r0,LSL #2       ;367
000516  f1000078          ADD      r0,r0,#0x78           ;367
00051a  eb060246          ADD      r2,r6,r6,LSL #1       ;367
00051e  eb000082          ADD      r0,r0,r2,LSL #2       ;367
000522  7201              STRB     r1,[r0,#8]            ;367
000524  eb071007          ADD      r0,r7,r7,LSL #4       ;368
000528  eb000080          ADD      r0,r0,r0,LSL #2       ;368
00052c  49e4              LDR      r1,|L1.2240|
00052e  eb010080          ADD      r0,r1,r0,LSL #2       ;368
000532  f1000078          ADD      r0,r0,#0x78           ;368
000536  eb060146          ADD      r1,r6,r6,LSL #1       ;368
00053a  eb000081          ADD      r0,r0,r1,LSL #2       ;368
00053e  6045              STR      r5,[r0,#4]            ;368
000540  f7fffffe          BL       rt_tsk_self
000544  eb071107          ADD      r1,r7,r7,LSL #4       ;369
000548  eb010181          ADD      r1,r1,r1,LSL #2       ;369
00054c  4adc              LDR      r2,|L1.2240|
00054e  eb020181          ADD      r1,r2,r1,LSL #2       ;369
000552  f1010178          ADD      r1,r1,#0x78           ;369
000556  eb060246          ADD      r2,r6,r6,LSL #1       ;369
00055a  f8410022          STR      r0,[r1,r2,LSL #2]     ;369
00055e  e005              B        |L1.1388|
                  |L1.1376|
000560  f1060001          ADD      r0,r6,#1              ;363
000564  b2c0              UXTB     r0,r0                 ;363
000566  4606              MOV      r6,r0                 ;363
                  |L1.1384|
000568  2e0a              CMP      r6,#0xa               ;363
00056a  dbbd              BLT      |L1.1256|
                  |L1.1388|
00056c  bf00              NOP                            ;370
00056e  eb071007          ADD      r0,r7,r7,LSL #4       ;375
000572  eb000080          ADD      r0,r0,r0,LSL #2       ;375
000576  49d2              LDR      r1,|L1.2240|
000578  eb010080          ADD      r0,r1,r0,LSL #2       ;375
00057c  f9b00150          LDRSH    r0,[r0,#0x150]        ;375
000580  e6b3              B        |L1.746|
                  |L1.1410|
000582  f04f30ff          MOV      r0,#0xffffffff        ;379
000586  e6b0              B        |L1.746|
;;;381    
                          ENDP

                  rt_mq_close PROC
;;;382    int rt_mq_close(mqd_t mqdes)
000588  b570              PUSH     {r4-r6,lr}
;;;383    {
00058a  4605              MOV      r5,r0
;;;384    	U8 processon;
;;;385    
;;;386    	for (processon = 0; processon < MAXPROCESSESPERQUEUE; processon++)
00058c  f04f0000          MOV      r0,#0
000590  4604              MOV      r4,r0
000592  e034              B        |L1.1534|
                  |L1.1428|
;;;387    	{
;;;388    		if ((mqueues[mqdes].processInfos[processon].taskId == rt_tsk_self()) &&  mqueues[mqdes].processInfos[processon].inuse == 1)
000594  f7fffffe          BL       rt_tsk_self
000598  eb051105          ADD      r1,r5,r5,LSL #4
00059c  eb010181          ADD      r1,r1,r1,LSL #2
0005a0  4ac7              LDR      r2,|L1.2240|
0005a2  eb020181          ADD      r1,r2,r1,LSL #2
0005a6  3178              ADDS     r1,r1,#0x78
0005a8  eb040244          ADD      r2,r4,r4,LSL #1
0005ac  f8511022          LDR      r1,[r1,r2,LSL #2]
0005b0  4288              CMP      r0,r1
0005b2  d120              BNE      |L1.1526|
0005b4  eb051005          ADD      r0,r5,r5,LSL #4
0005b8  eb000080          ADD      r0,r0,r0,LSL #2
0005bc  49c0              LDR      r1,|L1.2240|
0005be  eb010080          ADD      r0,r1,r0,LSL #2
0005c2  3078              ADDS     r0,r0,#0x78
0005c4  eb040144          ADD      r1,r4,r4,LSL #1
0005c8  eb000081          ADD      r0,r0,r1,LSL #2
0005cc  7a00              LDRB     r0,[r0,#8]
0005ce  2801              CMP      r0,#1
0005d0  d111              BNE      |L1.1526|
;;;389    		{
;;;390    			mqueues[mqdes].processInfos[processon].inuse = 0;
0005d2  f04f0100          MOV      r1,#0
0005d6  eb051005          ADD      r0,r5,r5,LSL #4
0005da  eb000080          ADD      r0,r0,r0,LSL #2
0005de  4ab8              LDR      r2,|L1.2240|
0005e0  eb020080          ADD      r0,r2,r0,LSL #2
0005e4  f1000078          ADD      r0,r0,#0x78
0005e8  eb040244          ADD      r2,r4,r4,LSL #1
0005ec  eb000082          ADD      r0,r0,r2,LSL #2
0005f0  7201              STRB     r1,[r0,#8]
;;;391    			return 0;
0005f2  4608              MOV      r0,r1
                  |L1.1524|
;;;392    		}
;;;393    	}
;;;394    
;;;395    	return EBADF;
;;;396    
;;;397    }
0005f4  bd70              POP      {r4-r6,pc}
                  |L1.1526|
0005f6  f1040001          ADD      r0,r4,#1              ;386
0005fa  b2c0              UXTB     r0,r0                 ;386
0005fc  4604              MOV      r4,r0                 ;386
                  |L1.1534|
0005fe  2c0a              CMP      r4,#0xa               ;386
000600  dbc8              BLT      |L1.1428|
000602  20fc              MOVS     r0,#0xfc              ;395
000604  e7f6              B        |L1.1524|
;;;398    
                          ENDP

                  rt_mq_send PROC
;;;399    int rt_mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio)
000606  e92d4fff          PUSH     {r0-r11,lr}
;;;400    {
00060a  b0d5              SUB      sp,sp,#0x154
00060c  4604              MOV      r4,r0
00060e  4690              MOV      r8,r2
;;;401    	
;;;402    
;;;403    	U8 processon;
;;;404    	message toInsert;
;;;405    	int oflag = -1;
000610  f04f30ff          MOV      r0,#0xffffffff
000614  4606              MOV      r6,r0
;;;406    	OS_TID ID;
;;;407    	U8 taskOn;
;;;408    	P_TCB taskContext;
;;;409    	P_TCB myContext;
;;;410    
;;;411    	myContext = os_active_TCB[rt_tsk_self()];
000616  f7fffffe          BL       rt_tsk_self
00061a  49aa              LDR      r1,|L1.2244|
00061c  f8510020          LDR      r0,[r1,r0,LSL #2]
000620  4683              MOV      r11,r0
;;;412    
;;;413    
;;;414    	//check if passed a valid queue descriptor
;;;415    
;;;416    	if(mqdes > MAXQUEUES - 1)
000622  2c09              CMP      r4,#9
000624  dd03              BLE      |L1.1582|
;;;417    	{
;;;418    		return EBADF;
000626  20fc              MOVS     r0,#0xfc
                  |L1.1576|
;;;419    	}
;;;420    	//check we have a valid message
;;;421    	if (msg_ptr == NULL )
;;;422    	{
;;;423    		return EINVAL;
;;;424    	}
;;;425    
;;;426    	//load flags for current process
;;;427    	for (processon = 0; processon < MAXPROCESSESPERQUEUE; processon++)
;;;428    	{
;;;429    		if ((mqueues[mqdes].processInfos[processon].taskId == rt_tsk_self()) &&  mqueues[mqdes].processInfos[processon].inuse == 1)
;;;430    		{
;;;431    			oflag = mqueues[mqdes].processInfos[processon].oflag; 
;;;432    		}	
;;;433    	}
;;;434    
;;;435      if (oflag == -1)
;;;436      {
;;;437        return EBADF;
;;;438      }
;;;439    
;;;440    	//check if process has permissions to send message
;;;441    	if(	(oflag & O_RDONLY) != 0)
;;;442    	{
;;;443    		return EBADF;
;;;444    	}
;;;445    
;;;446    	//check to make sure there is space for another message
;;;447    
;;;448    	if(mqueues[mqdes].nummessages >= MAXMESSAGES)
;;;449    	{
;;;450    		if ( (oflag & O_NONBLOCK) != 0)	 //if non block flag is set just return an error
;;;451    		{
;;;452    			return EAGAIN;
;;;453    		}
;;;454    		else //otherwise block and signal we have done so
;;;455    		{
;;;456    			myContext = os_active_TCB[rt_tsk_self() - 1];
;;;457    			myContext->ret_val = BLOCK;
;;;458    
;;;459    			ID = rt_tsk_self();
;;;460    
;;;461    			//add process to blocked list for this particular queue
;;;462    			mqueues[mqdes].blockedSenders.blockedTasks[mqueues[mqdes].blockedSenders.numBlocked] = ID;
;;;463    
;;;464    			//increment the number of processes blocked for this particular queue
;;;465    			++mqueues[mqdes].blockedSenders.numBlocked;
;;;466    
;;;467    			
;;;468    	
;;;469      			rt_block(0xffff,INACTIVE);
;;;470    
;;;471    
;;;472    			return BLOCK; 
;;;473    		}
;;;474    		
;;;475    	}
;;;476    
;;;477    	//send the message
;;;478    
;;;479    	toInsert.priority = msg_prio;
;;;480    	toInsert.msg_size = msg_len;
;;;481    	toInsert.msg_ptr = (char *)rt_mem_alloc(msg_len,(unsigned char) 0);
;;;482    	memcpy((void *)toInsert.msg_ptr,(void *)msg_ptr,msg_len);
;;;483    	insert(&mqueues[mqdes], toInsert);
;;;484      	++mqueues[mqdes].nummessages;
;;;485    	print(mqueues[mqdes]);
;;;486    
;;;487    	//unblock any processes blocked waiting for a message on the queue I'm sending a message to
;;;488    
;;;489    	for (taskOn = 0; taskOn < mqueues[mqdes].blockedReceivers.numBlocked; taskOn++)
;;;490    	{
;;;491    
;;;492    		taskContext = os_active_TCB[mqueues[mqdes].blockedReceivers.blockedTasks[taskOn]];
;;;493    		taskContext->state = READY;
;;;494    	  	rt_put_prio(&os_rdy,taskContext);
;;;495    	}
;;;496    	  
;;;497    	mqueues[mqdes].blockedReceivers.numBlocked = 0;
;;;498    
;;;499    	myContext->ret_val = 0;
;;;500    	return 0;
;;;501    }
000628  b059              ADD      sp,sp,#0x164
00062a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1582|
00062e  9856              LDR      r0,[sp,#0x158]        ;421
000630  b908              CBNZ     r0,|L1.1590|
000632  2005              MOVS     r0,#5                 ;423
000634  e7f8              B        |L1.1576|
                  |L1.1590|
000636  f04f0500          MOV      r5,#0                 ;427
00063a  e030              B        |L1.1694|
                  |L1.1596|
00063c  f7fffffe          BL       rt_tsk_self
000640  eb041104          ADD      r1,r4,r4,LSL #4       ;429
000644  eb010181          ADD      r1,r1,r1,LSL #2       ;429
000648  4a9d              LDR      r2,|L1.2240|
00064a  eb020181          ADD      r1,r2,r1,LSL #2       ;429
00064e  3178              ADDS     r1,r1,#0x78           ;429
000650  eb050245          ADD      r2,r5,r5,LSL #1       ;429
000654  f8511022          LDR      r1,[r1,r2,LSL #2]     ;429
000658  4288              CMP      r0,r1                 ;429
00065a  d11c              BNE      |L1.1686|
00065c  eb041004          ADD      r0,r4,r4,LSL #4       ;429
000660  eb000080          ADD      r0,r0,r0,LSL #2       ;429
000664  4996              LDR      r1,|L1.2240|
000666  eb010080          ADD      r0,r1,r0,LSL #2       ;429
00066a  3078              ADDS     r0,r0,#0x78           ;429
00066c  eb050145          ADD      r1,r5,r5,LSL #1       ;429
000670  eb000081          ADD      r0,r0,r1,LSL #2       ;429
000674  7a00              LDRB     r0,[r0,#8]            ;429
000676  2801              CMP      r0,#1                 ;429
000678  d10d              BNE      |L1.1686|
00067a  eb041004          ADD      r0,r4,r4,LSL #4       ;431
00067e  eb000080          ADD      r0,r0,r0,LSL #2       ;431
000682  498f              LDR      r1,|L1.2240|
000684  eb010080          ADD      r0,r1,r0,LSL #2       ;431
000688  f1000078          ADD      r0,r0,#0x78           ;431
00068c  eb050145          ADD      r1,r5,r5,LSL #1       ;431
000690  eb000081          ADD      r0,r0,r1,LSL #2       ;431
000694  6846              LDR      r6,[r0,#4]            ;431
                  |L1.1686|
000696  f1050001          ADD      r0,r5,#1              ;427
00069a  b2c0              UXTB     r0,r0                 ;427
00069c  4605              MOV      r5,r0                 ;427
                  |L1.1694|
00069e  2d0a              CMP      r5,#0xa               ;427
0006a0  dbcc              BLT      |L1.1596|
0006a2  1c70              ADDS     r0,r6,#1              ;435
0006a4  d101              BNE      |L1.1706|
0006a6  20fc              MOVS     r0,#0xfc              ;437
0006a8  e7be              B        |L1.1576|
                  |L1.1706|
0006aa  f0160f01          TST      r6,#1                 ;441
0006ae  d001              BEQ      |L1.1716|
0006b0  20fc              MOVS     r0,#0xfc              ;443
0006b2  e7b9              B        |L1.1576|
                  |L1.1716|
0006b4  eb041004          ADD      r0,r4,r4,LSL #4       ;448
0006b8  eb000080          ADD      r0,r0,r0,LSL #2       ;448
0006bc  4980              LDR      r1,|L1.2240|
0006be  eb010080          ADD      r0,r1,r0,LSL #2       ;448
0006c2  f8d00148          LDR      r0,[r0,#0x148]        ;448
0006c6  280a              CMP      r0,#0xa               ;448
0006c8  db41              BLT      |L1.1870|
0006ca  f0160f20          TST      r6,#0x20              ;450
0006ce  d001              BEQ      |L1.1748|
0006d0  20fe              MOVS     r0,#0xfe              ;452
0006d2  e7a9              B        |L1.1576|
                  |L1.1748|
0006d4  f7fffffe          BL       rt_tsk_self
0006d8  f1a00001          SUB      r0,r0,#1              ;456
0006dc  4979              LDR      r1,|L1.2244|
0006de  f851b020          LDR      r11,[r1,r0,LSL #2]    ;456
0006e2  f04f00ff          MOV      r0,#0xff              ;457
0006e6  f88b0020          STRB     r0,[r11,#0x20]        ;457
0006ea  f7fffffe          BL       rt_tsk_self
0006ee  4681              MOV      r9,r0                 ;459
0006f0  eb041004          ADD      r0,r4,r4,LSL #4       ;462
0006f4  eb000080          ADD      r0,r0,r0,LSL #2       ;462
0006f8  4971              LDR      r1,|L1.2240|
0006fa  eb010080          ADD      r0,r1,r0,LSL #2       ;462
0006fe  f10000f0          ADD      r0,r0,#0xf0           ;462
000702  eb041104          ADD      r1,r4,r4,LSL #4       ;462
000706  eb010181          ADD      r1,r1,r1,LSL #2       ;462
00070a  4a6d              LDR      r2,|L1.2240|
00070c  eb020181          ADD      r1,r2,r1,LSL #2       ;462
000710  f8d11118          LDR      r1,[r1,#0x118]        ;462
000714  f8409021          STR      r9,[r0,r1,LSL #2]     ;462
000718  eb041004          ADD      r0,r4,r4,LSL #4       ;465
00071c  eb000080          ADD      r0,r0,r0,LSL #2       ;465
000720  4611              MOV      r1,r2                 ;465
000722  eb010080          ADD      r0,r1,r0,LSL #2       ;465
000726  f8d00118          LDR      r0,[r0,#0x118]        ;465
00072a  f1000001          ADD      r0,r0,#1              ;465
00072e  eb041104          ADD      r1,r4,r4,LSL #4       ;465
000732  eb010181          ADD      r1,r1,r1,LSL #2       ;465
000736  eb020181          ADD      r1,r2,r1,LSL #2       ;465
00073a  f8c10118          STR      r0,[r1,#0x118]        ;465
00073e  f04f0100          MOV      r1,#0                 ;469
000742  f64f70ff          MOV      r0,#0xffff            ;469
000746  f7fffffe          BL       rt_block
00074a  20ff              MOVS     r0,#0xff              ;472
00074c  e76c              B        |L1.1576|
                  |L1.1870|
00074e  9858              LDR      r0,[sp,#0x160]        ;479
000750  9052              STR      r0,[sp,#0x148]        ;479
000752  f8cd8150          STR      r8,[sp,#0x150]        ;480
000756  2100              MOVS     r1,#0                 ;481
000758  4640              MOV      r0,r8                 ;481
00075a  f7fffffe          BL       rt_mem_alloc
00075e  9053              STR      r0,[sp,#0x14c]        ;481
000760  9953              LDR      r1,[sp,#0x14c]        ;482
000762  4608              MOV      r0,r1                 ;482
000764  4642              MOV      r2,r8                 ;482
000766  9956              LDR      r1,[sp,#0x158]        ;482
000768  f7fffffe          BL       __aeabi_memcpy
00076c  eb041104          ADD      r1,r4,r4,LSL #4       ;483
000770  eb010181          ADD      r1,r1,r1,LSL #2       ;483
000774  4a52              LDR      r2,|L1.2240|
000776  eb020181          ADD      r1,r2,r1,LSL #2       ;483
00077a  4608              MOV      r0,r1                 ;483
00077c  a952              ADD      r1,sp,#0x148          ;483
00077e  c90e              LDM      r1,{r1-r3}            ;483
000780  f7fffffe          BL       insert
000784  eb041004          ADD      r0,r4,r4,LSL #4       ;484
000788  eb000080          ADD      r0,r0,r0,LSL #2       ;484
00078c  494c              LDR      r1,|L1.2240|
00078e  eb010080          ADD      r0,r1,r0,LSL #2       ;484
000792  f8d00148          LDR      r0,[r0,#0x148]        ;484
000796  f1000001          ADD      r0,r0,#1              ;484
00079a  eb041104          ADD      r1,r4,r4,LSL #4       ;484
00079e  eb010181          ADD      r1,r1,r1,LSL #2       ;484
0007a2  4a47              LDR      r2,|L1.2240|
0007a4  eb020181          ADD      r1,r2,r1,LSL #2       ;484
0007a8  f8c10148          STR      r0,[r1,#0x148]        ;484
0007ac  eb041004          ADD      r0,r4,r4,LSL #4       ;485
0007b0  eb000080          ADD      r0,r0,r0,LSL #2       ;485
0007b4  eb020080          ADD      r0,r2,r0,LSL #2       ;485
0007b8  f1000010          ADD      r0,r0,#0x10           ;485
0007bc  4601              MOV      r1,r0                 ;485
0007be  f44f72a2          MOV      r2,#0x144             ;485
0007c2  4668              MOV      r0,sp                 ;485
0007c4  f7fffffe          BL       __aeabi_memcpy4
0007c8  eb041004          ADD      r0,r4,r4,LSL #4       ;485
0007cc  eb000080          ADD      r0,r0,r0,LSL #2       ;485
0007d0  493b              LDR      r1,|L1.2240|
0007d2  eb010080          ADD      r0,r1,r0,LSL #2       ;485
0007d6  c80f              LDM      r0,{r0-r3}            ;485
0007d8  f7fffffe          BL       print
0007dc  f04f0700          MOV      r7,#0                 ;489
0007e0  e019              B        |L1.2070|
                  |L1.2018|
0007e2  eb041004          ADD      r0,r4,r4,LSL #4       ;492
0007e6  eb000080          ADD      r0,r0,r0,LSL #2       ;492
0007ea  4935              LDR      r1,|L1.2240|
0007ec  eb010080          ADD      r0,r1,r0,LSL #2       ;492
0007f0  f500708e          ADD      r0,r0,#0x11c          ;492
0007f4  f8500027          LDR      r0,[r0,r7,LSL #2]     ;492
0007f8  4932              LDR      r1,|L1.2244|
0007fa  f851a020          LDR      r10,[r1,r0,LSL #2]    ;492
0007fe  f04f0001          MOV      r0,#1                 ;493
000802  f88a0001          STRB     r0,[r10,#1]           ;493
000806  4651              MOV      r1,r10                ;494
000808  482f              LDR      r0,|L1.2248|
00080a  f7fffffe          BL       rt_put_prio
00080e  f1070001          ADD      r0,r7,#1              ;489
000812  b2c0              UXTB     r0,r0                 ;489
000814  4607              MOV      r7,r0                 ;489
                  |L1.2070|
000816  eb041004          ADD      r0,r4,r4,LSL #4       ;489
00081a  eb000080          ADD      r0,r0,r0,LSL #2       ;489
00081e  4928              LDR      r1,|L1.2240|
000820  eb010080          ADD      r0,r1,r0,LSL #2       ;489
000824  f8d00144          LDR      r0,[r0,#0x144]        ;489
000828  42b8              CMP      r0,r7                 ;489
00082a  dcda              BGT      |L1.2018|
00082c  f04f0100          MOV      r1,#0                 ;497
000830  eb041004          ADD      r0,r4,r4,LSL #4       ;497
000834  eb000080          ADD      r0,r0,r0,LSL #2       ;497
000838  4a21              LDR      r2,|L1.2240|
00083a  eb020080          ADD      r0,r2,r0,LSL #2       ;497
00083e  f8c01144          STR      r1,[r0,#0x144]        ;497
000842  4608              MOV      r0,r1                 ;499
000844  f88b0020          STRB     r0,[r11,#0x20]        ;499
000848  bf00              NOP                            ;500
00084a  e6ed              B        |L1.1576|
;;;502    
                          ENDP

                  rt_mq_receive PROC
;;;503    int rt_mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio)
00084c  e92d4fff          PUSH     {r0-r11,lr}
;;;504    {
000850  b085              SUB      sp,sp,#0x14
000852  4604              MOV      r4,r0
000854  468b              MOV      r11,r1
;;;505    	message readMessage;
;;;506    	U8 processon;
;;;507    	OS_TID ID;
;;;508    	U8 taskOn;
;;;509    	P_TCB taskContext;
;;;510    	P_TCB myContext;
;;;511    	int oflag = -1;
000856  f04f30ff          MOV      r0,#0xffffffff
00085a  4682              MOV      r10,r0
;;;512    	int tmp;
;;;513    
;;;514    
;;;515    	
;;;516    
;;;517    	//check if passed a valid queue descriptor
;;;518    
;;;519    	if(mqdes > MAXQUEUES - 1)
00085c  2c09              CMP      r4,#9
00085e  dd03              BLE      |L1.2152|
;;;520    	{
;;;521    		return EBADF;
000860  20fc              MOVS     r0,#0xfc
                  |L1.2146|
;;;522    	}
;;;523    
;;;524    
;;;525    	//load flags for current process
;;;526    	for (processon = 0; processon < MAXPROCESSESPERQUEUE; processon++)
;;;527    	{
;;;528    		tmp = rt_tsk_self();
;;;529    		if ((mqueues[mqdes].processInfos[processon].taskId == rt_tsk_self()) &&  mqueues[mqdes].processInfos[processon].inuse == 1)
;;;530    		{
;;;531    			oflag = mqueues[mqdes].processInfos[processon].oflag; 
;;;532    		}	
;;;533    	}
;;;534      
;;;535      if (oflag == -1)
;;;536      {
;;;537        return EBADF;
;;;538      }
;;;539    
;;;540    	if (oflag & O_WRONLY == 1)
;;;541    	{
;;;542    		return EBADF;
;;;543    	}
;;;544    
;;;545    	
;;;546      //check if there is a message to be read
;;;547      if(mqueues[mqdes].nummessages <= 0)
;;;548      {
;;;549       	if ( (oflag & O_NONBLOCK) != 0)	 //if non block flag is set just return an error
;;;550    		{
;;;551    
;;;552    			return EAGAIN;
;;;553    		}
;;;554    		else //otherwise block and signal we have done so
;;;555    		{
;;;556    
;;;557    			myContext = os_active_TCB[rt_tsk_self() - 1];
;;;558    			myContext->ret_val = BLOCK;
;;;559    
;;;560    			ID = rt_tsk_self();
;;;561    
;;;562    			//add process to blocked list for this particular queue
;;;563    			mqueues[mqdes].blockedReceivers.blockedTasks[mqueues[mqdes].blockedReceivers.numBlocked ] = ID;
;;;564    
;;;565    			//increment the number of processes blocked for this particular queue
;;;566    			++mqueues[mqdes].blockedReceivers.numBlocked;
;;;567      			rt_block(0xffff,INACTIVE);
;;;568    
;;;569    		
;;;570    			return BLOCK; 
;;;571    		}
;;;572    
;;;573      }
;;;574      
;;;575    	//now read the message
;;;576    
;;;577    	readMessage = removemax(&mqueues[mqdes]);
;;;578    
;;;579    	//make sure we have read a valid message
;;;580    
;;;581    	if (readMessage.msg_ptr == 0 || readMessage.msg_size < 0)
;;;582    	{
;;;583    		myContext->ret_val = EINVAL;
;;;584    		return EINVAL;
;;;585    	}
;;;586    
;;;587     
;;;588     // printf("   real message: %s msgsize: %d", readMessage.msg_ptr,readMessage.msg_size);
;;;589      memcpy((void *)msg_ptr,(void *)readMessage.msg_ptr,readMessage.msg_size);
;;;590    	*msg_prio = readMessage.priority;
;;;591    
;;;592      rt_mem_free((void*)readMessage.msg_ptr);
;;;593    
;;;594    	//now that we have read a message unblock any process waiting to send a message to this queue
;;;595    
;;;596    	for (taskOn = 0; taskOn < mqueues[mqdes].blockedSenders.numBlocked; taskOn++)
;;;597    	{
;;;598    		taskContext = os_active_TCB[mqueues[mqdes].blockedSenders.blockedTasks[taskOn]-1];
;;;599    		taskContext->state = READY;
;;;600    	  	rt_put_prio(&os_rdy,taskContext);
;;;601    	}
;;;602    	  
;;;603    	mqueues[mqdes].blockedSenders.numBlocked = 0;
;;;604    
;;;605    	myContext->ret_val = readMessage.msg_size;
;;;606    	return readMessage.msg_size;
;;;607    
;;;608    
;;;609    }
000862  b009              ADD      sp,sp,#0x24
000864  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2152|
000868  f04f0500          MOV      r5,#0                 ;526
00086c  e03d              B        |L1.2282|
                  |L1.2158|
00086e  f7fffffe          BL       rt_tsk_self
000872  9001              STR      r0,[sp,#4]            ;528
000874  f7fffffe          BL       rt_tsk_self
000878  eb041104          ADD      r1,r4,r4,LSL #4       ;529
00087c  eb010181          ADD      r1,r1,r1,LSL #2       ;529
000880  4a0f              LDR      r2,|L1.2240|
000882  eb020181          ADD      r1,r2,r1,LSL #2       ;529
000886  3178              ADDS     r1,r1,#0x78           ;529
000888  eb050245          ADD      r2,r5,r5,LSL #1       ;529
00088c  f8511022          LDR      r1,[r1,r2,LSL #2]     ;529
000890  4288              CMP      r0,r1                 ;529
000892  d126              BNE      |L1.2274|
000894  eb041004          ADD      r0,r4,r4,LSL #4       ;529
000898  eb000080          ADD      r0,r0,r0,LSL #2       ;529
00089c  4908              LDR      r1,|L1.2240|
00089e  eb010080          ADD      r0,r1,r0,LSL #2       ;529
0008a2  3078              ADDS     r0,r0,#0x78           ;529
0008a4  eb050145          ADD      r1,r5,r5,LSL #1       ;529
0008a8  eb000081          ADD      r0,r0,r1,LSL #2       ;529
0008ac  7a00              LDRB     r0,[r0,#8]            ;529
0008ae  2801              CMP      r0,#1                 ;529
0008b0  d117              BNE      |L1.2274|
0008b2  eb041004          ADD      r0,r4,r4,LSL #4       ;531
0008b6  eb000080          ADD      r0,r0,r0,LSL #2       ;531
0008ba  e007              B        |L1.2252|
                  |L1.2236|
                          DCD      numqueues
                  |L1.2240|
                          DCD      mqueues
                  |L1.2244|
                          DCD      os_active_TCB
                  |L1.2248|
                          DCD      os_rdy
                  |L1.2252|
0008cc  4960              LDR      r1,|L1.2640|
0008ce  eb010080          ADD      r0,r1,r0,LSL #2       ;531
0008d2  f1000078          ADD      r0,r0,#0x78           ;531
0008d6  eb050145          ADD      r1,r5,r5,LSL #1       ;531
0008da  eb000081          ADD      r0,r0,r1,LSL #2       ;531
0008de  f8d0a004          LDR      r10,[r0,#4]           ;531
                  |L1.2274|
0008e2  f1050001          ADD      r0,r5,#1              ;526
0008e6  b2c0              UXTB     r0,r0                 ;526
0008e8  4605              MOV      r5,r0                 ;526
                  |L1.2282|
0008ea  2d0a              CMP      r5,#0xa               ;526
0008ec  dbbf              BLT      |L1.2158|
0008ee  f11a0001          ADDS     r0,r10,#1             ;535
0008f2  d101              BNE      |L1.2296|
0008f4  20fc              MOVS     r0,#0xfc              ;537
0008f6  e7b4              B        |L1.2146|
                  |L1.2296|
0008f8  2000              MOVS     r0,#0                 ;540
0008fa  b108              CBZ      r0,|L1.2304|
0008fc  20fc              MOVS     r0,#0xfc              ;542
0008fe  e7b0              B        |L1.2146|
                  |L1.2304|
000900  eb041004          ADD      r0,r4,r4,LSL #4       ;547
000904  eb000080          ADD      r0,r0,r0,LSL #2       ;547
000908  4951              LDR      r1,|L1.2640|
00090a  eb010080          ADD      r0,r1,r0,LSL #2       ;547
00090e  f8d00148          LDR      r0,[r0,#0x148]        ;547
000912  2800              CMP      r0,#0                 ;547
000914  dc41              BGT      |L1.2458|
000916  f01a0f20          TST      r10,#0x20             ;549
00091a  d001              BEQ      |L1.2336|
00091c  20fe              MOVS     r0,#0xfe              ;552
00091e  e7a0              B        |L1.2146|
                  |L1.2336|
000920  f7fffffe          BL       rt_tsk_self
000924  f1a00001          SUB      r0,r0,#1              ;557
000928  494a              LDR      r1,|L1.2644|
00092a  f8517020          LDR      r7,[r1,r0,LSL #2]     ;557
00092e  f04f00ff          MOV      r0,#0xff              ;558
000932  f8870020          STRB     r0,[r7,#0x20]         ;558
000936  f7fffffe          BL       rt_tsk_self
00093a  4680              MOV      r8,r0                 ;560
00093c  eb041004          ADD      r0,r4,r4,LSL #4       ;563
000940  eb000080          ADD      r0,r0,r0,LSL #2       ;563
000944  4942              LDR      r1,|L1.2640|
000946  eb010080          ADD      r0,r1,r0,LSL #2       ;563
00094a  f500708e          ADD      r0,r0,#0x11c          ;563
00094e  eb041104          ADD      r1,r4,r4,LSL #4       ;563
000952  eb010181          ADD      r1,r1,r1,LSL #2       ;563
000956  4a3e              LDR      r2,|L1.2640|
000958  eb020181          ADD      r1,r2,r1,LSL #2       ;563
00095c  f8d11144          LDR      r1,[r1,#0x144]        ;563
000960  f8408021          STR      r8,[r0,r1,LSL #2]     ;563
000964  eb041004          ADD      r0,r4,r4,LSL #4       ;566
000968  eb000080          ADD      r0,r0,r0,LSL #2       ;566
00096c  4611              MOV      r1,r2                 ;566
00096e  eb010080          ADD      r0,r1,r0,LSL #2       ;566
000972  f8d00144          LDR      r0,[r0,#0x144]        ;566
000976  f1000001          ADD      r0,r0,#1              ;566
00097a  eb041104          ADD      r1,r4,r4,LSL #4       ;566
00097e  eb010181          ADD      r1,r1,r1,LSL #2       ;566
000982  eb020181          ADD      r1,r2,r1,LSL #2       ;566
000986  f8c10144          STR      r0,[r1,#0x144]        ;566
00098a  f04f0100          MOV      r1,#0                 ;567
00098e  f64f70ff          MOV      r0,#0xffff            ;567
000992  f7fffffe          BL       rt_block
000996  20ff              MOVS     r0,#0xff              ;570
000998  e763              B        |L1.2146|
                  |L1.2458|
00099a  eb041004          ADD      r0,r4,r4,LSL #4       ;577
00099e  eb000080          ADD      r0,r0,r0,LSL #2       ;577
0009a2  4a2b              LDR      r2,|L1.2640|
0009a4  eb020080          ADD      r0,r2,r0,LSL #2       ;577
0009a8  4601              MOV      r1,r0                 ;577
0009aa  a802              ADD      r0,sp,#8              ;577
0009ac  f7fffffe          BL       removemax
0009b0  9803              LDR      r0,[sp,#0xc]          ;581
0009b2  b100              CBZ      r0,|L1.2486|
0009b4  e004              B        |L1.2496|
                  |L1.2486|
0009b6  f04f0005          MOV      r0,#5                 ;583
0009ba  f8870020          STRB     r0,[r7,#0x20]         ;583
0009be  e750              B        |L1.2146|
                  |L1.2496|
0009c0  9804              LDR      r0,[sp,#0x10]         ;589
0009c2  4602              MOV      r2,r0                 ;589
0009c4  9803              LDR      r0,[sp,#0xc]          ;589
0009c6  4601              MOV      r1,r0                 ;589
0009c8  4658              MOV      r0,r11                ;589
0009ca  f7fffffe          BL       __aeabi_memcpy
0009ce  9902              LDR      r1,[sp,#8]            ;590
0009d0  9808              LDR      r0,[sp,#0x20]         ;590
0009d2  6001              STR      r1,[r0,#0]            ;590
0009d4  9903              LDR      r1,[sp,#0xc]          ;592
0009d6  4608              MOV      r0,r1                 ;592
0009d8  f7fffffe          BL       rt_mem_free
0009dc  f04f0600          MOV      r6,#0                 ;596
0009e0  e01b              B        |L1.2586|
                  |L1.2530|
0009e2  eb041004          ADD      r0,r4,r4,LSL #4       ;598
0009e6  eb000080          ADD      r0,r0,r0,LSL #2       ;598
0009ea  4919              LDR      r1,|L1.2640|
0009ec  eb010080          ADD      r0,r1,r0,LSL #2       ;598
0009f0  f10000f0          ADD      r0,r0,#0xf0           ;598
0009f4  f8500026          LDR      r0,[r0,r6,LSL #2]     ;598
0009f8  f1a00001          SUB      r0,r0,#1              ;598
0009fc  4915              LDR      r1,|L1.2644|
0009fe  f8519020          LDR      r9,[r1,r0,LSL #2]     ;598
000a02  f04f0001          MOV      r0,#1                 ;599
000a06  f8890001          STRB     r0,[r9,#1]            ;599
000a0a  4649              MOV      r1,r9                 ;600
000a0c  4812              LDR      r0,|L1.2648|
000a0e  f7fffffe          BL       rt_put_prio
000a12  f1060001          ADD      r0,r6,#1              ;596
000a16  b2c0              UXTB     r0,r0                 ;596
000a18  4606              MOV      r6,r0                 ;596
                  |L1.2586|
000a1a  eb041004          ADD      r0,r4,r4,LSL #4       ;596
000a1e  eb000080          ADD      r0,r0,r0,LSL #2       ;596
000a22  490b              LDR      r1,|L1.2640|
000a24  eb010080          ADD      r0,r1,r0,LSL #2       ;596
000a28  f8d00118          LDR      r0,[r0,#0x118]        ;596
000a2c  42b0              CMP      r0,r6                 ;596
000a2e  dcd8              BGT      |L1.2530|
000a30  f04f0100          MOV      r1,#0                 ;603
000a34  eb041004          ADD      r0,r4,r4,LSL #4       ;603
000a38  eb000080          ADD      r0,r0,r0,LSL #2       ;603
000a3c  4a04              LDR      r2,|L1.2640|
000a3e  eb020080          ADD      r0,r2,r0,LSL #2       ;603
000a42  f8c01118          STR      r1,[r0,#0x118]        ;603
000a46  9804              LDR      r0,[sp,#0x10]         ;605
000a48  f8870020          STRB     r0,[r7,#0x20]         ;605
000a4c  9804              LDR      r0,[sp,#0x10]         ;606
000a4e  e708              B        |L1.2146|
;;;610    
                          ENDP

                  |L1.2640|
                          DCD      mqueues
                  |L1.2644|
                          DCD      os_active_TCB
                  |L1.2648|
                          DCD      os_rdy

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mqueues
                          %        3400

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  2020206d          DCB      0x20,0x20,0x20,0x6d
000004  65737361          DCB      0x65,0x73,0x73,0x61
000008  67653a20          DCB      0x67,0x65,0x3a,0x20
00000c  27257327          DCB      0x27,0x25,0x73,0x27
000010  207c206d          DCB      0x20,0x7c,0x20,0x6d
000014  65737361          DCB      0x65,0x73,0x73,0x61
000018  67652073          DCB      0x67,0x65,0x20,0x73
00001c  697a653a          DCB      0x69,0x7a,0x65,0x3a
000020  20256420          DCB      0x20,0x25,0x64,0x20
000024  7c207072          DCB      0x7c,0x20,0x70,0x72
000028  696f7269          DCB      0x69,0x6f,0x72,0x69
00002c  74793a20          DCB      0x74,0x79,0x3a,0x20
000030  2564207c          DCB      0x25,0x64,0x20,0x7c
000034  20617272          DCB      0x20,0x61,0x72,0x72
000038  6179706f          DCB      0x61,0x79,0x70,0x6f
00003c  733a2025          DCB      0x73,0x3a,0x20,0x25
000040  640a00            DCB      0x64,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  numqueues
                          DCD      0x00000000
