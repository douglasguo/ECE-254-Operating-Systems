; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -ort_task.o --asm_dir=.\ --list_dir=.\ --depend=rt_task.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=rt_task.crf rtx_src\rt_Task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rt_get_TID PROC
;;;35     
;;;36     static OS_TID rt_get_TID (void) {
000000  f04f0001          MOV      r0,#1
;;;37       U32 tid;
;;;38     
;;;39       for (tid = 1; tid <= os_maxtaskrun; tid++) {
000004  4601              MOV      r1,r0
000006  e009              B        |L1.28|
                  |L1.8|
;;;40         if (os_active_TCB[tid-1] == NULL) {
000008  1e48              SUBS     r0,r1,#1
00000a  4afc              LDR      r2,|L1.1020|
00000c  f8520020          LDR      r0,[r2,r0,LSL #2]
000010  b908              CBNZ     r0,|L1.22|
;;;41           return ((OS_TID)tid);
000012  4608              MOV      r0,r1
                  |L1.20|
;;;42         }
;;;43       }
;;;44       return (0);
;;;45     }
000014  4770              BX       lr
                  |L1.22|
000016  f1010001          ADD      r0,r1,#1              ;39
00001a  4601              MOV      r1,r0                 ;39
                  |L1.28|
00001c  48f8              LDR      r0,|L1.1024|
00001e  8800              LDRH     r0,[r0,#0]            ;39  ; os_maxtaskrun
000020  4281              CMP      r1,r0                 ;39
000022  d9f1              BLS      |L1.8|
000024  2000              MOVS     r0,#0                 ;44
000026  e7f5              B        |L1.20|
;;;46     
                          ENDP

                  rt_init_context PROC
;;;49     
;;;50     static void rt_init_context (P_TCB p_TCB, U8 priority, FUNCP task_body) {
000028  b570              PUSH     {r4-r6,lr}
00002a  4604              MOV      r4,r0
00002c  460e              MOV      r6,r1
00002e  4615              MOV      r5,r2
;;;51       /* Initialize general part of the Task Control Block. */
;;;52       p_TCB->cb_type = TCB;
000030  f04f0000          MOV      r0,#0
000034  7020              STRB     r0,[r4,#0]
;;;53       p_TCB->state   = READY;
000036  f04f0001          MOV      r0,#1
00003a  7060              STRB     r0,[r4,#1]
;;;54       p_TCB->prio    = priority;
00003c  70a6              STRB     r6,[r4,#2]
;;;55       p_TCB->p_lnk   = NULL;
00003e  f04f0000          MOV      r0,#0
000042  6060              STR      r0,[r4,#4]
;;;56       p_TCB->p_rlnk  = NULL;
000044  60a0              STR      r0,[r4,#8]
;;;57       p_TCB->p_dlnk  = NULL;
000046  60e0              STR      r0,[r4,#0xc]
;;;58       p_TCB->p_blnk  = NULL;
000048  6120              STR      r0,[r4,#0x10]
;;;59       p_TCB->delta_time    = 0;
00004a  82a0              STRH     r0,[r4,#0x14]
;;;60       p_TCB->interval_time = 0;
00004c  82e0              STRH     r0,[r4,#0x16]
;;;61       p_TCB->events  = 0;
00004e  8320              STRH     r0,[r4,#0x18]
;;;62       p_TCB->waits   = 0;
000050  8360              STRH     r0,[r4,#0x1a]
;;;63       p_TCB->ret_val = OS_R_OK;
000052  f8840020          STRB     r0,[r4,#0x20]
;;;64       p_TCB->ret_upd = 0;
000056  f8840021          STRB     r0,[r4,#0x21]
;;;65     
;;;66       if (p_TCB->priv_stack == 0) {
00005a  8c60              LDRH     r0,[r4,#0x22]
00005c  b918              CBNZ     r0,|L1.102|
;;;67         /* Allocate the memory space for the stack. */
;;;68         p_TCB->stack = rt_alloc_box (mp_stk);
00005e  48e9              LDR      r0,|L1.1028|
000060  f7fffffe          BL       rt_alloc_box
000064  62a0              STR      r0,[r4,#0x28]
                  |L1.102|
;;;69       }
;;;70       rt_init_stack (p_TCB, task_body);
000066  4629              MOV      r1,r5
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       rt_init_stack
;;;71     }
00006e  bd70              POP      {r4-r6,pc}
;;;72     
                          ENDP

                  rt_switch_req PROC
;;;75     
;;;76     void rt_switch_req (P_TCB p_new) {
000070  49e5              LDR      r1,|L1.1032|
;;;77       /* Switch to next task (identified by "p_new"). */
;;;78       os_tsk.new   = p_new;
000072  6048              STR      r0,[r1,#4]  ; os_tsk
;;;79       p_new->state = RUNNING;
000074  f04f0102          MOV      r1,#2
000078  7041              STRB     r1,[r0,#1]
;;;80       DBG_TASK_SWITCH(p_new->task_id);
;;;81     }
00007a  4770              BX       lr
;;;82     
                          ENDP

                  rt_dispatch PROC
;;;85     
;;;86     void rt_dispatch (P_TCB next_TCB) {
00007c  b510              PUSH     {r4,lr}
00007e  4604              MOV      r4,r0
;;;87       /* Dispatch next task if any identified or dispatch highest ready task    */
;;;88       /* "next_TCB" identifies a task to run or has value NULL (=no next task)  */
;;;89       if (next_TCB == NULL) {
000080  b93c              CBNZ     r4,|L1.146|
;;;90         /* Running task was blocked: continue with highest ready task */
;;;91         next_TCB = rt_get_first (&os_rdy);
000082  48e2              LDR      r0,|L1.1036|
000084  f7fffffe          BL       rt_get_first
000088  4604              MOV      r4,r0
;;;92         rt_switch_req (next_TCB);
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       rt_switch_req
000090  e01a              B        |L1.200|
                  |L1.146|
;;;93       }
;;;94       else {
;;;95         /* Check which task continues */
;;;96         if (next_TCB->prio > os_tsk.run->prio) {
000092  78a0              LDRB     r0,[r4,#2]
000094  49dc              LDR      r1,|L1.1032|
000096  6809              LDR      r1,[r1,#0]  ; os_tsk
000098  7889              LDRB     r1,[r1,#2]
00009a  4288              CMP      r0,r1
00009c  dd0d              BLE      |L1.186|
;;;97           /* preempt running task */
;;;98           rt_put_rdy_first (os_tsk.run);
00009e  49da              LDR      r1,|L1.1032|
0000a0  6809              LDR      r1,[r1,#0]  ; os_tsk
0000a2  4608              MOV      r0,r1
0000a4  f7fffffe          BL       rt_put_rdy_first
;;;99           os_tsk.run->state = READY;
0000a8  f04f0001          MOV      r0,#1
0000ac  49d6              LDR      r1,|L1.1032|
0000ae  6809              LDR      r1,[r1,#0]  ; os_tsk
0000b0  7048              STRB     r0,[r1,#1]
;;;100          rt_switch_req (next_TCB);
0000b2  4620              MOV      r0,r4
0000b4  f7fffffe          BL       rt_switch_req
0000b8  e006              B        |L1.200|
                  |L1.186|
;;;101        }
;;;102        else {
;;;103          /* put next task into ready list, no task switch takes place */
;;;104          next_TCB->state = READY;
0000ba  f04f0001          MOV      r0,#1
0000be  7060              STRB     r0,[r4,#1]
;;;105          rt_put_prio (&os_rdy, next_TCB);
0000c0  4621              MOV      r1,r4
0000c2  48d2              LDR      r0,|L1.1036|
0000c4  f7fffffe          BL       rt_put_prio
                  |L1.200|
;;;106        }
;;;107      }
;;;108    }
0000c8  bd10              POP      {r4,pc}
;;;109    
                          ENDP

                  rt_block PROC
;;;112    
;;;113    void rt_block (U16 timeout, U8 block_state) {
0000ca  b570              PUSH     {r4-r6,lr}
0000cc  4604              MOV      r4,r0
0000ce  460d              MOV      r5,r1
;;;114      /* Block running task and choose next ready task.                         */
;;;115      /* "timeout" sets a time-out value or is 0xffff (=no time-out).           */
;;;116      /* "block_state" defines the appropriate task state */
;;;117      P_TCB next_TCB;
;;;118    
;;;119      if (timeout) {
0000d0  b19c              CBZ      r4,|L1.250|
;;;120        if (timeout < 0xffff) {
0000d2  f64f70ff          MOV      r0,#0xffff
0000d6  4284              CMP      r4,r0
0000d8  da05              BGE      |L1.230|
;;;121          rt_put_dly (os_tsk.run, timeout);
0000da  49cb              LDR      r1,|L1.1032|
0000dc  6809              LDR      r1,[r1,#0]  ; os_tsk
0000de  4608              MOV      r0,r1
0000e0  4621              MOV      r1,r4
0000e2  f7fffffe          BL       rt_put_dly
                  |L1.230|
;;;122        }
;;;123        os_tsk.run->state = block_state;
0000e6  48c8              LDR      r0,|L1.1032|
0000e8  6800              LDR      r0,[r0,#0]  ; os_tsk
0000ea  7045              STRB     r5,[r0,#1]
;;;124        next_TCB = rt_get_first (&os_rdy);
0000ec  48c7              LDR      r0,|L1.1036|
0000ee  f7fffffe          BL       rt_get_first
0000f2  4606              MOV      r6,r0
;;;125        rt_switch_req (next_TCB);
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       rt_switch_req
                  |L1.250|
;;;126      }
;;;127    }
0000fa  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP

                  rt_tsk_pass PROC
;;;131    
;;;132    void rt_tsk_pass (void) {
0000fc  b510              PUSH     {r4,lr}
;;;133      /* Allow tasks of same priority level to run cooperatively.*/
;;;134      P_TCB p_new;
;;;135    
;;;136      p_new = rt_get_same_rdy_prio();
0000fe  f7fffffe          BL       rt_get_same_rdy_prio
000102  4604              MOV      r4,r0
;;;137      if (p_new != NULL) {
000104  b16c              CBZ      r4,|L1.290|
;;;138        rt_put_prio ((P_XCB)&os_rdy, os_tsk.run);
000106  48c0              LDR      r0,|L1.1032|
000108  6800              LDR      r0,[r0,#0]  ; os_tsk
00010a  4601              MOV      r1,r0
00010c  48bf              LDR      r0,|L1.1036|
00010e  f7fffffe          BL       rt_put_prio
;;;139        os_tsk.run->state = READY;
000112  f04f0001          MOV      r0,#1
000116  49bc              LDR      r1,|L1.1032|
000118  6809              LDR      r1,[r1,#0]  ; os_tsk
00011a  7048              STRB     r0,[r1,#1]
;;;140        rt_switch_req (p_new);
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       rt_switch_req
                  |L1.290|
;;;141      }
;;;142    }
000122  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  rt_tsk_self PROC
;;;146    
;;;147    OS_TID rt_tsk_self (void) {
000124  48b8              LDR      r0,|L1.1032|
;;;148      /* Return own task identifier value. */
;;;149      if (os_tsk.run == NULL) {
000126  6800              LDR      r0,[r0,#0]  ; os_tsk
000128  b908              CBNZ     r0,|L1.302|
;;;150        return (0);
00012a  2000              MOVS     r0,#0
                  |L1.300|
;;;151      }
;;;152      return (os_tsk.run->task_id);
;;;153    }
00012c  4770              BX       lr
                  |L1.302|
00012e  48b6              LDR      r0,|L1.1032|
000130  6800              LDR      r0,[r0,#0]            ;152  ; os_tsk
000132  78c0              LDRB     r0,[r0,#3]            ;152
000134  e7fa              B        |L1.300|
;;;154    
                          ENDP

                  rt_tsk_prio PROC
;;;157    
;;;158    OS_RESULT rt_tsk_prio (OS_TID task_id, U8 new_prio) {
000136  b570              PUSH     {r4-r6,lr}
000138  4604              MOV      r4,r0
00013a  460e              MOV      r6,r1
;;;159      /* Change execution priority of a task to "new_prio". */
;;;160      P_TCB p_task;
;;;161    
;;;162      if (task_id == 0) {
00013c  b9ec              CBNZ     r4,|L1.378|
;;;163        /* Change execution priority of calling task. */
;;;164        os_tsk.run->prio = new_prio;
00013e  48b2              LDR      r0,|L1.1032|
000140  6800              LDR      r0,[r0,#0]  ; os_tsk
000142  7086              STRB     r6,[r0,#2]
;;;165    run:if (rt_rdy_prio() > new_prio) {
000144  bf00              NOP      
                  |L1.326|
000146  48b1              LDR      r0,|L1.1036|
000148  6840              LDR      r0,[r0,#4]  ; os_rdy
00014a  7880              LDRB     r0,[r0,#2]
00014c  42b0              CMP      r0,r6
00014e  dd12              BLE      |L1.374|
;;;166          rt_put_prio (&os_rdy, os_tsk.run);
000150  48ad              LDR      r0,|L1.1032|
000152  6800              LDR      r0,[r0,#0]  ; os_tsk
000154  4601              MOV      r1,r0
000156  48ad              LDR      r0,|L1.1036|
000158  f7fffffe          BL       rt_put_prio
;;;167          os_tsk.run->state   = READY;
00015c  f04f0001          MOV      r0,#1
000160  49a9              LDR      r1,|L1.1032|
000162  6809              LDR      r1,[r1,#0]  ; os_tsk
000164  7048              STRB     r0,[r1,#1]
;;;168          os_tsk.run->ret_val = OS_R_OK;
000166  f04f0000          MOV      r0,#0
00016a  49a7              LDR      r1,|L1.1032|
00016c  6809              LDR      r1,[r1,#0]  ; os_tsk
00016e  f8810020          STRB     r0,[r1,#0x20]
;;;169          rt_dispatch (NULL);
000172  f7fffffe          BL       rt_dispatch
                  |L1.374|
;;;170        }
;;;171        return (OS_R_OK);
000176  2000              MOVS     r0,#0
                  |L1.376|
;;;172      }
;;;173    
;;;174      /* Find the task in the "os_active_TCB" array. */
;;;175      if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
;;;176        /* Task with "task_id" not found or not started. */
;;;177        return (OS_R_NOK);
;;;178      }
;;;179      p_task = os_active_TCB[task_id-1];
;;;180      p_task->prio = new_prio;
;;;181      if (p_task == os_tsk.run) {
;;;182        goto run;
;;;183      }
;;;184      rt_resort_prio (p_task);
;;;185      if (p_task->state == READY) {
;;;186        /* Task enqueued in a ready list. */
;;;187        p_task = rt_get_first (&os_rdy);
;;;188        os_tsk.run->ret_val = OS_R_OK;
;;;189        rt_dispatch (p_task);
;;;190      }
;;;191      return (OS_R_OK);
;;;192    }
000178  bd70              POP      {r4-r6,pc}
                  |L1.378|
00017a  48a1              LDR      r0,|L1.1024|
00017c  8800              LDRH     r0,[r0,#0]            ;175  ; os_maxtaskrun
00017e  4284              CMP      r4,r0                 ;175
000180  d804              BHI      |L1.396|
000182  1e60              SUBS     r0,r4,#1              ;175
000184  499d              LDR      r1,|L1.1020|
000186  f8510020          LDR      r0,[r1,r0,LSL #2]     ;175
00018a  b908              CBNZ     r0,|L1.400|
                  |L1.396|
00018c  20ff              MOVS     r0,#0xff              ;177
00018e  e7f3              B        |L1.376|
                  |L1.400|
000190  f1a40001          SUB      r0,r4,#1              ;179
000194  4999              LDR      r1,|L1.1020|
000196  f8515020          LDR      r5,[r1,r0,LSL #2]     ;179
00019a  70ae              STRB     r6,[r5,#2]            ;180
00019c  489a              LDR      r0,|L1.1032|
00019e  6800              LDR      r0,[r0,#0]            ;181  ; os_tsk
0001a0  42a8              CMP      r0,r5                 ;181
0001a2  d100              BNE      |L1.422|
0001a4  e7cf              B        |L1.326|
                  |L1.422|
0001a6  4628              MOV      r0,r5                 ;184
0001a8  f7fffffe          BL       rt_resort_prio
0001ac  7868              LDRB     r0,[r5,#1]            ;185
0001ae  2801              CMP      r0,#1                 ;185
0001b0  d10c              BNE      |L1.460|
0001b2  4896              LDR      r0,|L1.1036|
0001b4  f7fffffe          BL       rt_get_first
0001b8  4605              MOV      r5,r0                 ;187
0001ba  f04f0000          MOV      r0,#0                 ;188
0001be  4992              LDR      r1,|L1.1032|
0001c0  6809              LDR      r1,[r1,#0]            ;188  ; os_tsk
0001c2  f8810020          STRB     r0,[r1,#0x20]         ;188
0001c6  4628              MOV      r0,r5                 ;189
0001c8  f7fffffe          BL       rt_dispatch
                  |L1.460|
0001cc  2000              MOVS     r0,#0                 ;191
0001ce  e7d3              B        |L1.376|
;;;193    
                          ENDP

                  rt_tsk_create PROC
;;;196    
;;;197    OS_TID rt_tsk_create (FUNCP task, U32 prio_stksz, void *stk, void *argv) {
0001d0  e92d47f0          PUSH     {r4-r10,lr}
0001d4  4607              MOV      r7,r0
0001d6  460d              MOV      r5,r1
0001d8  4690              MOV      r8,r2
0001da  4699              MOV      r9,r3
;;;198      /* Start a new task declared with "task". */
;;;199      P_TCB task_context;
;;;200      U32 i;
;;;201    
;;;202      /* Priority 0 is reserved for idle task! */
;;;203      if ((prio_stksz & 0xFF) == 0) {
0001dc  f0150fff          TST      r5,#0xff
0001e0  d102              BNE      |L1.488|
;;;204        prio_stksz += 1;
0001e2  f1050001          ADD      r0,r5,#1
0001e6  4605              MOV      r5,r0
                  |L1.488|
;;;205      }
;;;206      task_context = rt_alloc_box (mp_tcb);
0001e8  4889              LDR      r0,|L1.1040|
0001ea  f7fffffe          BL       rt_alloc_box
0001ee  4604              MOV      r4,r0
;;;207      if (task_context == NULL) {
0001f0  b914              CBNZ     r4,|L1.504|
;;;208        return (0);
0001f2  2000              MOVS     r0,#0
                  |L1.500|
;;;209      }
;;;210      /* If "size != 0" use a private user provided stack. */
;;;211      task_context->stack      = stk;
;;;212      task_context->priv_stack = prio_stksz >> 8;
;;;213      /* Pass parameter 'argv' to 'rt_init_context' */
;;;214      task_context->msg = argv;
;;;215      /* For 'size == 0' system allocates the user stack from the memory pool. */
;;;216      rt_init_context (task_context, prio_stksz & 0xFF, task);
;;;217    
;;;218      /* Find a free entry in 'os_active_TCB' table. */
;;;219      i = rt_get_TID ();
;;;220      os_active_TCB[i-1] = task_context;
;;;221      task_context->task_id = i;
;;;222      DBG_TASK_NOTIFY(task_context, __TRUE);
;;;223      rt_dispatch (task_context);
;;;224      os_tsk.run->ret_val = i;
;;;225      return ((OS_TID)i);
;;;226    }
0001f4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.504|
0001f8  f8c48028          STR      r8,[r4,#0x28]         ;211
0001fc  f3c5200f          UBFX     r0,r5,#8,#16          ;212
000200  8460              STRH     r0,[r4,#0x22]         ;212
000202  f8c4901c          STR      r9,[r4,#0x1c]         ;214
000206  b2e8              UXTB     r0,r5                 ;216
000208  4601              MOV      r1,r0                 ;216
00020a  463a              MOV      r2,r7                 ;216
00020c  4620              MOV      r0,r4                 ;216
00020e  f7fffffe          BL       rt_init_context
000212  f7fffffe          BL       rt_get_TID
000216  4606              MOV      r6,r0                 ;219
000218  f1a60001          SUB      r0,r6,#1              ;220
00021c  4977              LDR      r1,|L1.1020|
00021e  f8414020          STR      r4,[r1,r0,LSL #2]     ;220
000222  70e6              STRB     r6,[r4,#3]            ;221
000224  4620              MOV      r0,r4                 ;223
000226  f7fffffe          BL       rt_dispatch
00022a  4977              LDR      r1,|L1.1032|
00022c  6809              LDR      r1,[r1,#0]            ;224  ; os_tsk
00022e  f8816020          STRB     r6,[r1,#0x20]         ;224
000232  4630              MOV      r0,r6                 ;225
000234  e7de              B        |L1.500|
;;;227    
                          ENDP

                  rt_tsk_delete PROC
;;;230    
;;;231    OS_RESULT rt_tsk_delete (OS_TID task_id) {
000236  b570              PUSH     {r4-r6,lr}
000238  4604              MOV      r4,r0
;;;232      /* Terminate the task identified with "task_id". */
;;;233      P_TCB task_context;
;;;234    
;;;235      if (task_id == 0 || task_id == os_tsk.run->task_id) {
00023a  b124              CBZ      r4,|L1.582|
00023c  4872              LDR      r0,|L1.1032|
00023e  6800              LDR      r0,[r0,#0]  ; os_tsk
000240  78c0              LDRB     r0,[r0,#3]
000242  42a0              CMP      r0,r4
000244  d126              BNE      |L1.660|
                  |L1.582|
;;;236        /* Terminate itself. */
;;;237        os_tsk.run->state = INACTIVE;
000246  f04f0000          MOV      r0,#0
00024a  496f              LDR      r1,|L1.1032|
00024c  6809              LDR      r1,[r1,#0]  ; os_tsk
00024e  7048              STRB     r0,[r1,#1]
;;;238        os_active_TCB[os_tsk.run->task_id-1] = NULL;
000250  4601              MOV      r1,r0
000252  486d              LDR      r0,|L1.1032|
000254  6800              LDR      r0,[r0,#0]  ; os_tsk
000256  78c0              LDRB     r0,[r0,#3]
000258  f1a00001          SUB      r0,r0,#1
00025c  4a67              LDR      r2,|L1.1020|
00025e  f8421020          STR      r1,[r2,r0,LSL #2]
;;;239        rt_free_box (mp_stk, os_tsk.run->stack);
000262  4869              LDR      r0,|L1.1032|
000264  6800              LDR      r0,[r0,#0]  ; os_tsk
000266  6a80              LDR      r0,[r0,#0x28]
000268  4601              MOV      r1,r0
00026a  4866              LDR      r0,|L1.1028|
00026c  f7fffffe          BL       rt_free_box
;;;240        os_tsk.run->stack = NULL;
000270  f04f0000          MOV      r0,#0
000274  4964              LDR      r1,|L1.1032|
000276  6809              LDR      r1,[r1,#0]  ; os_tsk
000278  6288              STR      r0,[r1,#0x28]
;;;241        DBG_TASK_NOTIFY(os_tsk.run, __FALSE);
;;;242        rt_free_box (mp_tcb, os_tsk.run);
00027a  4863              LDR      r0,|L1.1032|
00027c  6800              LDR      r0,[r0,#0]  ; os_tsk
00027e  4601              MOV      r1,r0
000280  4863              LDR      r0,|L1.1040|
000282  f7fffffe          BL       rt_free_box
;;;243        os_tsk.run = NULL;
000286  f04f0000          MOV      r0,#0
00028a  495f              LDR      r1,|L1.1032|
00028c  6008              STR      r0,[r1,#0]  ; os_tsk
;;;244        rt_dispatch (NULL);
00028e  f7fffffe          BL       rt_dispatch
000292  e028              B        |L1.742|
                  |L1.660|
;;;245        /* The program should never come to this point. */
;;;246      }
;;;247      else {
;;;248        /* Find the task in the "os_active_TCB" array. */
;;;249        if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
000294  485a              LDR      r0,|L1.1024|
000296  8800              LDRH     r0,[r0,#0]  ; os_maxtaskrun
000298  4284              CMP      r4,r0
00029a  d804              BHI      |L1.678|
00029c  1e60              SUBS     r0,r4,#1
00029e  4957              LDR      r1,|L1.1020|
0002a0  f8510020          LDR      r0,[r1,r0,LSL #2]
0002a4  b908              CBNZ     r0,|L1.682|
                  |L1.678|
;;;250          /* Task with "task_id" not found or not started. */
;;;251          return (OS_R_NOK);
0002a6  20ff              MOVS     r0,#0xff
                  |L1.680|
;;;252        }
;;;253        task_context = os_active_TCB[task_id-1];
;;;254        rt_rmv_list (task_context);
;;;255        rt_rmv_dly (task_context);
;;;256        os_active_TCB[task_id-1] = NULL;
;;;257        rt_free_box (mp_stk, task_context->stack);
;;;258        task_context->stack = NULL;
;;;259        DBG_TASK_NOTIFY(task_context, __FALSE);
;;;260        rt_free_box (mp_tcb, task_context);
;;;261      }
;;;262      return (OS_R_OK);
;;;263    }
0002a8  bd70              POP      {r4-r6,pc}
                  |L1.682|
0002aa  f1a40001          SUB      r0,r4,#1              ;253
0002ae  4953              LDR      r1,|L1.1020|
0002b0  f8515020          LDR      r5,[r1,r0,LSL #2]     ;253
0002b4  4628              MOV      r0,r5                 ;254
0002b6  f7fffffe          BL       rt_rmv_list
0002ba  4628              MOV      r0,r5                 ;255
0002bc  f7fffffe          BL       rt_rmv_dly
0002c0  f04f0100          MOV      r1,#0                 ;256
0002c4  f1a40001          SUB      r0,r4,#1              ;256
0002c8  4a4c              LDR      r2,|L1.1020|
0002ca  f8421020          STR      r1,[r2,r0,LSL #2]     ;256
0002ce  6aa8              LDR      r0,[r5,#0x28]         ;257
0002d0  4601              MOV      r1,r0                 ;257
0002d2  484c              LDR      r0,|L1.1028|
0002d4  f7fffffe          BL       rt_free_box
0002d8  f04f0000          MOV      r0,#0                 ;258
0002dc  62a8              STR      r0,[r5,#0x28]         ;258
0002de  4629              MOV      r1,r5                 ;260
0002e0  484b              LDR      r0,|L1.1040|
0002e2  f7fffffe          BL       rt_free_box
                  |L1.742|
0002e6  2000              MOVS     r0,#0                 ;262
0002e8  e7de              B        |L1.680|
;;;264    
                          ENDP

                  rt_sys_init PROC
;;;267    
;;;268    void rt_sys_init (FUNCP first_task, U32 prio_stksz, void *stk) {
0002ea  e92d41f0          PUSH     {r4-r8,lr}
0002ee  4605              MOV      r5,r0
0002f0  460e              MOV      r6,r1
0002f2  4617              MOV      r7,r2
;;;269      /* Initialize system and start up task declared with "first_task". */
;;;270      U32 i;
;;;271    
;;;272      DBG_INIT();
;;;273    
;;;274      /* Initialize dynamic memory and task TCB pointers to NULL. */
;;;275      for (i = 0; i < os_maxtaskrun; i++) {
0002f4  f04f0000          MOV      r0,#0
0002f8  4604              MOV      r4,r0
0002fa  e007              B        |L1.780|
                  |L1.764|
;;;276        os_active_TCB[i] = NULL;
0002fc  f04f0000          MOV      r0,#0
000300  493e              LDR      r1,|L1.1020|
000302  f8410024          STR      r0,[r1,r4,LSL #2]
000306  f1040001          ADD      r0,r4,#1              ;275
00030a  4604              MOV      r4,r0                 ;275
                  |L1.780|
00030c  483c              LDR      r0,|L1.1024|
00030e  8800              LDRH     r0,[r0,#0]            ;275  ; os_maxtaskrun
000310  4284              CMP      r4,r0                 ;275
000312  d3f3              BCC      |L1.764|
;;;277      }
;;;278      rt_init_box (&mp_tcb, mp_tcb_size, sizeof(struct OS_TCB));
000314  2230              MOVS     r2,#0x30
000316  483f              LDR      r0,|L1.1044|
000318  8801              LDRH     r1,[r0,#0]  ; mp_tcb_size
00031a  483d              LDR      r0,|L1.1040|
00031c  f7fffffe          BL       _init_box
;;;279      rt_init_box (&mp_stk, mp_stk_size, BOX_ALIGN_8 | (U16)(os_stackinfo));
000320  483d              LDR      r0,|L1.1048|
000322  6800              LDR      r0,[r0,#0]  ; os_stackinfo
000324  b280              UXTH     r0,r0
000326  f0404000          ORR      r0,r0,#0x80000000
00032a  4602              MOV      r2,r0
00032c  483b              LDR      r0,|L1.1052|
00032e  6801              LDR      r1,[r0,#0]  ; mp_stk_size
000330  4834              LDR      r0,|L1.1028|
000332  f7fffffe          BL       _init_box
;;;280      rt_init_box ((U32 *)m_tmr, mp_tmr_size, sizeof(struct OS_TMR));
000336  2208              MOVS     r2,#8
000338  4839              LDR      r0,|L1.1056|
00033a  8801              LDRH     r1,[r0,#0]  ; mp_tmr_size
00033c  4839              LDR      r0,|L1.1060|
00033e  6800              LDR      r0,[r0,#0]  ; m_tmr
000340  f7fffffe          BL       _init_box
;;;281    
;;;282      /* Set up TCB of idle demon */
;;;283      os_idle_TCB.task_id    = 255;
000344  f04f00ff          MOV      r0,#0xff
000348  4937              LDR      r1,|L1.1064|
00034a  70c8              STRB     r0,[r1,#3]
;;;284      os_idle_TCB.priv_stack = 0;
00034c  f04f0000          MOV      r0,#0
000350  8448              STRH     r0,[r1,#0x22]
;;;285      rt_init_context (&os_idle_TCB, 0, os_idle_demon);
000352  4a36              LDR      r2,|L1.1068|
000354  4601              MOV      r1,r0
000356  4834              LDR      r0,|L1.1064|
000358  f7fffffe          BL       rt_init_context
;;;286    
;;;287      /* Set up ready list: initially empty */
;;;288      os_rdy.cb_type = HCB;
00035c  f04f0004          MOV      r0,#4
000360  492a              LDR      r1,|L1.1036|
000362  7008              STRB     r0,[r1,#0]
;;;289      os_rdy.p_lnk   = NULL;
000364  f04f0000          MOV      r0,#0
000368  6048              STR      r0,[r1,#4]  ; os_rdy
;;;290      /* Set up delay list: initially empty */
;;;291      os_dly.cb_type = HCB;
00036a  f04f0004          MOV      r0,#4
00036e  4930              LDR      r1,|L1.1072|
000370  7008              STRB     r0,[r1,#0]
;;;292      os_dly.p_dlnk  = NULL;
000372  f04f0000          MOV      r0,#0
000376  60c8              STR      r0,[r1,#0xc]  ; os_dly
;;;293      os_dly.p_blnk  = NULL;
000378  6108              STR      r0,[r1,#0x10]  ; os_dly
;;;294      os_dly.delta_time = 0;
00037a  8288              STRH     r0,[r1,#0x14]
;;;295    
;;;296      /* Fix SP and systemvariables to assume idle task is running  */
;;;297      /* Transform main program into idle task by assuming idle TCB */
;;;298      rt_set_PSP (os_idle_TCB.tsk_stack+32);
00037c  492a              LDR      r1,|L1.1064|
00037e  6a49              LDR      r1,[r1,#0x24]  ; os_idle_TCB
000380  f1010120          ADD      r1,r1,#0x20
000384  4608              MOV      r0,r1
000386  f7fffffe          BL       rt_set_PSP
;;;299      os_tsk.run = &os_idle_TCB;
00038a  4827              LDR      r0,|L1.1064|
00038c  491e              LDR      r1,|L1.1032|
00038e  6008              STR      r0,[r1,#0]  ; os_tsk
;;;300      os_tsk.run->state = RUNNING;
000390  f04f0002          MOV      r0,#2
000394  6809              LDR      r1,[r1,#0]  ; os_tsk
000396  7048              STRB     r0,[r1,#1]
;;;301    
;;;302      /* Initialize ps queue */
;;;303      os_psq->first = 0;
000398  f04f0000          MOV      r0,#0
00039c  4925              LDR      r1,|L1.1076|
00039e  7008              STRB     r0,[r1,#0]
;;;304      os_psq->last  = 0;
0003a0  7048              STRB     r0,[r1,#1]
;;;305      os_psq->size  = os_fifo_size;
0003a2  4825              LDR      r0,|L1.1080|
0003a4  7800              LDRB     r0,[r0,#0]  ; os_fifo_size
0003a6  70c8              STRB     r0,[r1,#3]
;;;306    
;;;307      /* Intitialize system clock timer */
;;;308      rt_tmr_init ();
0003a8  4824              LDR      r0,|L1.1084|
0003aa  6800              LDR      r0,[r0,#0]  ; os_trv
0003ac  f04f21e0          MOV      r1,#0xe000e000
0003b0  6148              STR      r0,[r1,#0x14]
0003b2  f04f0000          MOV      r0,#0
0003b6  6188              STR      r0,[r1,#0x18]
0003b8  f04f0007          MOV      r0,#7
0003bc  6108              STR      r0,[r1,#0x10]
0003be  4820              LDR      r0,|L1.1088|
0003c0  6800              LDR      r0,[r0,#0]
0003c2  4920              LDR      r1,|L1.1092|
0003c4  ea400001          ORR      r0,r0,r1
0003c8  f04f21e0          MOV      r1,#0xe000e000
0003cc  f8c10d20          STR      r0,[r1,#0xd20]
0003d0  481d              LDR      r0,|L1.1096|
0003d2  6800              LDR      r0,[r0,#0]
0003d4  f8d11d20          LDR      r1,[r1,#0xd20]
0003d8  f04f427c          MOV      r2,#0xfc000000
0003dc  ea020141          AND      r1,r2,r1,LSL #1
0003e0  ea400001          ORR      r0,r0,r1
0003e4  4918              LDR      r1,|L1.1096|
0003e6  6008              STR      r0,[r1,#0]
;;;309      rt_init_robin ();
0003e8  f7fffffe          BL       rt_init_robin
;;;310    
;;;311      /* Start up first user task before entering the endless loop */
;;;312      rt_tsk_create (first_task, prio_stksz, stk, NULL);
0003ec  2300              MOVS     r3,#0
0003ee  463a              MOV      r2,r7
0003f0  4631              MOV      r1,r6
0003f2  4628              MOV      r0,r5
0003f4  f7fffffe          BL       rt_tsk_create
;;;313    }
0003f8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1020|
                          DCD      os_active_TCB
                  |L1.1024|
                          DCD      os_maxtaskrun
                  |L1.1028|
                          DCD      mp_stk
                  |L1.1032|
                          DCD      os_tsk
                  |L1.1036|
                          DCD      os_rdy
                  |L1.1040|
                          DCD      mp_tcb
                  |L1.1044|
                          DCD      mp_tcb_size
                  |L1.1048|
                          DCD      os_stackinfo
                  |L1.1052|
                          DCD      mp_stk_size
                  |L1.1056|
                          DCD      mp_tmr_size
                  |L1.1060|
                          DCD      m_tmr
                  |L1.1064|
                          DCD      os_idle_TCB
                  |L1.1068|
                          DCD      os_idle_demon
                  |L1.1072|
                          DCD      os_dly
                  |L1.1076|
                          DCD      os_fifo
                  |L1.1080|
                          DCD      os_fifo_size
                  |L1.1084|
                          DCD      os_trv
                  |L1.1088|
                          DCD      0xe000ed20
                  |L1.1092|
                          DCD      0xffff0000
                  |L1.1096|
                          DCD      0xe000ed1c
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  os_idle_TCB
                          %        48

                          AREA ||.data||, DATA, ALIGN=2

                  os_tsk
                          %        8
