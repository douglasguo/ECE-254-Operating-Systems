; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -osystem_lpc17xx.o --asm_dir=.\ --list_dir=.\ --depend=system_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=system_lpc17xx.crf src\system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;401     */
;;;402    void SystemInit (void)
000000  f04f0020          MOV      r0,#0x20
;;;403    {
;;;404    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;405      LPC_SC->SCS       = SCS_Val;
000004  4977              LDR      r1,|L1.484|
000006  6008              STR      r0,[r1,#0]
;;;406      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;407        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
000008  bf00              NOP      
                  |L1.10|
00000a  4876              LDR      r0,|L1.484|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0100f40          TST      r0,#0x40
000012  d0fa              BEQ      |L1.10|
;;;408      }
;;;409    
;;;410      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000014  f04f0003          MOV      r0,#3
000018  4973              LDR      r1,|L1.488|
00001a  6008              STR      r0,[r1,#0]
;;;411    
;;;412      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
00001c  f04f0000          MOV      r0,#0
000020  4972              LDR      r1,|L1.492|
000022  f8c101a8          STR      r0,[r1,#0x1a8]
;;;413      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000026  4972              LDR      r1,|L1.496|
000028  6008              STR      r0,[r1,#0]
;;;414    
;;;415      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
00002a  f04f0001          MOV      r0,#1
00002e  4971              LDR      r1,|L1.500|
000030  6008              STR      r0,[r1,#0]
;;;416    
;;;417    #if (PLL0_SETUP)
;;;418      LPC_SC->PLL0CFG   = PLL0CFG_Val;
000032  4871              LDR      r0,|L1.504|
000034  4971              LDR      r1,|L1.508|
000036  6008              STR      r0,[r1,#0]
;;;419      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000038  f04f0001          MOV      r0,#1
00003c  f1a10104          SUB      r1,r1,#4
000040  6008              STR      r0,[r1,#0]
;;;420      LPC_SC->PLL0FEED  = 0xAA;
000042  f04f00aa          MOV      r0,#0xaa
000046  496e              LDR      r1,|L1.512|
000048  6008              STR      r0,[r1,#0]
;;;421      LPC_SC->PLL0FEED  = 0x55;
00004a  f04f0055          MOV      r0,#0x55
00004e  4967              LDR      r1,|L1.492|
000050  f8c1008c          STR      r0,[r1,#0x8c]
;;;422      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
000054  bf00              NOP      
                  |L1.86|
000056  4869              LDR      r0,|L1.508|
000058  1d00              ADDS     r0,r0,#4
00005a  6800              LDR      r0,[r0,#0]
00005c  f0106f80          TST      r0,#0x4000000
000060  d0f9              BEQ      |L1.86|
;;;423    
;;;424      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000062  f04f0003          MOV      r0,#3
000066  4967              LDR      r1,|L1.516|
000068  6008              STR      r0,[r1,#0]
;;;425      LPC_SC->PLL0FEED  = 0xAA;
00006a  f04f00aa          MOV      r0,#0xaa
00006e  495f              LDR      r1,|L1.492|
000070  f8c1008c          STR      r0,[r1,#0x8c]
;;;426      LPC_SC->PLL0FEED  = 0x55;
000074  f04f0055          MOV      r0,#0x55
000078  4961              LDR      r1,|L1.512|
00007a  6008              STR      r0,[r1,#0]
;;;427    #endif
;;;428    
;;;429    #if (PLL1_SETUP)
;;;430      LPC_SC->PLL1CFG   = PLL1CFG_Val;
;;;431      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
;;;432      LPC_SC->PLL1FEED  = 0xAA;
;;;433      LPC_SC->PLL1FEED  = 0x55;
;;;434      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
;;;435    
;;;436      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
;;;437      LPC_SC->PLL1FEED  = 0xAA;
;;;438      LPC_SC->PLL1FEED  = 0x55;
;;;439    #else
;;;440      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
00007c  f04f0000          MOV      r0,#0
000080  4961              LDR      r1,|L1.520|
000082  6008              STR      r0,[r1,#0]
;;;441    #endif
;;;442    
;;;443      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
000084  4861              LDR      r0,|L1.524|
000086  4962              LDR      r1,|L1.528|
000088  6008              STR      r0,[r1,#0]
;;;444    
;;;445      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
00008a  f04f0000          MOV      r0,#0
00008e  4957              LDR      r1,|L1.492|
000090  f8c101c8          STR      r0,[r1,#0x1c8]
;;;446    #endif
;;;447    
;;;448      /* Determine clock frequency according to clock register values             */
;;;449      if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
000094  485f              LDR      r0,|L1.532|
000096  6800              LDR      r0,[r0,#0]
000098  f3c06001          UBFX     r0,r0,#24,#2
00009c  2803              CMP      r0,#3
00009e  d168              BNE      |L1.370|
;;;450        switch (LPC_SC->CLKSRCSEL & 0x03) {
0000a0  4854              LDR      r0,|L1.500|
0000a2  6800              LDR      r0,[r0,#0]
0000a4  f0100003          ANDS     r0,r0,#3
0000a8  d006              BEQ      |L1.184|
0000aa  2801              CMP      r0,#1
0000ac  d023              BEQ      |L1.246|
0000ae  2802              CMP      r0,#2
0000b0  d03f              BEQ      |L1.306|
0000b2  2803              CMP      r0,#3
0000b4  d15c              BNE      |L1.368|
0000b6  e000              B        |L1.186|
                  |L1.184|
;;;451          case 0:                           /* Internal RC oscillator => PLL0     */
;;;452          case 3:                           /* Reserved, default to Internal RC   */
0000b8  bf00              NOP      
                  |L1.186|
;;;453            SystemFrequency = (IRC_OSC * 
0000ba  4856              LDR      r0,|L1.532|
0000bc  6800              LDR      r0,[r0,#0]
0000be  f3c0000e          UBFX     r0,r0,#0,#15
0000c2  f1000001          ADD      r0,r0,#1
0000c6  ea4f0040          LSL      r0,r0,#1
0000ca  4953              LDR      r1,|L1.536|
0000cc  fb00f001          MUL      r0,r0,r1
0000d0  4946              LDR      r1,|L1.492|
0000d2  f8d11088          LDR      r1,[r1,#0x88]
0000d6  f3c14107          UBFX     r1,r1,#16,#8
0000da  f1010101          ADD      r1,r1,#1
0000de  fbb0f1f1          UDIV     r1,r0,r1
0000e2  4841              LDR      r0,|L1.488|
0000e4  6800              LDR      r0,[r0,#0]
0000e6  b2c0              UXTB     r0,r0
0000e8  f1000001          ADD      r0,r0,#1
0000ec  fbb1f0f0          UDIV     r0,r1,r0
0000f0  494a              LDR      r1,|L1.540|
0000f2  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;454                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;455                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;456                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;457            break;
0000f4  e03c              B        |L1.368|
                  |L1.246|
;;;458          case 1:                           /* Main oscillator => PLL0            */
;;;459            SystemFrequency = (OSC_CLK * 
0000f6  4847              LDR      r0,|L1.532|
0000f8  6800              LDR      r0,[r0,#0]
0000fa  f3c0000e          UBFX     r0,r0,#0,#15
0000fe  f1000001          ADD      r0,r0,#1
000102  ea4f0040          LSL      r0,r0,#1
000106  4946              LDR      r1,|L1.544|
000108  fb00f001          MUL      r0,r0,r1
00010c  4937              LDR      r1,|L1.492|
00010e  f8d11088          LDR      r1,[r1,#0x88]
000112  f3c14107          UBFX     r1,r1,#16,#8
000116  f1010101          ADD      r1,r1,#1
00011a  fbb0f1f1          UDIV     r1,r0,r1
00011e  4832              LDR      r0,|L1.488|
000120  6800              LDR      r0,[r0,#0]
000122  b2c0              UXTB     r0,r0
000124  f1000001          ADD      r0,r0,#1
000128  fbb1f0f0          UDIV     r0,r1,r0
00012c  493b              LDR      r1,|L1.540|
00012e  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;460                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;461                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;462                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;463            break;
000130  e01e              B        |L1.368|
                  |L1.306|
;;;464          case 2:                           /* RTC oscillator => PLL0             */
;;;465            SystemFrequency = (RTC_CLK * 
000132  4838              LDR      r0,|L1.532|
000134  6800              LDR      r0,[r0,#0]
000136  f3c0000e          UBFX     r0,r0,#0,#15
00013a  f1000001          ADD      r0,r0,#1
00013e  ea4f0040          LSL      r0,r0,#1
000142  f44f41fa          MOV      r1,#0x7d00
000146  fb00f001          MUL      r0,r0,r1
00014a  4928              LDR      r1,|L1.492|
00014c  f8d11088          LDR      r1,[r1,#0x88]
000150  f3c14107          UBFX     r1,r1,#16,#8
000154  f1010101          ADD      r1,r1,#1
000158  fbb0f1f1          UDIV     r1,r0,r1
00015c  4822              LDR      r0,|L1.488|
00015e  6800              LDR      r0,[r0,#0]
000160  b2c0              UXTB     r0,r0
000162  f1000001          ADD      r0,r0,#1
000166  fbb1f0f0          UDIV     r0,r1,r0
00016a  492c              LDR      r1,|L1.540|
00016c  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;466                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;467                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;468                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;469            break;
00016e  bf00              NOP      
                  |L1.368|
000170  e02f              B        |L1.466|
                  |L1.370|
;;;470        }
;;;471      } else {
;;;472        switch (LPC_SC->CLKSRCSEL & 0x03) {
000172  4820              LDR      r0,|L1.500|
000174  6800              LDR      r0,[r0,#0]
000176  f0100003          ANDS     r0,r0,#3
00017a  d006              BEQ      |L1.394|
00017c  2801              CMP      r0,#1
00017e  d010              BEQ      |L1.418|
000180  2802              CMP      r0,#2
000182  d019              BEQ      |L1.440|
000184  2803              CMP      r0,#3
000186  d123              BNE      |L1.464|
000188  e000              B        |L1.396|
                  |L1.394|
;;;473          case 0:                           /* Internal RC oscillator => PLL0     */
;;;474          case 3:                           /* Reserved, default to Internal RC   */
00018a  bf00              NOP      
                  |L1.396|
;;;475            SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00018c  4816              LDR      r0,|L1.488|
00018e  6800              LDR      r0,[r0,#0]
000190  b2c0              UXTB     r0,r0
000192  f1000001          ADD      r0,r0,#1
000196  4920              LDR      r1,|L1.536|
000198  fbb1f0f0          UDIV     r0,r1,r0
00019c  491f              LDR      r1,|L1.540|
00019e  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;476            break;
0001a0  e016              B        |L1.464|
                  |L1.418|
;;;477          case 1:                           /* Main oscillator => PLL0            */
;;;478            SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0001a2  4811              LDR      r0,|L1.488|
0001a4  6800              LDR      r0,[r0,#0]
0001a6  b2c0              UXTB     r0,r0
0001a8  f1000001          ADD      r0,r0,#1
0001ac  491c              LDR      r1,|L1.544|
0001ae  fbb1f0f0          UDIV     r0,r1,r0
0001b2  491a              LDR      r1,|L1.540|
0001b4  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;479            break;
0001b6  e00b              B        |L1.464|
                  |L1.440|
;;;480          case 2:                           /* RTC oscillator => PLL0             */
;;;481            SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0001b8  480b              LDR      r0,|L1.488|
0001ba  6800              LDR      r0,[r0,#0]
0001bc  b2c0              UXTB     r0,r0
0001be  f1000001          ADD      r0,r0,#1
0001c2  f44f41fa          MOV      r1,#0x7d00
0001c6  fbb1f0f0          UDIV     r0,r1,r0
0001ca  4914              LDR      r1,|L1.540|
0001cc  6008              STR      r0,[r1,#0]  ; SystemFrequency
;;;482            break;
0001ce  bf00              NOP      
                  |L1.464|
0001d0  bf00              NOP                            ;476
                  |L1.466|
;;;483        }
;;;484      }
;;;485    
;;;486    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;487      LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
0001d2  4806              LDR      r0,|L1.492|
0001d4  6800              LDR      r0,[r0,#0]
0001d6  f4204070          BIC      r0,r0,#0xf000
0001da  f4404080          ORR      r0,r0,#0x4000
0001de  4903              LDR      r1,|L1.492|
0001e0  6008              STR      r0,[r1,#0]
;;;488    #endif
;;;489    }
0001e2  4770              BX       lr
                          ENDP

                  |L1.484|
                          DCD      0x400fc1a0
                  |L1.488|
                          DCD      0x400fc104
                  |L1.492|
                          DCD      0x400fc000
                  |L1.496|
                          DCD      0x400fc1ac
                  |L1.500|
                          DCD      0x400fc10c
                  |L1.504|
                          DCD      0x00050063
                  |L1.508|
                          DCD      0x400fc084
                  |L1.512|
                          DCD      0x400fc08c
                  |L1.516|
                          DCD      0x400fc080
                  |L1.520|
                          DCD      0x400fc108
                  |L1.524|
                          DCD      0x042887de
                  |L1.528|
                          DCD      0x400fc0c4
                  |L1.532|
                          DCD      0x400fc088
                  |L1.536|
                          DCD      0x003d0900
                  |L1.540|
                          DCD      SystemFrequency
                  |L1.544|
                          DCD      0x00b71b00

                          AREA ||.data||, DATA, ALIGN=2

                  SystemFrequency
                          DCD      0x003d0900

;*** Start embedded assembler ***

#line 1 "src\\system_LPC17xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_6b61f0cc____REV16|
#line 112 "C:\\Software\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_system_LPC17xx_c_6b61f0cc____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_6b61f0cc____REVSH|
#line 130
|__asm___16_system_LPC17xx_c_6b61f0cc____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
