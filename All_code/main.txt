; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -omain.o --asm_dir=.\ --list_dir=.\ --depend=main.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=main.crf src\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_u
                  Receiver PROC
;;;110    
;;;111    __task void Receiver(void)
000000  b09a              SUB      sp,sp,#0x68
;;;112    {
;;;113      char rmsg[100];
;;;114      size_t msglen;
;;;115      unsigned int priority;
;;;116      int count;
;;;117      int count2;
;;;118    
;;;119      printf("   Queue descripter 0x%x\n",mq_open("queue1",0));
000002  2100              MOVS     r1,#0
000004  a0b6              ADR      r0,|L1.736|
000006  f8dfc2e0          LDR      r12,|L1.744|
00000a  df00              SVC      #0x0
00000c  4607              MOV      r7,r0
00000e  4639              MOV      r1,r7
000010  a0b6              ADR      r0,|L1.748|
000012  f7fffffe          BL       __2printf
;;;120    
;;;121      for (count = 0 ; count < 10; count++)
000016  f04f0000          MOV      r0,#0
00001a  4605              MOV      r5,r0
00001c  e020              B        |L1.96|
                  |L1.30|
;;;122      {
;;;123    	  os_dly_wait(2);
00001e  2002              MOVS     r0,#2
000020  f8dfc2e4          LDR      r12,|L1.776|
000024  df00              SVC      #0x0
;;;124        
;;;125        msglen = mq_receive(0,rmsg,msglen,&priority);
000026  466b              MOV      r3,sp
000028  4632              MOV      r2,r6
00002a  a901              ADD      r1,sp,#4
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       mq_receive
000032  4606              MOV      r6,r0
;;;126    	  printf("   received message: %s  with priority: %d and size: %d\n\n",rmsg,priority,msglen);
000034  4633              MOV      r3,r6
000036  a901              ADD      r1,sp,#4
000038  a0b4              ADR      r0,|L1.780|
00003a  9a00              LDR      r2,[sp,#0]
00003c  f7fffffe          BL       __2printf
;;;127        
;;;128    	  for (count2 = 0; count2 < 100; count2++)
000040  f04f0000          MOV      r0,#0
000044  4604              MOV      r4,r0
000046  e006              B        |L1.86|
                  |L1.72|
;;;129      	{
;;;130      		rmsg[count2] = 0;
000048  f04f0000          MOV      r0,#0
00004c  a901              ADD      r1,sp,#4
00004e  5508              STRB     r0,[r1,r4]
000050  f1040001          ADD      r0,r4,#1              ;128
000054  4604              MOV      r4,r0                 ;128
                  |L1.86|
000056  2c64              CMP      r4,#0x64              ;128
000058  dbf6              BLT      |L1.72|
00005a  f1050001          ADD      r0,r5,#1              ;121
00005e  4605              MOV      r5,r0                 ;121
                  |L1.96|
000060  2d0a              CMP      r5,#0xa               ;121
000062  dbdc              BLT      |L1.30|
;;;131      	}
;;;132      }
;;;133    
;;;134      os_tsk_delete_self();
000064  2000              MOVS     r0,#0
000066  f8dfc2e0          LDR      r12,|L1.840|
00006a  df00              SVC      #0x0
;;;135    }
;;;136    
                          ENDP

                  Sender PROC
;;;88     
;;;89     __task void Sender(void)
00006c  b50e              PUSH     {r1-r3,lr}
;;;90     {
;;;91     	unsigned char smsg[10];
;;;92       int count;
;;;93     
;;;94       printf("   Queue descripter 0x%x\n",mq_open("queue1",0));
00006e  2100              MOVS     r1,#0
000070  a09b              ADR      r0,|L1.736|
000072  f8dfc274          LDR      r12,|L1.744|
000076  df00              SVC      #0x0
000078  4605              MOV      r5,r0
00007a  4629              MOV      r1,r5
00007c  a09b              ADR      r0,|L1.748|
00007e  f7fffffe          BL       __2printf
;;;95     
;;;96       for (count = 0; count < 10; count++)
000082  f04f0000          MOV      r0,#0
000086  4604              MOV      r4,r0
000088  e006              B        |L1.152|
                  |L1.138|
;;;97       {
;;;98         smsg[count] = 0;
00008a  f04f0000          MOV      r0,#0
00008e  f80d0004          STRB     r0,[sp,r4]
000092  f1040001          ADD      r0,r4,#1              ;96
000096  4604              MOV      r4,r0                 ;96
                  |L1.152|
000098  2c0a              CMP      r4,#0xa               ;96
00009a  dbf6              BLT      |L1.138|
;;;99       }
;;;100    	
;;;101      for (count = 0; count < 10; count++)
00009c  f04f0000          MOV      r0,#0
0000a0  4604              MOV      r4,r0
0000a2  e013              B        |L1.204|
                  |L1.164|
;;;102      {
;;;103        sprintf(&smsg[count],"%d",count);
0000a4  eb0d0104          ADD      r1,sp,r4
0000a8  4608              MOV      r0,r1
0000aa  4622              MOV      r2,r4
0000ac  a1a7              ADR      r1,|L1.844|
0000ae  f7fffffe          BL       __2sprintf
;;;104        mq_send(0,smsg,count+1,count+1);
0000b2  1c63              ADDS     r3,r4,#1
0000b4  1c62              ADDS     r2,r4,#1
0000b6  4669              MOV      r1,sp
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       mq_send
;;;105        os_dly_wait(1);
0000be  2001              MOVS     r0,#1
0000c0  f8dfc244          LDR      r12,|L1.776|
0000c4  df00              SVC      #0x0
0000c6  f1040001          ADD      r0,r4,#1              ;101
0000ca  4604              MOV      r4,r0                 ;101
                  |L1.204|
0000cc  2c0a              CMP      r4,#0xa               ;101
0000ce  dbe9              BLT      |L1.164|
;;;106      }
;;;107      
;;;108    	os_tsk_delete_self();
0000d0  2000              MOVS     r0,#0
0000d2  f8dfc274          LDR      r12,|L1.840|
0000d6  df00              SVC      #0x0
;;;109    }
;;;110    
                          ENDP

                  BasicTest PROC
;;;74      ******************************************************************************/
;;;75     __task void BasicTest(void)
0000d8  a09d              ADR      r0,|L1.848|
;;;76     {
;;;77     	printf("\n   ***BASIC TEST***\n");
0000da  f7fffffe          BL       __2printf
;;;78       printf("   - Sends and receives messages of various sizes\n");
0000de  a0a2              ADR      r0,|L1.872|
0000e0  f7fffffe          BL       __2printf
;;;79       printf("   - Does not block\n\n");
0000e4  a0ad              ADR      r0,|L1.924|
0000e6  f7fffffe          BL       __2printf
;;;80      
;;;81       printf("   Queue descripter 0x%x\n",mq_open("queue1",O_CREAT | O_EXCL));
0000ea  2118              MOVS     r1,#0x18
0000ec  a07c              ADR      r0,|L1.736|
0000ee  f8dfc1f8          LDR      r12,|L1.744|
0000f2  df00              SVC      #0x0
0000f4  4604              MOV      r4,r0
0000f6  4621              MOV      r1,r4
0000f8  a07c              ADR      r0,|L1.748|
0000fa  f7fffffe          BL       __2printf
;;;82       
;;;83       os_tsk_create(Sender,1);
0000fe  2300              MOVS     r3,#0
000100  461a              MOV      r2,r3
000102  2101              MOVS     r1,#1
000104  f2af009b          ADR      r0,Sender + 1
000108  f8dfc2a8          LDR      r12,|L1.948|
00010c  df00              SVC      #0x0
;;;84       os_tsk_create(Receiver,1);
00010e  2300              MOVS     r3,#0
000110  461a              MOV      r2,r3
000112  2101              MOVS     r1,#1
000114  f2af1017          ADR      r0,Receiver + 1
000118  f8dfc298          LDR      r12,|L1.948|
00011c  df00              SVC      #0x0
;;;85       
;;;86       os_tsk_delete_self();
00011e  2000              MOVS     r0,#0
000120  f8dfc224          LDR      r12,|L1.840|
000124  df00              SVC      #0x0
;;;87     }
;;;88     
                          ENDP

                  OpenCloseTest PROC
;;;139     ******************************************************************************/
;;;140    __task void OpenCloseTest(void)
000126  a0a4              ADR      r0,|L1.952|
;;;141    {
;;;142    	printf("\n   ***OPEN AND CLOSE TEST***\n");
000128  f7fffffe          BL       __2printf
;;;143      printf("   - Sends a message while the queue is open and while\n     the queue is closed, comparing return values\n");
00012c  48aa              LDR      r0,|L1.984|
00012e  f7fffffe          BL       __2printf
;;;144      printf("   - Does not block\n\n");
000132  a09a              ADR      r0,|L1.924|
000134  f7fffffe          BL       __2printf
;;;145      
;;;146    	printf("   Openning Queue...\n");
000138  a0a8              ADR      r0,|L1.988|
00013a  f7fffffe          BL       __2printf
;;;147    	printf("   Queue descripter 0x%x\n",mq_open("queue1",O_CREAT | O_EXCL));
00013e  2118              MOVS     r1,#0x18
000140  a067              ADR      r0,|L1.736|
000142  f8dfc1a4          LDR      r12,|L1.744|
000146  df00              SVC      #0x0
000148  4604              MOV      r4,r0
00014a  4621              MOV      r1,r4
00014c  a067              ADR      r0,|L1.748|
00014e  f7fffffe          BL       __2printf
;;;148    	printf("   Making sure queue is open by sending one message ... \n");
000152  a0a8              ADR      r0,|L1.1012|
000154  f7fffffe          BL       __2printf
;;;149    	printf("   return code from send while queue is open: %d\n",mq_send(0,"1",1,1));
000158  2301              MOVS     r3,#1
00015a  461a              MOV      r2,r3
00015c  a1b4              ADR      r1,|L1.1072|
00015e  2000              MOVS     r0,#0
000160  f7fffffe          BL       mq_send
000164  4604              MOV      r4,r0
000166  4621              MOV      r1,r4
000168  a0b2              ADR      r0,|L1.1076|
00016a  f7fffffe          BL       __2printf
;;;150    	printf("   return code from closing queue: %d \n", mq_close(0));
00016e  2000              MOVS     r0,#0
000170  f8dfc2f4          LDR      r12,|L1.1128|
000174  df00              SVC      #0x0
000176  4604              MOV      r4,r0
000178  4621              MOV      r1,r4
00017a  a0bc              ADR      r0,|L1.1132|
00017c  f7fffffe          BL       __2printf
;;;151    	printf("   return code from send while queue is closed: %d\n",mq_send(0,"1",1,1));
000180  2301              MOVS     r3,#1
000182  461a              MOV      r2,r3
000184  a1aa              ADR      r1,|L1.1072|
000186  2000              MOVS     r0,#0
000188  f7fffffe          BL       mq_send
00018c  4604              MOV      r4,r0
00018e  4621              MOV      r1,r4
000190  a0c0              ADR      r0,|L1.1172|
000192  f7fffffe          BL       __2printf
;;;152      
;;;153    	os_tsk_delete_self();
000196  2000              MOVS     r0,#0
000198  f8dfc1ac          LDR      r12,|L1.840|
00019c  df00              SVC      #0x0
;;;154    }
;;;155    
                          ENDP

                  NonBlockingTest PROC
;;;158     ******************************************************************************/
;;;159    __task void NonBlockingTest(void)
00019e  b09a              SUB      sp,sp,#0x68
;;;160    {
;;;161    	char rmsg[100];
;;;162    	size_t msglen;
;;;163    	unsigned int priority;
;;;164      
;;;165    	printf("\n   ***NON-BLOCKING TEST***\n");
0001a0  a0c9              ADR      r0,|L1.1224|
0001a2  f7fffffe          BL       __2printf
;;;166      printf("   - Tries to receive a message that does not exist\n");
0001a6  a0d0              ADR      r0,|L1.1256|
0001a8  f7fffffe          BL       __2printf
;;;167      printf("   - Does not block\n\n");
0001ac  a07b              ADR      r0,|L1.924|
0001ae  f7fffffe          BL       __2printf
;;;168    	
;;;169    	printf("   Queue descripter 0x%x\n",mq_open("queue1",O_CREAT | O_EXCL | O_NONBLOCK));
0001b2  2138              MOVS     r1,#0x38
0001b4  a04a              ADR      r0,|L1.736|
0001b6  f8dfc130          LDR      r12,|L1.744|
0001ba  df00              SVC      #0x0
0001bc  4605              MOV      r5,r0
0001be  4629              MOV      r1,r5
0001c0  a04a              ADR      r0,|L1.748|
0001c2  f7fffffe          BL       __2printf
;;;170    	printf("   Creating Receiving task which should not block \n");
0001c6  a0d6              ADR      r0,|L1.1312|
0001c8  f7fffffe          BL       __2printf
;;;171    
;;;172    	printf("   mq_receive returned : %d \n", mq_receive(0,rmsg,msglen,&priority)); 
0001cc  466b              MOV      r3,sp
0001ce  4622              MOV      r2,r4
0001d0  a901              ADD      r1,sp,#4
0001d2  2000              MOVS     r0,#0
0001d4  f7fffffe          BL       mq_receive
0001d8  4605              MOV      r5,r0
0001da  4629              MOV      r1,r5
0001dc  a0dd              ADR      r0,|L1.1364|
0001de  f7fffffe          BL       __2printf
;;;173    
;;;174    	os_tsk_delete_self();
0001e2  2000              MOVS     r0,#0
0001e4  f8dfc160          LDR      r12,|L1.840|
0001e8  df00              SVC      #0x0
;;;175    }
;;;176    
                          ENDP

                  Block PROC
;;;206    
;;;207    __task void Block(void)
0001ea  b09a              SUB      sp,sp,#0x68
;;;208    {
;;;209    	char rmsg[100];
;;;210      size_t msglen;
;;;211      unsigned int priority;
;;;212      
;;;213    	printf("   Queue descripter 0x%x\n",mq_open("queue1",O_CREAT | O_EXCL));
0001ec  2118              MOVS     r1,#0x18
0001ee  a03c              ADR      r0,|L1.736|
0001f0  f8dfc0f4          LDR      r12,|L1.744|
0001f4  df00              SVC      #0x0
0001f6  4605              MOV      r5,r0
0001f8  4629              MOV      r1,r5
0001fa  a03c              ADR      r0,|L1.748|
0001fc  f7fffffe          BL       __2printf
;;;214    	printf("   Creating Receiving task which should block as no messages\n");
000200  a0dc              ADR      r0,|L1.1396|
000202  f7fffffe          BL       __2printf
;;;215    	printf("   mq_receive returned : %d \n", mq_receive(0,rmsg,msglen,&priority));
000206  466b              MOV      r3,sp
000208  4622              MOV      r2,r4
00020a  a901              ADD      r1,sp,#4
00020c  2000              MOVS     r0,#0
00020e  f7fffffe          BL       mq_receive
000212  4605              MOV      r5,r0
000214  4629              MOV      r1,r5
000216  a0cf              ADR      r0,|L1.1364|
000218  f7fffffe          BL       __2printf
;;;216    	printf("   received message: %s  with priority: %d and size: %d\n\n",rmsg,priority,msglen);
00021c  4623              MOV      r3,r4
00021e  a901              ADD      r1,sp,#4
000220  a03a              ADR      r0,|L1.780|
000222  9a00              LDR      r2,[sp,#0]
000224  f7fffffe          BL       __2printf
;;;217      
;;;218      os_tsk_delete_self ();
000228  2000              MOVS     r0,#0
00022a  f8dfc11c          LDR      r12,|L1.840|
00022e  df00              SVC      #0x0
;;;219    }
;;;220    
                          ENDP

                  BlockingTest PROC
;;;179     ******************************************************************************/
;;;180    __task void BlockingTest(void)
000230  a0e0              ADR      r0,|L1.1460|
;;;181    {
;;;182    	printf("\n   ***BLOCKING TEST***\n");
000232  f7fffffe          BL       __2printf
;;;183      printf("   - Tries to receive a message that does not exist\n");
000236  a0ac              ADR      r0,|L1.1256|
000238  f7fffffe          BL       __2printf
;;;184      printf("   - Blocks until the message is available (never)\n\n");
00023c  a0e4              ADR      r0,|L1.1488|
00023e  f7fffffe          BL       __2printf
;;;185      
;;;186      os_tsk_create (Block,1);
000242  2300              MOVS     r3,#0
000244  461a              MOV      r2,r3
000246  2101              MOVS     r1,#1
000248  f2af0061          ADR      r0,Block + 1
00024c  f8dfc164          LDR      r12,|L1.948|
000250  df00              SVC      #0x0
;;;187      
;;;188    	os_tsk_delete_self();
000252  2000              MOVS     r0,#0
000254  f8dfc0f0          LDR      r12,|L1.840|
000258  df00              SVC      #0x0
;;;189    }
;;;190    
                          ENDP

                  Unblock PROC
;;;220    
;;;221    __task void Unblock(void)
00025a  2100              MOVS     r1,#0
;;;222    {
;;;223      printf("   Queue descripter 0x%x\n",mq_open("queue1",0));
00025c  a020              ADR      r0,|L1.736|
00025e  f8dfc088          LDR      r12,|L1.744|
000262  df00              SVC      #0x0
000264  4604              MOV      r4,r0
000266  4621              MOV      r1,r4
000268  a020              ADR      r0,|L1.748|
00026a  f7fffffe          BL       __2printf
;;;224      
;;;225      mq_send(0,"a",1,1);
00026e  2301              MOVS     r3,#1
000270  461a              MOV      r2,r3
000272  a1e5              ADR      r1,|L1.1544|
000274  2000              MOVS     r0,#0
000276  f7fffffe          BL       mq_send
;;;226      
;;;227      printf("   Sent message other task should unblock \n");
00027a  a0e4              ADR      r0,|L1.1548|
00027c  f7fffffe          BL       __2printf
;;;228    
;;;229    	os_tsk_delete_self();
000280  2000              MOVS     r0,#0
000282  f8dfc0c4          LDR      r12,|L1.840|
000286  df00              SVC      #0x0
;;;230    }
;;;231    
                          ENDP

                  BlockUnblockTest PROC
;;;193     ******************************************************************************/
;;;194    __task void BlockUnblockTest(void)
000288  a0eb              ADR      r0,|L1.1592|
;;;195    {
;;;196      printf("\n   ***BLOCK/UNBLOCK TEST***\n");
00028a  f7fffffe          BL       __2printf
;;;197      printf("   - Tries to receive a message that does not exist\n");
00028e  a096              ADR      r0,|L1.1256|
000290  f7fffffe          BL       __2printf
;;;198      printf("   - Blocks until the message is available (from another task)\n\n");
000294  4850              LDR      r0,|L1.984|
000296  306c              ADDS     r0,r0,#0x6c
000298  f7fffffe          BL       __2printf
;;;199      
;;;200    	os_tsk_create(Block,1);
00029c  2300              MOVS     r3,#0
00029e  461a              MOV      r2,r3
0002a0  2101              MOVS     r1,#1
0002a2  f2af00b9          ADR      r0,Block + 1
0002a6  f8dfc10c          LDR      r12,|L1.948|
0002aa  df00              SVC      #0x0
;;;201    	os_dly_wait(1);
0002ac  2001              MOVS     r0,#1
0002ae  f8dfc058          LDR      r12,|L1.776|
0002b2  df00              SVC      #0x0
;;;202    	os_tsk_create(Unblock,1);
0002b4  2300              MOVS     r3,#0
0002b6  461a              MOV      r2,r3
0002b8  2101              MOVS     r1,#1
0002ba  f2af0061          ADR      r0,Unblock + 1
0002be  f8dfc0f4          LDR      r12,|L1.948|
0002c2  df00              SVC      #0x0
;;;203    
;;;204    	os_tsk_delete_self();
0002c4  2000              MOVS     r0,#0
0002c6  f8dfc080          LDR      r12,|L1.840|
0002ca  df00              SVC      #0x0
;;;205    }
;;;206    
                          ENDP

                  SendBlockTest PROC
;;;234     ******************************************************************************/
;;;235    __task void SendBlockTest(void)
0002cc  a0e2              ADR      r0,|L1.1624|
;;;236    {
;;;237      int count;
;;;238      
;;;239      printf("\n   ***SEND BLOCK TEST***\n");
0002ce  f7fffffe          BL       __2printf
;;;240      printf("   - Sends messages until the queue is full\n");
0002d2  a0e8              ADR      r0,|L1.1652|
0002d4  f7fffffe          BL       __2printf
;;;241      printf("   - Sends an additional message to force the queue to block\n");
0002d8  a0f2              ADR      r0,|L1.1700|
0002da  f7fffffe          BL       __2printf
;;;242      printf("   - A message is received in another task, allowing the last message to send\n\n");
0002de  e201              B        |L1.1764|
                  |L1.736|
0002e0  71756575          DCB      "queue1",0
0002e4  653100  
0002e7  00                DCB      0
                  |L1.744|
                          DCD      rt_mq_open
                  |L1.748|
0002ec  20202051          DCB      "   Queue descripter 0x%x\n",0
0002f0  75657565
0002f4  20646573
0002f8  63726970
0002fc  74657220
000300  30782578
000304  0a00    
000306  00                DCB      0
000307  00                DCB      0
                  |L1.776|
                          DCD      rt_dly_wait
                  |L1.780|
00030c  20202072          DCB      "   received message: %s  with priority: %d and size: %d"
000310  65636569
000314  76656420
000318  6d657373
00031c  6167653a
000320  20257320
000324  20776974
000328  68207072
00032c  696f7269
000330  74793a20
000334  25642061
000338  6e642073
00033c  697a653a
000340  202564  
000343  0a0a00            DCB      "\n\n",0
000346  00                DCB      0
000347  00                DCB      0
                  |L1.840|
                          DCD      rt_tsk_delete
                  |L1.844|
00034c  256400            DCB      "%d",0
00034f  00                DCB      0
                  |L1.848|
000350  0a202020          DCB      "\n   ***BASIC TEST***\n",0
000354  2a2a2a42
000358  41534943
00035c  20544553
000360  542a2a2a
000364  0a00    
000366  00                DCB      0
000367  00                DCB      0
                  |L1.872|
000368  2020202d          DCB      "   - Sends and receives messages of various sizes\n",0
00036c  2053656e
000370  64732061
000374  6e642072
000378  65636569
00037c  76657320
000380  6d657373
000384  61676573
000388  206f6620
00038c  76617269
000390  6f757320
000394  73697a65
000398  730a00  
00039b  00                DCB      0
                  |L1.924|
00039c  2020202d          DCB      "   - Does not block\n\n",0
0003a0  20446f65
0003a4  73206e6f
0003a8  7420626c
0003ac  6f636b0a
0003b0  0a00    
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L1.948|
                          DCD      rt_tsk_create
                  |L1.952|
0003b8  0a202020          DCB      "\n   ***OPEN AND CLOSE TEST***\n",0
0003bc  2a2a2a4f
0003c0  50454e20
0003c4  414e4420
0003c8  434c4f53
0003cc  45205445
0003d0  53542a2a
0003d4  2a0a00  
0003d7  00                DCB      0
                  |L1.984|
                          DCD      ||.constdata||
                  |L1.988|
0003dc  2020204f          DCB      "   Openning Queue...\n",0
0003e0  70656e6e
0003e4  696e6720
0003e8  51756575
0003ec  652e2e2e
0003f0  0a00    
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L1.1012|
0003f4  2020204d          DCB      "   Making sure queue is open by sending one message ..."
0003f8  616b696e
0003fc  67207375
000400  72652071
000404  75657565
000408  20697320
00040c  6f70656e
000410  20627920
000414  73656e64
000418  696e6720
00041c  6f6e6520
000420  6d657373
000424  61676520
000428  2e2e2e  
00042b  200a00            DCB      " \n",0
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
000430  3100              DCB      "1",0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  20202072          DCB      "   return code from send while queue is open: %d\n",0
000438  65747572
00043c  6e20636f
000440  64652066
000444  726f6d20
000448  73656e64
00044c  20776869
000450  6c652071
000454  75657565
000458  20697320
00045c  6f70656e
000460  3a202564
000464  0a00    
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
                          DCD      rt_mq_close
                  |L1.1132|
00046c  20202072          DCB      "   return code from closing queue: %d \n",0
000470  65747572
000474  6e20636f
000478  64652066
00047c  726f6d20
000480  636c6f73
000484  696e6720
000488  71756575
00048c  653a2025
000490  64200a00
                  |L1.1172|
000494  20202072          DCB      "   return code from send while queue is closed: %d\n",0
000498  65747572
00049c  6e20636f
0004a0  64652066
0004a4  726f6d20
0004a8  73656e64
0004ac  20776869
0004b0  6c652071
0004b4  75657565
0004b8  20697320
0004bc  636c6f73
0004c0  65643a20
0004c4  25640a00
                  |L1.1224|
0004c8  0a202020          DCB      "\n   ***NON-BLOCKING TEST***\n",0
0004cc  2a2a2a4e
0004d0  4f4e2d42
0004d4  4c4f434b
0004d8  494e4720
0004dc  54455354
0004e0  2a2a2a0a
0004e4  00      
0004e5  00                DCB      0
0004e6  00                DCB      0
0004e7  00                DCB      0
                  |L1.1256|
0004e8  2020202d          DCB      "   - Tries to receive a message that does not exist\n",0
0004ec  20547269
0004f0  65732074
0004f4  6f207265
0004f8  63656976
0004fc  65206120
000500  6d657373
000504  61676520
000508  74686174
00050c  20646f65
000510  73206e6f
000514  74206578
000518  6973740a
00051c  00      
00051d  00                DCB      0
00051e  00                DCB      0
00051f  00                DCB      0
                  |L1.1312|
000520  20202043          DCB      "   Creating Receiving task which should not block \n",0
000524  72656174
000528  696e6720
00052c  52656365
000530  6976696e
000534  67207461
000538  736b2077
00053c  68696368
000540  2073686f
000544  756c6420
000548  6e6f7420
00054c  626c6f63
000550  6b200a00
                  |L1.1364|
000554  2020206d          DCB      "   mq_receive returned : %d \n",0
000558  715f7265
00055c  63656976
000560  65207265
000564  7475726e
000568  6564203a
00056c  20256420
000570  0a00    
000572  00                DCB      0
000573  00                DCB      0
                  |L1.1396|
000574  20202043          DCB      "   Creating Receiving task which should block as no mes"
000578  72656174
00057c  696e6720
000580  52656365
000584  6976696e
000588  67207461
00058c  736b2077
000590  68696368
000594  2073686f
000598  756c6420
00059c  626c6f63
0005a0  6b206173
0005a4  206e6f20
0005a8  6d6573  
0005ab  73616765          DCB      "sages\n",0
0005af  730a00  
0005b2  00                DCB      0
0005b3  00                DCB      0
                  |L1.1460|
0005b4  0a202020          DCB      "\n   ***BLOCKING TEST***\n",0
0005b8  2a2a2a42
0005bc  4c4f434b
0005c0  494e4720
0005c4  54455354
0005c8  2a2a2a0a
0005cc  00      
0005cd  00                DCB      0
0005ce  00                DCB      0
0005cf  00                DCB      0
                  |L1.1488|
0005d0  2020202d          DCB      "   - Blocks until the message is available (never)\n\n",0
0005d4  20426c6f
0005d8  636b7320
0005dc  756e7469
0005e0  6c207468
0005e4  65206d65
0005e8  73736167
0005ec  65206973
0005f0  20617661
0005f4  696c6162
0005f8  6c652028
0005fc  6e657665
000600  72290a0a
000604  00      
000605  00                DCB      0
000606  00                DCB      0
000607  00                DCB      0
                  |L1.1544|
000608  6100              DCB      "a",0
00060a  00                DCB      0
00060b  00                DCB      0
                  |L1.1548|
00060c  20202053          DCB      "   Sent message other task should unblock \n",0
000610  656e7420
000614  6d657373
000618  61676520
00061c  6f746865
000620  72207461
000624  736b2073
000628  686f756c
00062c  6420756e
000630  626c6f63
000634  6b200a00
                  |L1.1592|
000638  0a202020          DCB      "\n   ***BLOCK/UNBLOCK TEST***\n",0
00063c  2a2a2a42
000640  4c4f434b
000644  2f554e42
000648  4c4f434b
00064c  20544553
000650  542a2a2a
000654  0a00    
000656  00                DCB      0
000657  00                DCB      0
                  |L1.1624|
000658  0a202020          DCB      "\n   ***SEND BLOCK TEST***\n",0
00065c  2a2a2a53
000660  454e4420
000664  424c4f43
000668  4b205445
00066c  53542a2a
000670  2a0a00  
000673  00                DCB      0
                  |L1.1652|
000674  2020202d          DCB      "   - Sends messages until the queue is full\n",0
000678  2053656e
00067c  6473206d
000680  65737361
000684  67657320
000688  756e7469
00068c  6c207468
000690  65207175
000694  65756520
000698  69732066
00069c  756c6c0a
0006a0  00      
0006a1  00                DCB      0
0006a2  00                DCB      0
0006a3  00                DCB      0
                  |L1.1700|
0006a4  2020202d          DCB      "   - Sends an additional message to force the queue to "
0006a8  2053656e
0006ac  64732061
0006b0  6e206164
0006b4  64697469
0006b8  6f6e616c
0006bc  206d6573
0006c0  73616765
0006c4  20746f20
0006c8  666f7263
0006cc  65207468
0006d0  65207175
0006d4  65756520
0006d8  746f20  
0006db  626c6f63          DCB      "block\n",0
0006df  6b0a00  
0006e2  00                DCB      0
0006e3  00                DCB      0
                  |L1.1764|
0006e4  48e3              LDR      r0,|L1.2676|
0006e6  f7fffffe          BL       __2printf
;;;243      
;;;244    	printf("   Queue descripter 0x%x\n",mq_open("queue1",O_CREAT | O_EXCL));
0006ea  2118              MOVS     r1,#0x18
0006ec  f2af4010          ADR      r0,|L1.736|
0006f0  f8dfc384          LDR      r12,|L1.2680|
0006f4  df00              SVC      #0x0
0006f6  4605              MOV      r5,r0
0006f8  4629              MOV      r1,r5
0006fa  f2af4010          ADR      r0,|L1.748|
0006fe  f7fffffe          BL       __2printf
;;;245      printf("   Filling queue...\n");
000702  a0de              ADR      r0,|L1.2684|
000704  f7fffffe          BL       __2printf
;;;246      
;;;247      for (count = 0; count < 11; count++)
000708  f04f0000          MOV      r0,#0
00070c  4604              MOV      r4,r0
00070e  e008              B        |L1.1826|
                  |L1.1808|
;;;248      {
;;;249        mq_send(0,"ab",1,2);
000710  2302              MOVS     r3,#2
000712  2201              MOVS     r2,#1
000714  a1df              ADR      r1,|L1.2708|
000716  2000              MOVS     r0,#0
000718  f7fffffe          BL       mq_send
00071c  f1040001          ADD      r0,r4,#1              ;247
000720  4604              MOV      r4,r0                 ;247
                  |L1.1826|
000722  2c0b              CMP      r4,#0xb               ;247
000724  dbf4              BLT      |L1.1808|
;;;250      }
;;;251      
;;;252    
;;;253    
;;;254      printf("   Done Sending\n");
000726  a0dc              ADR      r0,|L1.2712|
000728  f7fffffe          BL       __2printf
;;;255      
;;;256      os_tsk_delete_self ();
00072c  2000              MOVS     r0,#0
00072e  f8dfc37c          LDR      r12,|L1.2732|
000732  df00              SVC      #0x0
;;;257    }
;;;258    
                          ENDP

                  MultiQueueTest PROC
;;;263     ******************************************************************************/
;;;264    __task void MultiQueueTest(void)
000734  b09a              SUB      sp,sp,#0x68
;;;265    {
;;;266    	char rmsg[100];
;;;267      size_t msglen;
;;;268      unsigned int priority;
;;;269      int qid1, qid2;
;;;270      
;;;271      printf("\n   ***MULTI-QUEUE TEST***\n");
000736  a0de              ADR      r0,|L1.2736|
000738  f7fffffe          BL       __2printf
;;;272      printf("   - Sends and receives messages using two different queues\n\n");
00073c  a0e3              ADR      r0,|L1.2764|
00073e  f7fffffe          BL       __2printf
;;;273      
;;;274      qid1 = mq_open("queue1",O_CREAT | O_EXCL);
000742  2118              MOVS     r1,#0x18
000744  f2af4068          ADR      r0,|L1.736|
000748  f8dfc32c          LDR      r12,|L1.2680|
00074c  df00              SVC      #0x0
00074e  4604              MOV      r4,r0
;;;275    	printf("   Queue descripter 0x%x\n",qid1);
000750  4621              MOV      r1,r4
000752  f2af4068          ADR      r0,|L1.748|
000756  f7fffffe          BL       __2printf
;;;276      
;;;277      qid2 = mq_open("queue2",O_CREAT | O_EXCL);
00075a  2118              MOVS     r1,#0x18
00075c  a0eb              ADR      r0,|L1.2828|
00075e  f8dfc318          LDR      r12,|L1.2680|
000762  df00              SVC      #0x0
000764  4605              MOV      r5,r0
;;;278    	printf("   Queue descripter 0x%x\n",qid2);
000766  4629              MOV      r1,r5
000768  f2af4080          ADR      r0,|L1.748|
00076c  f7fffffe          BL       __2printf
;;;279      
;;;280      printf("   Sending message to queue1\n");
000770  a0e8              ADR      r0,|L1.2836|
000772  f7fffffe          BL       __2printf
;;;281      mq_send(qid1,"a",1,1);
000776  2301              MOVS     r3,#1
000778  461a              MOV      r2,r3
00077a  f2af1174          ADR      r1,|L1.1544|
00077e  b220              SXTH     r0,r4
000780  f7fffffe          BL       mq_send
;;;282      
;;;283      printf("   Sending message to queue2\n");
000784  a0eb              ADR      r0,|L1.2868|
000786  f7fffffe          BL       __2printf
;;;284      mq_send(qid2,"b",1,1);
00078a  2301              MOVS     r3,#1
00078c  461a              MOV      r2,r3
00078e  a1f1              ADR      r1,|L1.2900|
000790  b228              SXTH     r0,r5
000792  f7fffffe          BL       mq_send
;;;285      
;;;286      printf("   Message received from queue2: %d \n", mq_receive(qid2,rmsg,msglen,&priority));
000796  466b              MOV      r3,sp
000798  4632              MOV      r2,r6
00079a  a901              ADD      r1,sp,#4
00079c  b228              SXTH     r0,r5
00079e  f7fffffe          BL       mq_receive
0007a2  4607              MOV      r7,r0
0007a4  4639              MOV      r1,r7
0007a6  a0ec              ADR      r0,|L1.2904|
0007a8  f7fffffe          BL       __2printf
;;;287      printf("   Message received from queue1: %d \n", mq_receive(qid1,rmsg,msglen,&priority));
0007ac  466b              MOV      r3,sp
0007ae  4632              MOV      r2,r6
0007b0  a901              ADD      r1,sp,#4
0007b2  b220              SXTH     r0,r4
0007b4  f7fffffe          BL       mq_receive
0007b8  4607              MOV      r7,r0
0007ba  4639              MOV      r1,r7
0007bc  a0f0              ADR      r0,|L1.2944|
0007be  f7fffffe          BL       __2printf
;;;288      
;;;289      printf("   Done");
0007c2  a0f9              ADR      r0,|L1.2984|
0007c4  f7fffffe          BL       __2printf
;;;290      
;;;291      os_tsk_delete_self ();
0007c8  2000              MOVS     r0,#0
0007ca  f8dfc2e0          LDR      r12,|L1.2732|
0007ce  df00              SVC      #0x0
;;;292    }
;;;293    
                          ENDP

                  finalize PROC
;;;442    
;;;443    void finalize (void)
0007d0  b510              PUSH     {r4,lr}
;;;444    {
;;;445      //char strMessage [32];
;;;446      
;;;447      os_mut_wait (mutex_timing, 0xffff);
0007d2  f64f71ff          MOV      r1,#0xffff
0007d6  48f6              LDR      r0,|L1.2992|
0007d8  f8dfc3d8          LDR      r12,|L1.2996|
0007dc  df00              SVC      #0x0
;;;448      
;;;449      //Only one process should display the timing summary
;;;450      if (!timingDisplayed)
0007de  48f6              LDR      r0,|L1.3000|
0007e0  6800              LDR      r0,[r0,#0]  ; timingDisplayed
0007e2  b9c8              CBNZ     r0,|L1.2072|
;;;451      {
;;;452        //Store end time
;;;453        endSec = second;
0007e4  48f5              LDR      r0,|L1.3004|
0007e6  6800              LDR      r0,[r0,#0]  ; second
0007e8  49f5              LDR      r1,|L1.3008|
0007ea  6008              STR      r0,[r1,#0]  ; endSec
;;;454        endDec = decimal;
0007ec  48f5              LDR      r0,|L1.3012|
0007ee  6800              LDR      r0,[r0,#0]  ; decimal
0007f0  49f5              LDR      r1,|L1.3016|
0007f2  6008              STR      r0,[r1,#0]  ; endDec
;;;455        
;;;456        //sprintf (strMessage, "Init: %u.%04u s", startSec, startDec);
;;;457        //Display ((unsigned char*) strMessage);
;;;458        
;;;459        printf ("Init: %u.%04u s", startSec, startDec);
0007f4  48f5              LDR      r0,|L1.3020|
0007f6  6802              LDR      r2,[r0,#0]  ; startDec
0007f8  48f5              LDR      r0,|L1.3024|
0007fa  6801              LDR      r1,[r0,#0]  ; startSec
0007fc  a0f5              ADR      r0,|L1.3028|
0007fe  f7fffffe          BL       __2printf
;;;460        
;;;461        //sprintf (strMessage, "Done: %u.%04u s", endSec, endDec);
;;;462        //Display ((unsigned char*) strMessage);
;;;463        
;;;464        printf ("Done: %u.%04u s", endSec, endDec);
000802  48f1              LDR      r0,|L1.3016|
000804  6802              LDR      r2,[r0,#0]  ; endDec
000806  48ee              LDR      r0,|L1.3008|
000808  6801              LDR      r1,[r0,#0]  ; endSec
00080a  a0f6              ADR      r0,|L1.3044|
00080c  f7fffffe          BL       __2printf
;;;465        
;;;466        timingDisplayed = 1;
000810  f04f0001          MOV      r0,#1
000814  49e8              LDR      r1,|L1.3000|
000816  6008              STR      r0,[r1,#0]  ; timingDisplayed
                  |L1.2072|
;;;467      }
;;;468      
;;;469      os_mut_release (mutex_timing);
000818  48e5              LDR      r0,|L1.2992|
00081a  f8dfc3d8          LDR      r12,|L1.3060|
00081e  df00              SVC      #0x0
;;;470    }
000820  bd10              POP      {r4,pc}
;;;471    
                          ENDP

                  Consumer PROC
;;;374    
;;;375    __task void Consumer(void)
000822  b50e              PUSH     {r1-r3,lr}
;;;376    {
;;;377      char Message[5];
;;;378      int cid = CID++;
000824  48f4              LDR      r0,|L1.3064|
000826  6800              LDR      r0,[r0,#0]  ; CID
000828  f1000001          ADD      r0,r0,#1
00082c  49f2              LDR      r1,|L1.3064|
00082e  6008              STR      r0,[r1,#0]  ; CID
;;;379      int root, received;
;;;380      int compare;
;;;381      size_t msglen;
;;;382      unsigned int priority;
;;;383      
;;;384      mq_open("Lab2Queue", 0);
000830  f04f0100          MOV      r1,#0
000834  a0f1              ADR      r0,|L1.3068|
000836  f8dfc240          LDR      r12,|L1.2680|
00083a  df00              SVC      #0x0
;;;385      
;;;386      for (EVER)
00083c  bf00              NOP      
                  |L1.2110|
;;;387      {
;;;388        //Wait for the mailbox to have free space
;;;389        os_sem_wait (semRead, 0xffff);
00083e  f64f71ff          MOV      r1,#0xffff
000842  48f1              LDR      r0,|L1.3080|
000844  f8dfc3c4          LDR      r12,|L1.3084|
000848  df00              SVC      #0x0
;;;390        
;;;391        //Wait for the ciritcal section to be available
;;;392        os_mut_wait (mutex_mailbox, 0xffff);
00084a  f64f71ff          MOV      r1,#0xffff
00084e  48f0              LDR      r0,|L1.3088|
000850  f8dfc360          LDR      r12,|L1.2996|
000854  df00              SVC      #0x0
;;;393        
;;;394      	mq_receive (QID,Message,msglen,&priority);
000856  466b              MOV      r3,sp
000858  465a              MOV      r2,r11
00085a  a901              ADD      r1,sp,#4
00085c  48ed              LDR      r0,|L1.3092|
00085e  6800              LDR      r0,[r0,#0]  ; QID
000860  b200              SXTH     r0,r0
000862  f7fffffe          BL       mq_receive
;;;395        
;;;396        //Consume the value
;;;397        received = strtol (Message,0,10);
000866  220a              MOVS     r2,#0xa
000868  2100              MOVS     r1,#0
00086a  a801              ADD      r0,sp,#4
00086c  f7fffffe          BL       strtol
000870  4680              MOV      r8,r0
;;;398        root = sqrt (received);
000872  4640              MOV      r0,r8
000874  f7fffffe          BL       __aeabi_i2d
000878  4606              MOV      r6,r0
00087a  f7fffffe          BL       sqrt
00087e  4604              MOV      r4,r0
000880  f7fffffe          BL       __aeabi_d2iz
000884  4681              MOV      r9,r0
;;;399        compare = root*root;
000886  fb09fa09          MUL      r10,r9,r9
;;;400        
;;;401        if (compare == received)
00088a  45c2              CMP      r10,r8
00088c  d103              BNE      |L1.2198|
;;;402        {
;;;403          printf ("   Received: %d\n", received);
00088e  4641              MOV      r1,r8
000890  a0e1              ADR      r0,|L1.3096|
000892  f7fffffe          BL       __2printf
                  |L1.2198|
;;;404        }
;;;405        
;;;406        consumed++;
000896  48e5              LDR      r0,|L1.3116|
000898  6800              LDR      r0,[r0,#0]  ; consumed
00089a  f1000001          ADD      r0,r0,#1
00089e  49e3              LDR      r1,|L1.3116|
0008a0  6008              STR      r0,[r1,#0]  ; consumed
;;;407        
;;;408        //Housekeeping
;;;409        os_mut_release (mutex_mailbox);
0008a2  48db              LDR      r0,|L1.3088|
0008a4  f8dfc34c          LDR      r12,|L1.3060|
0008a8  df00              SVC      #0x0
;;;410        os_sem_send (semWrite);
0008aa  48e1              LDR      r0,|L1.3120|
0008ac  f8dfc384          LDR      r12,|L1.3124|
0008b0  df00              SVC      #0x0
;;;411        
;;;412        if (consumed == N) break;
0008b2  48de              LDR      r0,|L1.3116|
0008b4  6800              LDR      r0,[r0,#0]  ; consumed
0008b6  2864              CMP      r0,#0x64
0008b8  d100              BNE      |L1.2236|
0008ba  e004              B        |L1.2246|
                  |L1.2236|
;;;413        
;;;414        os_dly_wait (DELAY);
0008bc  200a              MOVS     r0,#0xa
0008be  f8dfc378          LDR      r12,|L1.3128|
0008c2  df00              SVC      #0x0
0008c4  e7bb              B        |L1.2110|
                  |L1.2246|
0008c6  bf00              NOP                            ;412
;;;415      }
;;;416      
;;;417      finalize ();
0008c8  f7fffffe          BL       finalize
;;;418      
;;;419      os_tsk_delete_self ();
0008cc  2000              MOVS     r0,#0
0008ce  f8dfc1dc          LDR      r12,|L1.2732|
0008d2  df00              SVC      #0x0
;;;420    }
;;;421    
                          ENDP

                  Producer PROC
;;;335    
;;;336    __task void Producer(void)
0008d4  b51c              PUSH     {r2-r4,lr}
;;;337    {
;;;338      char Message[5];
;;;339      int pid = PID++;
0008d6  48d9              LDR      r0,|L1.3132|
0008d8  6800              LDR      r0,[r0,#0]  ; PID
0008da  4604              MOV      r4,r0
0008dc  48d7              LDR      r0,|L1.3132|
0008de  6800              LDR      r0,[r0,#0]  ; PID
0008e0  f1000001          ADD      r0,r0,#1
0008e4  49d5              LDR      r1,|L1.3132|
0008e6  6008              STR      r0,[r1,#0]  ; PID
;;;340      
;;;341      os_dly_wait (5);
0008e8  f04f0005          MOV      r0,#5
0008ec  f8dfc348          LDR      r12,|L1.3128|
0008f0  df00              SVC      #0x0
;;;342      mq_open("Lab2Queue", 0);
0008f2  2100              MOVS     r1,#0
0008f4  a0c1              ADR      r0,|L1.3068|
0008f6  f8dfc180          LDR      r12,|L1.2680|
0008fa  df00              SVC      #0x0
;;;343      
;;;344      for (EVER)
0008fc  bf00              NOP      
                  |L1.2302|
;;;345      {
;;;346        if ((produced % P) == pid)
0008fe  bb74              CBNZ     r4,|L1.2398|
;;;347        {
;;;348          //Wait for the mailbox to have free space
;;;349          os_sem_wait (semWrite, 0xffff);
000900  f64f71ff          MOV      r1,#0xffff
000904  48ca              LDR      r0,|L1.3120|
000906  f8dfc304          LDR      r12,|L1.3084|
00090a  df00              SVC      #0x0
;;;350          
;;;351          //Wait for the ciritcal section to be available
;;;352          os_mut_wait (mutex_mailbox, 0xffff);
00090c  f64f71ff          MOV      r1,#0xffff
000910  48bf              LDR      r0,|L1.3088|
000912  f8dfc2a0          LDR      r12,|L1.2996|
000916  df00              SVC      #0x0
;;;353          
;;;354          sprintf (Message, "%d", produced);
000918  48c9              LDR      r0,|L1.3136|
00091a  f2af51d0          ADR      r1,|L1.844|
00091e  6802              LDR      r2,[r0,#0]  ; produced
000920  4668              MOV      r0,sp
000922  f7fffffe          BL       __2sprintf
;;;355          Message[4] =0;
000926  f04f0000          MOV      r0,#0
00092a  f88d0004          STRB     r0,[sp,#4]
;;;356          mq_send(QID,Message,5,1);
00092e  f04f0301          MOV      r3,#1
000932  f04f0205          MOV      r2,#5
000936  4669              MOV      r1,sp
000938  48b6              LDR      r0,|L1.3092|
00093a  6800              LDR      r0,[r0,#0]  ; QID
00093c  b200              SXTH     r0,r0
00093e  f7fffffe          BL       mq_send
;;;357          
;;;358    //	    printf("   Message sent: %d\n",produced);
;;;359          
;;;360          produced++;
000942  48bf              LDR      r0,|L1.3136|
000944  6800              LDR      r0,[r0,#0]  ; produced
000946  f1000001          ADD      r0,r0,#1
00094a  49bd              LDR      r1,|L1.3136|
00094c  6008              STR      r0,[r1,#0]  ; produced
;;;361          
;;;362          //Housekeeping
;;;363          os_mut_release (mutex_mailbox);
00094e  48b0              LDR      r0,|L1.3088|
000950  f8dfc2a0          LDR      r12,|L1.3060|
000954  df00              SVC      #0x0
;;;364          os_sem_send (semRead);
000956  48ac              LDR      r0,|L1.3080|
000958  f8dfc2d8          LDR      r12,|L1.3124|
00095c  df00              SVC      #0x0
                  |L1.2398|
;;;365        }
;;;366        
;;;367        if (produced == N) break;
00095e  48b8              LDR      r0,|L1.3136|
000960  6800              LDR      r0,[r0,#0]  ; produced
000962  2864              CMP      r0,#0x64
000964  d100              BNE      |L1.2408|
000966  e004              B        |L1.2418|
                  |L1.2408|
;;;368        
;;;369        os_dly_wait (DELAY);
000968  200a              MOVS     r0,#0xa
00096a  f8dfc2cc          LDR      r12,|L1.3128|
00096e  df00              SVC      #0x0
000970  e7c5              B        |L1.2302|
                  |L1.2418|
000972  bf00              NOP                            ;367
;;;370      }
;;;371      
;;;372      os_tsk_delete_self ();
000974  2000              MOVS     r0,#0
000976  f8dfc134          LDR      r12,|L1.2732|
00097a  df00              SVC      #0x0
;;;373    }
;;;374    
                          ENDP

                  clock PROC
;;;424     **/
;;;425    __task void clock (void)
00097c  200a              MOVS     r0,#0xa
;;;426    {
;;;427      os_itv_set (10);
00097e  f8dfc2c4          LDR      r12,|L1.3140|
000982  df00              SVC      #0x0
;;;428      
;;;429      for (EVER)
000984  bf00              NOP      
                  |L1.2438|
;;;430      {
;;;431        decimal++;
000986  488f              LDR      r0,|L1.3012|
000988  6800              LDR      r0,[r0,#0]  ; decimal
00098a  f1000001          ADD      r0,r0,#1
00098e  498d              LDR      r1,|L1.3012|
000990  6008              STR      r0,[r1,#0]  ; decimal
;;;432        
;;;433        if (decimal == 10)
000992  4608              MOV      r0,r1
000994  6800              LDR      r0,[r0,#0]  ; decimal
000996  280a              CMP      r0,#0xa
000998  d109              BNE      |L1.2478|
;;;434        {
;;;435          second++;
00099a  4888              LDR      r0,|L1.3004|
00099c  6800              LDR      r0,[r0,#0]  ; second
00099e  f1000001          ADD      r0,r0,#1
0009a2  4986              LDR      r1,|L1.3004|
0009a4  6008              STR      r0,[r1,#0]  ; second
;;;436          decimal = 0;
0009a6  f04f0000          MOV      r0,#0
0009aa  4986              LDR      r1,|L1.3012|
0009ac  6008              STR      r0,[r1,#0]  ; decimal
                  |L1.2478|
;;;437        }
;;;438        
;;;439        os_itv_wait ();
0009ae  f8dfc298          LDR      r12,|L1.3144|
0009b2  df00              SVC      #0x0
0009b4  e7e7              B        |L1.2438|
;;;440      }
;;;441    }
;;;442    
                          ENDP

                  Lab2Test PROC
;;;296     ******************************************************************************/
;;;297    __task void Lab2Test(void)
0009b6  f04f0000          MOV      r0,#0
;;;298    {
;;;299      int count = 0;
0009ba  4604              MOV      r4,r0
;;;300      
;;;301      printf("\n   ***LAB 2 TEST***\n");
0009bc  a0a3              ADR      r0,|L1.3148|
0009be  f7fffffe          BL       __2printf
;;;302      printf("   - Lab 2 implemented using the Posix message queue\n\n");
0009c2  a0a8              ADR      r0,|L1.3172|
0009c4  f7fffffe          BL       __2printf
;;;303      
;;;304      //Clock
;;;305      os_tsk_create (clock, 255);
0009c8  2300              MOVS     r3,#0
0009ca  461a              MOV      r2,r3
0009cc  21ff              MOVS     r1,#0xff
0009ce  f2af0053          ADR      r0,clock + 1
0009d2  f8dfc2c8          LDR      r12,|L1.3228|
0009d6  df00              SVC      #0x0
;;;306      
;;;307      //Semaphores and mutex
;;;308      os_mut_init (mutex_mailbox);
0009d8  488d              LDR      r0,|L1.3088|
0009da  f8dfc2c4          LDR      r12,|L1.3232|
0009de  df00              SVC      #0x0
;;;309      os_mut_init (mutex_timing);
0009e0  4873              LDR      r0,|L1.2992|
0009e2  f8dfc2bc          LDR      r12,|L1.3232|
0009e6  df00              SVC      #0x0
;;;310      os_sem_init (semWrite, B);
0009e8  2120              MOVS     r1,#0x20
0009ea  4891              LDR      r0,|L1.3120|
0009ec  f8dfc2b4          LDR      r12,|L1.3236|
0009f0  df00              SVC      #0x0
;;;311      os_sem_init (semRead, 0);
0009f2  2100              MOVS     r1,#0
0009f4  4884              LDR      r0,|L1.3080|
0009f6  f8dfc2ac          LDR      r12,|L1.3236|
0009fa  df00              SVC      #0x0
;;;312      
;;;313      QID = mq_open("Lab2Queue",O_CREAT | O_EXCL);
0009fc  2118              MOVS     r1,#0x18
0009fe  a07f              ADR      r0,|L1.3068|
000a00  f8dfc074          LDR      r12,|L1.2680|
000a04  df00              SVC      #0x0
000a06  4983              LDR      r1,|L1.3092|
000a08  6008              STR      r0,[r1,#0]  ; QID
;;;314    	printf("   Queue descripter 0x%x\n",QID);
000a0a  4608              MOV      r0,r1
000a0c  6801              LDR      r1,[r0,#0]  ; QID
000a0e  f2af7024          ADR      r0,|L1.748|
000a12  f7fffffe          BL       __2printf
;;;315      
;;;316      //Producers
;;;317      for (count = 0; count < P; count++)
000a16  f04f0000          MOV      r0,#0
000a1a  4604              MOV      r4,r0
000a1c  e00a              B        |L1.2612|
                  |L1.2590|
;;;318      {
;;;319        os_tsk_create (Producer,2);
000a1e  2300              MOVS     r3,#0
000a20  461a              MOV      r2,r3
000a22  2102              MOVS     r1,#2
000a24  f2af1053          ADR      r0,Producer + 1
000a28  f8dfc270          LDR      r12,|L1.3228|
000a2c  df00              SVC      #0x0
000a2e  f1040001          ADD      r0,r4,#1              ;317
000a32  4604              MOV      r4,r0                 ;317
                  |L1.2612|
000a34  2c01              CMP      r4,#1                 ;317
000a36  dbf2              BLT      |L1.2590|
;;;320      }
;;;321      
;;;322      //Consumers
;;;323      for (count = 0; count < C; count++)
000a38  f04f0000          MOV      r0,#0
000a3c  4604              MOV      r4,r0
000a3e  e00a              B        |L1.2646|
                  |L1.2624|
;;;324      {
;;;325        os_tsk_create (Consumer,2);
000a40  2300              MOVS     r3,#0
000a42  461a              MOV      r2,r3
000a44  2102              MOVS     r1,#2
000a46  f2af2025          ADR      r0,Consumer + 1
000a4a  f8dfc250          LDR      r12,|L1.3228|
000a4e  df00              SVC      #0x0
000a50  f1040001          ADD      r0,r4,#1              ;323
000a54  4604              MOV      r4,r0                 ;323
                  |L1.2646|
000a56  2c02              CMP      r4,#2                 ;323
000a58  dbf2              BLT      |L1.2624|
;;;326      }
;;;327      
;;;328      //Store the initialization time
;;;329      startSec = second;
000a5a  4858              LDR      r0,|L1.3004|
000a5c  6800              LDR      r0,[r0,#0]  ; second
000a5e  495c              LDR      r1,|L1.3024|
000a60  6008              STR      r0,[r1,#0]  ; startSec
;;;330      startDec = decimal;
000a62  4858              LDR      r0,|L1.3012|
000a64  6800              LDR      r0,[r0,#0]  ; decimal
000a66  4959              LDR      r1,|L1.3020|
000a68  6008              STR      r0,[r1,#0]  ; startDec
;;;331      
;;;332      //Housekeeping
;;;333      os_tsk_delete_self ();
000a6a  2000              MOVS     r0,#0
000a6c  f8dfc03c          LDR      r12,|L1.2732|
000a70  df00              SVC      #0x0
000a72  0000              DCW      0x0000
                  |L1.2676|
                          DCD      ||.constdata||+0xb0
                  |L1.2680|
                          DCD      rt_mq_open
                  |L1.2684|
000a7c  20202046          DCB      "   Filling queue...\n",0
000a80  696c6c69
000a84  6e672071
000a88  75657565
000a8c  2e2e2e0a
000a90  00      
000a91  00                DCB      0
000a92  00                DCB      0
000a93  00                DCB      0
                  |L1.2708|
000a94  616200            DCB      "ab",0
000a97  00                DCB      0
                  |L1.2712|
000a98  20202044          DCB      "   Done Sending\n",0
000a9c  6f6e6520
000aa0  53656e64
000aa4  696e670a
000aa8  00      
000aa9  00                DCB      0
000aaa  00                DCB      0
000aab  00                DCB      0
                  |L1.2732|
                          DCD      rt_tsk_delete
                  |L1.2736|
000ab0  0a202020          DCB      "\n   ***MULTI-QUEUE TEST***\n",0
000ab4  2a2a2a4d
000ab8  554c5449
000abc  2d515545
000ac0  55452054
000ac4  4553542a
000ac8  2a2a0a00
                  |L1.2764|
000acc  2020202d          DCB      "   - Sends and receives messages using two different qu"
000ad0  2053656e
000ad4  64732061
000ad8  6e642072
000adc  65636569
000ae0  76657320
000ae4  6d657373
000ae8  61676573
000aec  20757369
000af0  6e672074
000af4  776f2064
000af8  69666665
000afc  72656e74
000b00  207175  
000b03  65756573          DCB      "eues\n\n",0
000b07  0a0a00  
000b0a  00                DCB      0
000b0b  00                DCB      0
                  |L1.2828|
000b0c  71756575          DCB      "queue2",0
000b10  653200  
000b13  00                DCB      0
                  |L1.2836|
000b14  20202053          DCB      "   Sending message to queue1\n",0
000b18  656e6469
000b1c  6e67206d
000b20  65737361
000b24  67652074
000b28  6f207175
000b2c  65756531
000b30  0a00    
000b32  00                DCB      0
000b33  00                DCB      0
                  |L1.2868|
000b34  20202053          DCB      "   Sending message to queue2\n",0
000b38  656e6469
000b3c  6e67206d
000b40  65737361
000b44  67652074
000b48  6f207175
000b4c  65756532
000b50  0a00    
000b52  00                DCB      0
000b53  00                DCB      0
                  |L1.2900|
000b54  6200              DCB      "b",0
000b56  00                DCB      0
000b57  00                DCB      0
                  |L1.2904|
000b58  2020204d          DCB      "   Message received from queue2: %d \n",0
000b5c  65737361
000b60  67652072
000b64  65636569
000b68  76656420
000b6c  66726f6d
000b70  20717565
000b74  7565323a
000b78  20256420
000b7c  0a00    
000b7e  00                DCB      0
000b7f  00                DCB      0
                  |L1.2944|
000b80  2020204d          DCB      "   Message received from queue1: %d \n",0
000b84  65737361
000b88  67652072
000b8c  65636569
000b90  76656420
000b94  66726f6d
000b98  20717565
000b9c  7565313a
000ba0  20256420
000ba4  0a00    
000ba6  00                DCB      0
000ba7  00                DCB      0
                  |L1.2984|
000ba8  20202044          DCB      "   Done",0
000bac  6f6e6500
                  |L1.2992|
                          DCD      mutex_timing
                  |L1.2996|
                          DCD      rt_mut_wait
                  |L1.3000|
                          DCD      timingDisplayed
                  |L1.3004|
                          DCD      second
                  |L1.3008|
                          DCD      endSec
                  |L1.3012|
                          DCD      decimal
                  |L1.3016|
                          DCD      endDec
                  |L1.3020|
                          DCD      startDec
                  |L1.3024|
                          DCD      startSec
                  |L1.3028|
000bd4  496e6974          DCB      "Init: %u.%04u s",0
000bd8  3a202575
000bdc  2e253034
000be0  75207300
                  |L1.3044|
000be4  446f6e65          DCB      "Done: %u.%04u s",0
000be8  3a202575
000bec  2e253034
000bf0  75207300
                  |L1.3060|
                          DCD      rt_mut_release
                  |L1.3064|
                          DCD      ||CID||
                  |L1.3068|
000bfc  4c616232          DCB      "Lab2Queue",0
000c00  51756575
000c04  6500    
000c06  00                DCB      0
000c07  00                DCB      0
                  |L1.3080|
                          DCD      semRead
                  |L1.3084|
                          DCD      rt_sem_wait
                  |L1.3088|
                          DCD      mutex_mailbox
                  |L1.3092|
                          DCD      QID
                  |L1.3096|
000c18  20202052          DCB      "   Received: %d\n",0
000c1c  65636569
000c20  7665643a
000c24  2025640a
000c28  00      
000c29  00                DCB      0
000c2a  00                DCB      0
000c2b  00                DCB      0
                  |L1.3116|
                          DCD      consumed
                  |L1.3120|
                          DCD      semWrite
                  |L1.3124|
                          DCD      rt_sem_send
                  |L1.3128|
                          DCD      rt_dly_wait
                  |L1.3132|
                          DCD      PID
                  |L1.3136|
                          DCD      produced
                  |L1.3140|
                          DCD      rt_itv_set
                  |L1.3144|
                          DCD      rt_itv_wait
                  |L1.3148|
000c4c  0a202020          DCB      "\n   ***LAB 2 TEST***\n",0
000c50  2a2a2a4c
000c54  41422032
000c58  20544553
000c5c  542a2a2a
000c60  0a00    
000c62  00                DCB      0
000c63  00                DCB      0
                  |L1.3172|
000c64  2020202d          DCB      "   - Lab 2 implemented using the Posix message queue\n\n"
000c68  204c6162
000c6c  20322069
000c70  6d706c65
000c74  6d656e74
000c78  65642075
000c7c  73696e67
000c80  20746865
000c84  20506f73
000c88  6978206d
000c8c  65737361
000c90  67652071
000c94  75657565
000c98  0a0a    
000c9a  00                DCB      0
000c9b  00                DCB      0
                  |L1.3228|
                          DCD      rt_tsk_create
                  |L1.3232|
                          DCD      rt_mut_init
                  |L1.3236|
                          DCD      rt_sem_init
                          ENDP

                  main PROC
;;;474     ******************************************************************************/
;;;475    int main ()
000ca8  b510              PUSH     {r4,lr}
;;;476    {
;;;477      SystemInit();
000caa  f7fffffe          BL       SystemInit
;;;478      
;;;479      // initialize the 2nd serial port (UART#2 in simulator)
;;;480    	// UART index starts from 0 in code
;;;481    	// UART index starts from 1 in simulator
;;;482    	SER_init(1);
000cae  2001              MOVS     r0,#1
000cb0  f7fffffe          BL       SER_init
;;;483    	
;;;484    	//os_sys_init(BasicTest);
;;;485    	//os_sys_init(OpenClose);
;;;486    	os_sys_init(NonBlockingTest);
000cb4  f7fffffe          BL       os_set_env
000cb8  2200              MOVS     r2,#0
000cba  4611              MOV      r1,r2
000cbc  f6af3021          ADR      r0,NonBlockingTest + 1
000cc0  f8dfc008          LDR      r12,|L1.3276|
000cc4  df00              SVC      #0x0
;;;487    //	os_sys_init(BlockingTest);
;;;488    	//os_sys_init(BlockUnblockTest);
;;;489      //os_sys_init(SendBlockTest); 
;;;490      //os_sys_init(MultiQueueTest);
;;;491      //os_sys_init(Lab2Test);
;;;492      
;;;493    	return 0;
000cc6  2000              MOVS     r0,#0
;;;494    }
000cc8  bd10              POP      {r4,pc}
                          ENDP

000cca  0000              DCW      0x0000
                  |L1.3276|
                          DCD      rt_sys_init

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mutex_mailbox
                          %        12
                  mutex_timing
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  2020202d          DCB      0x20,0x20,0x20,0x2d
000004  2053656e          DCB      0x20,0x53,0x65,0x6e
000008  64732061          DCB      0x64,0x73,0x20,0x61
00000c  206d6573          DCB      0x20,0x6d,0x65,0x73
000010  73616765          DCB      0x73,0x61,0x67,0x65
000014  20776869          DCB      0x20,0x77,0x68,0x69
000018  6c652074          DCB      0x6c,0x65,0x20,0x74
00001c  68652071          DCB      0x68,0x65,0x20,0x71
000020  75657565          DCB      0x75,0x65,0x75,0x65
000024  20697320          DCB      0x20,0x69,0x73,0x20
000028  6f70656e          DCB      0x6f,0x70,0x65,0x6e
00002c  20616e64          DCB      0x20,0x61,0x6e,0x64
000030  20776869          DCB      0x20,0x77,0x68,0x69
000034  6c650a20          DCB      0x6c,0x65,0x0a,0x20
000038  20202020          DCB      0x20,0x20,0x20,0x20
00003c  74686520          DCB      0x74,0x68,0x65,0x20
000040  71756575          DCB      0x71,0x75,0x65,0x75
000044  65206973          DCB      0x65,0x20,0x69,0x73
000048  20636c6f          DCB      0x20,0x63,0x6c,0x6f
00004c  7365642c          DCB      0x73,0x65,0x64,0x2c
000050  20636f6d          DCB      0x20,0x63,0x6f,0x6d
000054  70617269          DCB      0x70,0x61,0x72,0x69
000058  6e672072          DCB      0x6e,0x67,0x20,0x72
00005c  65747572          DCB      0x65,0x74,0x75,0x72
000060  6e207661          DCB      0x6e,0x20,0x76,0x61
000064  6c756573          DCB      0x6c,0x75,0x65,0x73
000068  0a000000          DCB      0x0a,0x00,0x00,0x00
00006c  2020202d          DCB      0x20,0x20,0x20,0x2d
000070  20426c6f          DCB      0x20,0x42,0x6c,0x6f
000074  636b7320          DCB      0x63,0x6b,0x73,0x20
000078  756e7469          DCB      0x75,0x6e,0x74,0x69
00007c  6c207468          DCB      0x6c,0x20,0x74,0x68
000080  65206d65          DCB      0x65,0x20,0x6d,0x65
000084  73736167          DCB      0x73,0x73,0x61,0x67
000088  65206973          DCB      0x65,0x20,0x69,0x73
00008c  20617661          DCB      0x20,0x61,0x76,0x61
000090  696c6162          DCB      0x69,0x6c,0x61,0x62
000094  6c652028          DCB      0x6c,0x65,0x20,0x28
000098  66726f6d          DCB      0x66,0x72,0x6f,0x6d
00009c  20616e6f          DCB      0x20,0x61,0x6e,0x6f
0000a0  74686572          DCB      0x74,0x68,0x65,0x72
0000a4  20746173          DCB      0x20,0x74,0x61,0x73
0000a8  6b290a0a          DCB      0x6b,0x29,0x0a,0x0a
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  2020202d          DCB      0x20,0x20,0x20,0x2d
0000b4  2041206d          DCB      0x20,0x41,0x20,0x6d
0000b8  65737361          DCB      0x65,0x73,0x73,0x61
0000bc  67652069          DCB      0x67,0x65,0x20,0x69
0000c0  73207265          DCB      0x73,0x20,0x72,0x65
0000c4  63656976          DCB      0x63,0x65,0x69,0x76
0000c8  65642069          DCB      0x65,0x64,0x20,0x69
0000cc  6e20616e          DCB      0x6e,0x20,0x61,0x6e
0000d0  6f746865          DCB      0x6f,0x74,0x68,0x65
0000d4  72207461          DCB      0x72,0x20,0x74,0x61
0000d8  736b2c20          DCB      0x73,0x6b,0x2c,0x20
0000dc  616c6c6f          DCB      0x61,0x6c,0x6c,0x6f
0000e0  77696e67          DCB      0x77,0x69,0x6e,0x67
0000e4  20746865          DCB      0x20,0x74,0x68,0x65
0000e8  206c6173          DCB      0x20,0x6c,0x61,0x73
0000ec  74206d65          DCB      0x74,0x20,0x6d,0x65
0000f0  73736167          DCB      0x73,0x73,0x61,0x67
0000f4  6520746f          DCB      0x65,0x20,0x74,0x6f
0000f8  2073656e          DCB      0x20,0x73,0x65,0x6e
0000fc  640a0a00          DCB      0x64,0x0a,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  timingDisplayed
                          DCD      0x00000000
                  produced
                          DCD      0x00000000
                  consumed
                          DCD      0x00000000
                  PID
                          DCD      0x00000000
                  ||CID||
                          DCD      0x00000000
                  displayLine
                          DCD      0x00000000
                  second
                          DCD      0x00000000
                  decimal
                          DCD      0x00000000
                  startSec
                          DCD      0x00000000
                  startDec
                          DCD      0x00000000
                  endSec
                          DCD      0x00000000
                  endDec
                          DCD      0x00000000
                  semRead
                          %        8
                  semWrite
                          %        8
                  QID
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\main.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_f890cf75____REV16|
#line 112 "C:\\Software\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_f890cf75____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_f890cf75____REVSH|
#line 130
|__asm___6_main_c_f890cf75____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
