; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -oposix_queue.o --asm_dir=.\ --list_dir=.\ --depend=posix_queue.d --cpu=Cortex-M3 --apcs=interwork -O0 -IC:\Software\Keil\ARM\CMSIS\Include -IC:\Software\Keil\ARM\INC\NXP\LPC17xx --omf_browse=posix_queue.crf src\posix_queue.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mq_send PROC
;;;4      
;;;5      int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;6      {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;7      	U8 returnValue;
;;;8      
;;;9      	returnValue = _mq_send((U32)rt_mq_send,mqdes,msg_ptr,msg_len,msg_prio);
00000c  4643              MOV      r3,r8
00000e  463a              MOV      r2,r7
000010  4631              MOV      r1,r6
000012  4628              MOV      r0,r5
000014  f8dfc064          LDR      r12,|L1.124|
000018  df00              SVC      #0x0
00001a  b2c0              UXTB     r0,r0
00001c  4604              MOV      r4,r0
;;;10     
;;;11     	if (returnValue == BLOCK) //if we blocked and unblocked might be able to send message now so try
00001e  2cff              CMP      r4,#0xff
000020  d105              BNE      |L1.46|
;;;12     	{
;;;13     		mq_send(mqdes, msg_ptr, msg_len, msg_prio);
000022  4643              MOV      r3,r8
000024  463a              MOV      r2,r7
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       mq_send
                  |L1.46|
;;;14     	}
;;;15     
;;;16       if (returnValue ==  BLOCK)
00002e  2cff              CMP      r4,#0xff
000030  d102              BNE      |L1.56|
;;;17       {
;;;18         returnValue = 0;
000032  f04f0000          MOV      r0,#0
000036  4604              MOV      r4,r0
                  |L1.56|
;;;19       }
;;;20        
;;;21     	return returnValue;
000038  4620              MOV      r0,r4
;;;22     }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;23     
                          ENDP

                  mq_receive PROC
;;;24     int mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio)
00003e  e92d41f0          PUSH     {r4-r8,lr}
;;;25     {
000042  4605              MOV      r5,r0
000044  460e              MOV      r6,r1
000046  4617              MOV      r7,r2
000048  4698              MOV      r8,r3
;;;26     	U8 returnValue;
;;;27     
;;;28     	returnValue =  _mq_receive((U32)rt_mq_receive,mqdes,msg_ptr,msg_len,msg_prio);
00004a  4643              MOV      r3,r8
00004c  463a              MOV      r2,r7
00004e  4631              MOV      r1,r6
000050  4628              MOV      r0,r5
000052  f8dfc02c          LDR      r12,|L1.128|
000056  df00              SVC      #0x0
000058  b2c0              UXTB     r0,r0
00005a  4604              MOV      r4,r0
;;;29     
;;;30     	if (returnValue == BLOCK) //if we blocked and unblocked might be able to send message now so try
00005c  2cff              CMP      r4,#0xff
00005e  d105              BNE      |L1.108|
;;;31     	{
;;;32     		mq_receive(mqdes, msg_ptr, msg_len, msg_prio);
000060  4643              MOV      r3,r8
000062  463a              MOV      r2,r7
000064  4631              MOV      r1,r6
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       mq_receive
                  |L1.108|
;;;33     	}
;;;34     
;;;35        if (returnValue ==  BLOCK)
00006c  2cff              CMP      r4,#0xff
00006e  d102              BNE      |L1.118|
;;;36       {
;;;37         returnValue = 0;
000070  f04f0000          MOV      r0,#0
000074  4604              MOV      r4,r0
                  |L1.118|
;;;38       }
;;;39     	return returnValue;
000076  4620              MOV      r0,r4
;;;40     }
000078  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.124|
                          DCD      rt_mq_send
                  |L1.128|
                          DCD      rt_mq_receive

;*** Start embedded assembler ***

#line 1 "src\\posix_queue.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_posix_queue_c_mq_send____REV16|
#line 112 "C:\\Software\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_posix_queue_c_mq_send____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_posix_queue_c_mq_send____REVSH|
#line 130
|__asm___13_posix_queue_c_mq_send____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
